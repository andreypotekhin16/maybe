--- START OF FILE: main\management\commands\createsuper.py ---
```py
# main/management/commands/createsuper.py
import os
from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model

User = get_user_model()

class Command(BaseCommand):
    help = 'Creates a superuser from environment variables.'

    def handle(self, *args, **options):
        username = os.environ.get('DJANGO_SUPERUSER_USERNAME')
        email = os.environ.get('DJANGO_SUPERUSER_EMAIL')
        password = os.environ.get('DJANGO_SUPERUSER_PASSWORD')

        if not all([username, email, password]):
            self.stdout.write(self.style.ERROR('Missing superuser environment variables'))
            return

        if not User.objects.filter(username=username).exists():
            self.stdout.write(f'Creating account for {username} ({email})')
            User.objects.create_superuser(email=email, username=username, password=password)
            self.stdout.write(self.style.SUCCESS('Superuser created successfully.'))
        else:
            self.stdout.write(self.style.WARNING('Superuser already exists.'))
```
--- END OF FILE: main\management\commands\createsuper.py ---

--- START OF FILE: main\management\commands\__init__.py ---
```py

```
--- END OF FILE: main\management\commands\__init__.py ---

--- START OF FILE: main\management\__init__.py ---
```py

```
--- END OF FILE: main\management\__init__.py ---

--- START OF FILE: main\migrations\0001_initial.py ---
```py
# Generated by Django 5.2.1 on 2025-06-19 10:01

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название услуги/игры')),
                ('description', models.TextField(verbose_name='Описание')),
                ('vk_link', models.URLField(blank=True, max_length=250, null=True, verbose_name='Ссылка на VK для записи/подробностей')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Порядок отображения')),
            ],
            options={
                'verbose_name': 'Услуга/Игра',
                'verbose_name_plural': 'Услуги и Игры',
                'ordering': ['order'],
            },
        ),
    ]
```
--- END OF FILE: main\migrations\0001_initial.py ---

--- START OF FILE: main\migrations\0002_alter_service_options_alter_service_order_and_more.py ---
```py
# Generated by Django 5.2.1 on 2025-06-19 15:17

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0001_initial'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='service',
            options={'ordering': ['order', 'name'], 'verbose_name': 'Услуга или Игра', 'verbose_name_plural': 'Услуги и Игры'},
        ),
        migrations.AlterField(
            model_name='service',
            name='order',
            field=models.PositiveIntegerField(db_index=True, default=0, verbose_name='Порядок сортировки'),
        ),
        migrations.AlterField(
            model_name='service',
            name='vk_link',
            field=models.URLField(blank=True, max_length=250, null=True, verbose_name='Ссылка на VK'),
        ),
    ]
```
--- END OF FILE: main\migrations\0002_alter_service_options_alter_service_order_and_more.py ---

--- START OF FILE: main\migrations\0003_companyprofile.py ---
```py
# Generated by Django 5.2.1 on 2025-06-19 15:24

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0002_alter_service_options_alter_service_order_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='CompanyProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('site_name', models.CharField(default='Название вашего клуба', max_length=200, verbose_name='Название сайта (в Title)')),
                ('motto', models.CharField(blank=True, max_length=255, verbose_name='Девиз компании')),
                ('about_us_text', models.TextField(blank=True, verbose_name="Текст 'О нас'")),
            ],
            options={
                'verbose_name': 'Профиль компании и настройки сайта',
                'verbose_name_plural': 'Профили компании и настройки сайта',
            },
        ),
    ]
```
--- END OF FILE: main\migrations\0003_companyprofile.py ---

--- START OF FILE: main\migrations\0004_orbibolinfo_companyprofile_contact_address_and_more.py ---
```py
# Generated by Django 5.2.1 on 2025-06-19 19:45

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0003_companyprofile'),
    ]

    operations = [
        migrations.CreateModel(
            name='OrbibolInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('general_info', models.TextField(verbose_name="Общая информация (первый абзац под заголовком 'Орбибол')")),
                ('plot_title', models.CharField(default='Сюжетный орбибол', max_length=100, verbose_name="Заголовок блока 'Сюжетный'")),
                ('plot_description', models.TextField(verbose_name="Описание для 'Сюжетный орбибол'")),
                ('tactical_title', models.CharField(default='Тактический орбибол', max_length=100, verbose_name="Заголовок блока 'Тактический'")),
                ('tactical_description', models.TextField(verbose_name="Описание для 'Тактический орбибол'")),
                ('details_link', models.URLField(blank=True, max_length=250, null=True, verbose_name="Ссылка 'Узнать подробнее'")),
            ],
            options={
                'verbose_name': 'Информация об Орбиболе',
                'verbose_name_plural': 'Информация об Орбиболе',
            },
        ),
        migrations.AddField(
            model_name='companyprofile',
            name='contact_address',
            field=models.TextField(blank=True, null=True, verbose_name='Адрес'),
        ),
        migrations.AddField(
            model_name='companyprofile',
            name='contact_email',
            field=models.EmailField(blank=True, max_length=255, null=True, verbose_name='Контактный Email'),
        ),
        migrations.AddField(
            model_name='companyprofile',
            name='contact_phone',
            field=models.CharField(blank=True, max_length=50, null=True, verbose_name='Контактный Телефон'),
        ),
        migrations.AddField(
            model_name='companyprofile',
            name='telegram_profile_link',
            field=models.URLField(blank=True, max_length=250, null=True, verbose_name='Ссылка на профиль Telegram (для иконки в контактах)'),
        ),
        migrations.AddField(
            model_name='companyprofile',
            name='vk_profile_link',
            field=models.URLField(blank=True, max_length=250, null=True, verbose_name='Ссылка на профиль VK (для иконки в контактах)'),
        ),
        migrations.AddField(
            model_name='companyprofile',
            name='youtube_profile_link',
            field=models.URLField(blank=True, max_length=250, null=True, verbose_name='Ссылка на профиль YouTube (для иконки в контактах)'),
        ),
    ]
```
--- END OF FILE: main\migrations\0004_orbibolinfo_companyprofile_contact_address_and_more.py ---

--- START OF FILE: main\migrations\0005_feature.py ---
```py
# Generated by Django 5.2.1 on 2025-06-19 20:06

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0004_orbibolinfo_companyprofile_contact_address_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Feature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Заголовок преимущества')),
                ('description', models.TextField(verbose_name='Описание преимущества')),
                ('icon', models.FileField(upload_to='feature_icons/', verbose_name='Иконка (SVG или PNG)')),
                ('order', models.PositiveIntegerField(db_index=True, default=0, verbose_name='Порядок отображения')),
            ],
            options={
                'verbose_name': 'Преимущество (Что мы предлагаем)',
                'verbose_name_plural': 'Преимущества (Что мы предлагаем)',
                'ordering': ['order'],
            },
        ),
    ]
```
--- END OF FILE: main\migrations\0005_feature.py ---

--- START OF FILE: main\migrations\0006_gametype.py ---
```py
# Generated by Django 5.2.1 on 2025-06-19 20:46

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0005_feature'),
    ]

    operations = [
        migrations.CreateModel(
            name='GameType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название типа игры')),
                ('description', models.TextField(verbose_name='Краткое описание типа игры')),
                ('icon', models.FileField(upload_to='gametype_icons/', verbose_name='Иконка для типа игры (SVG или PNG)')),
                ('order', models.PositiveIntegerField(db_index=True, default=0, verbose_name='Порядок отображения')),
            ],
            options={
                'verbose_name': "Тип игры (секция 'Игры')",
                'verbose_name_plural': "Типы игр (секция 'Игры')",
                'ordering': ['order'],
            },
        ),
    ]
```
--- END OF FILE: main\migrations\0006_gametype.py ---

--- START OF FILE: main\migrations\0007_alter_service_options_remove_service_description_and_more.py ---
```py
# Generated by Django 5.2.1 on 2025-06-19 21:48

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0006_gametype'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='service',
            options={'ordering': ['order', 'name'], 'verbose_name': 'Игра/Услуга (для Записи на игру)', 'verbose_name_plural': 'Игры/Услуги (для Записи на игру)'},
        ),
        migrations.RemoveField(
            model_name='service',
            name='description',
        ),
        migrations.AddField(
            model_name='service',
            name='detailed_description',
            field=models.TextField(default='Подробное описание скоро появится.', verbose_name='Подробное описание (Когда, Жанры, Цена и т.д.)'),
        ),
        migrations.AddField(
            model_name='service',
            name='image',
            field=models.ImageField(blank=True, null=True, upload_to='service_arts/', verbose_name='Арт для игры (для карусели)'),
        ),
        migrations.AddField(
            model_name='service',
            name='short_description',
            field=models.CharField(blank=True, max_length=255, null=True, verbose_name='Краткое описание/даты (для карусели)'),
        ),
        migrations.AlterField(
            model_name='service',
            name='name',
            field=models.CharField(max_length=200, verbose_name='Название игры/услуги (для Записи на игру)'),
        ),
        migrations.AlterField(
            model_name='service',
            name='vk_link',
            field=models.URLField(blank=True, max_length=250, null=True, verbose_name='Ссылка на VK для записи'),
        ),
    ]
```
--- END OF FILE: main\migrations\0007_alter_service_options_remove_service_description_and_more.py ---

--- START OF FILE: main\migrations\0008_alter_service_image.py ---
```py


from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0007_alter_service_options_remove_service_description_and_more'),
    ]

    operations = [
        migrations.AlterField(
            model_name='service',
            name='image',
            field=models.FileField(blank=True, null=True, upload_to='service_arts/', verbose_name='Арт для игры (для карусели, SVG/PNG)'),
        ),
    ]
```
--- END OF FILE: main\migrations\0008_alter_service_image.py ---

--- START OF FILE: main\migrations\0009_paginationsettings.py ---
```py
# Generated by Django 5.2.1 on 2025-06-20 20:33

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0008_alter_service_image'),
    ]

    operations = [
        migrations.CreateModel(
            name='PaginationSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('diamond_count', models.PositiveIntegerField(default=8, verbose_name='Количество ромбиков')),
                ('diamond_size', models.PositiveIntegerField(default=12, verbose_name='Размер ромбика (в пикселях)')),
                ('active_color', models.CharField(default='#D90C6B', max_length=7, verbose_name='Цвет активного ромбика (HEX)')),
                ('inactive_color', models.CharField(default='#FFFFFF', max_length=7, verbose_name='Цвет неактивного ромбика (HEX)')),
            ],
            options={
                'verbose_name': 'Настройки пагинации карусели',
                'verbose_name_plural': 'Настройки пагинации карусели',
            },
        ),
    ]
```
--- END OF FILE: main\migrations\0009_paginationsettings.py ---

--- START OF FILE: main\migrations\0010_delete_paginationsettings_orbibolinfo_plot_icon_and_more.py ---
```py
# Generated by Django 5.2.1 on 2025-06-20 21:20

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0009_paginationsettings'),
    ]

    operations = [
        migrations.DeleteModel(
            name='PaginationSettings',
        ),
        migrations.AddField(
            model_name='orbibolinfo',
            name='plot_icon',
            field=models.FileField(blank=True, null=True, upload_to='orbibol_icons/', verbose_name='Иконка для "Сюжетный орбибол" (SVG/PNG)'),
        ),
        migrations.AddField(
            model_name='orbibolinfo',
            name='tactical_icon',
            field=models.FileField(blank=True, null=True, upload_to='orbibol_icons/', verbose_name='Иконка для "Тактический орбибол" (SVG/PNG)'),
        ),
    ]

```
--- END OF FILE: main\migrations\0010_delete_paginationsettings_orbibolinfo_plot_icon_and_more.py ---

--- START OF FILE: main\migrations\0011_companyprofile_logo_image_and_more.py ---
```py
# Generated by Django 5.2.1 on 2025-06-20 21:50

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0010_delete_paginationsettings_orbibolinfo_plot_icon_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='companyprofile',
            name='logo_image',
            field=models.FileField(blank=True, null=True, upload_to='site_assets/', verbose_name='Логотип сайта (SVG/PNG)'),
        ),
        migrations.AddField(
            model_name='companyprofile',
            name='telegram_icon',
            field=models.FileField(blank=True, null=True, upload_to='site_assets/', verbose_name='Иконка Telegram (SVG/PNG)'),
        ),
        migrations.AddField(
            model_name='companyprofile',
            name='vk_icon',
            field=models.FileField(blank=True, null=True, upload_to='site_assets/', verbose_name='Иконка VK (SVG/PNG)'),
        ),
        migrations.AddField(
            model_name='companyprofile',
            name='youtube_icon',
            field=models.FileField(blank=True, null=True, upload_to='site_assets/', verbose_name='Иконка YouTube (SVG/PNG)'),
        ),
        migrations.AlterField(
            model_name='companyprofile',
            name='telegram_profile_link',
            field=models.URLField(blank=True, max_length=250, null=True, verbose_name='Ссылка на профиль Telegram'),
        ),
        migrations.AlterField(
            model_name='companyprofile',
            name='vk_profile_link',
            field=models.URLField(blank=True, max_length=250, null=True, verbose_name='Ссылка на профиль VK'),
        ),
        migrations.AlterField(
            model_name='companyprofile',
            name='youtube_profile_link',
            field=models.URLField(blank=True, max_length=250, null=True, verbose_name='Ссылка на профиль YouTube'),
        ),
    ]

```
--- END OF FILE: main\migrations\0011_companyprofile_logo_image_and_more.py ---

--- START OF FILE: main\migrations\0012_product_companyprofile_market_link.py ---
```py
# Generated by Django 5.2.1 on 2025-06-20 22:03

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0011_companyprofile_logo_image_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название товара')),
                ('price', models.PositiveIntegerField(verbose_name='Цена')),
                ('description', models.TextField(verbose_name='Краткое описание товара')),
                ('image', models.FileField(upload_to='product_images/', verbose_name='Изображение товара (SVG/PNG)')),
                ('link', models.URLField(blank=True, null=True, verbose_name='Ссылка на страницу товара')),
                ('order', models.PositiveIntegerField(db_index=True, default=0, verbose_name='Порядок отображения')),
            ],
            options={
                'verbose_name': 'Товар',
                'verbose_name_plural': 'Товары',
                'ordering': ['order'],
            },
        ),
        migrations.AddField(
            model_name='companyprofile',
            name='market_link',
            field=models.URLField(blank=True, max_length=250, null=True, verbose_name='Ссылка "Еще больше товаров" в Маркете'),
        ),
    ]

```
--- END OF FILE: main\migrations\0012_product_companyprofile_market_link.py ---

--- START OF FILE: main\migrations\0013_galleryitem_companyprofile_gallery_description.py ---
```py
# Generated by Django 5.2.1 on 2025-06-20 22:23

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0012_product_companyprofile_market_link'),
    ]

    operations = [
        migrations.CreateModel(
            name='GalleryItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Заголовок (напр. Фотосъемка)')),
                ('image', models.FileField(blank=True, help_text='Загрузите, если это фото.', null=True, upload_to='gallery/', verbose_name='Изображение')),
                ('video', models.FileField(blank=True, help_text='Загрузите, если это видео.', null=True, upload_to='gallery/', verbose_name='Видео (mp4, webm)')),
                ('order_link', models.URLField(verbose_name='Ссылка для кнопки "Заказать"')),
                ('order', models.PositiveIntegerField(db_index=True, default=0, verbose_name='Порядок отображения')),
            ],
            options={
                'verbose_name': 'Элемент галереи',
                'verbose_name_plural': 'Элементы галереи',
                'ordering': ['order'],
            },
        ),
        migrations.AddField(
            model_name='companyprofile',
            name='gallery_description',
            field=models.TextField(blank=True, null=True, verbose_name='Описание для секции "Фото и видео галерея"'),
        ),
    ]

```
--- END OF FILE: main\migrations\0013_galleryitem_companyprofile_gallery_description.py ---

--- START OF FILE: main\migrations\0014_companyprofile_nav_toggle_icon.py ---
```py
# Generated by Django 5.2.1 on 2025-06-20 22:41

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0013_galleryitem_companyprofile_gallery_description'),
    ]

    operations = [
        migrations.AddField(
            model_name='companyprofile',
            name='nav_toggle_icon',
            field=models.FileField(blank=True, null=True, upload_to='site_assets/', verbose_name='Иконка для раскрытия меню (в свернутом хедере)'),
        ),
    ]

```
--- END OF FILE: main\migrations\0014_companyprofile_nav_toggle_icon.py ---

--- START OF FILE: main\migrations\0015_backgroundsettings_backgroundobject.py ---
```py
# Generated by Django 5.2.1 on 2025-06-21 10:42

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0014_companyprofile_nav_toggle_icon'),
    ]

    operations = [
        migrations.CreateModel(
            name='BackgroundSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Основные настройки фона', max_length=100, verbose_name='Название набора настроек')),
                ('background_pattern', models.FileField(blank=True, help_text='Это изображение будет повторяться на фоне.', null=True, upload_to='backgrounds/', verbose_name='Паттерн фона (повторяющееся изображение)')),
                ('pattern_size', models.CharField(default='200px', help_text="CSS значение, например: '200px', '50%', 'cover', 'contain'.", max_length=50, verbose_name='Размер паттерна')),
                ('pattern_opacity', models.DecimalField(decimal_places=2, default=0.1, max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Прозрачность паттерна (от 0.0 до 1.0)')),
                ('background_color', models.CharField(default='rgba(0,0,0,0.5)', help_text="CSS цвет, например: '#000000', 'rgba(0,0,0,0.5)'. Будет поверх паттерна.", max_length=20, verbose_name='Цвет-наложение на фон')),
            ],
            options={
                'verbose_name': 'Настройки фона',
                'verbose_name_plural': 'Настройки фона',
            },
        ),
        migrations.CreateModel(
            name='BackgroundObject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название объекта')),
                ('image', models.FileField(upload_to='backgrounds/objects/', verbose_name='Изображение объекта')),
                ('width', models.PositiveIntegerField(default=150, verbose_name='Ширина объекта (px)')),
                ('initial_top', models.CharField(default='50%', help_text="CSS значение, например '50%' или '100px'", max_length=10, verbose_name='Начальная позиция сверху')),
                ('initial_left', models.CharField(default='50%', help_text="CSS значение, например '50%' или '100px'", max_length=10, verbose_name='Начальная позиция слева')),
                ('animation_duration', models.PositiveIntegerField(default=20, verbose_name='Длительность анимации (секунд)')),
                ('animation_delay', models.PositiveIntegerField(default=0, verbose_name='Задержка перед началом анимации (секунд)')),
                ('opacity', models.DecimalField(decimal_places=2, default=0.5, max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Прозрачность (от 0.0 до 1.0)')),
                ('z_index', models.IntegerField(default=-9, help_text="Чем меньше, тем 'ниже' объект. Паттерн фона на слое -10.", verbose_name='Слой (z-index)')),
                ('order', models.PositiveIntegerField(db_index=True, default=0, verbose_name='Порядок')),
                ('settings', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='objects', to='main.backgroundsettings', verbose_name='Набор настроек')),
            ],
            options={
                'verbose_name': 'Анимированный объект фона',
                'verbose_name_plural': 'Анимированные объекты фона',
                'ordering': ['order'],
            },
        ),
    ]

```
--- END OF FILE: main\migrations\0015_backgroundsettings_backgroundobject.py ---

--- START OF FILE: main\migrations\0016_alter_backgroundobject_settings.py ---
```py
# Generated by Django 5.2.1 on 2025-06-21 10:49

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0015_backgroundsettings_backgroundobject'),
    ]

    operations = [
        migrations.AlterField(
            model_name='backgroundobject',
            name='settings',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='background_objects', to='main.backgroundsettings', verbose_name='Набор настроек'),
        ),
    ]

```
--- END OF FILE: main\migrations\0016_alter_backgroundobject_settings.py ---

--- START OF FILE: main\migrations\0017_backgroundsettings_pattern_animation_duration.py ---
```py
# Generated by Django 5.2.1 on 2025-06-21 16:00

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0016_alter_backgroundobject_settings'),
    ]

    operations = [
        migrations.AddField(
            model_name='backgroundsettings',
            name='pattern_animation_duration',
            field=models.PositiveIntegerField(default=60, help_text="Время полного цикла 'плавания' фона. 0, чтобы отключить.", verbose_name='Длительность анимации паттерна (секунд)'),
        ),
    ]

```
--- END OF FILE: main\migrations\0017_backgroundsettings_pattern_animation_duration.py ---

--- START OF FILE: main\migrations\0018_backgroundsettings_spotlight_enabled_and_more.py ---
```py
# Generated by Django 5.2.1 on 2025-06-21 16:35

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0017_backgroundsettings_pattern_animation_duration'),
    ]

    operations = [
        migrations.AddField(
            model_name='backgroundsettings',
            name='spotlight_enabled',
            field=models.BooleanField(default=True, verbose_name="Включить эффект 'прожектора'"),
        ),
        migrations.AddField(
            model_name='backgroundsettings',
            name='spotlight_size',
            field=models.PositiveIntegerField(default=500, verbose_name='Размер прожектора (px)'),
        ),
        migrations.AlterField(
            model_name='backgroundsettings',
            name='background_color',
            field=models.CharField(default='rgba(1,1,1,0.9)', help_text="CSS цвет, например: '#010101', 'rgba(1,1,1,0.9)'. Будет затемнять паттерн.", max_length=20, verbose_name='Цвет-наложение на фон'),
        ),
        migrations.AlterField(
            model_name='backgroundsettings',
            name='pattern_opacity',
            field=models.DecimalField(decimal_places=2, default=0.3, max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Прозрачность паттерна (от 0.0 до 1.0)'),
        ),
    ]

```
--- END OF FILE: main\migrations\0018_backgroundsettings_spotlight_enabled_and_more.py ---

--- START OF FILE: main\migrations\0019_remove_backgroundsettings_pattern_animation_duration_and_more.py ---
```py
# Generated by Django 5.2.1 on 2025-06-21 17:07

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0018_backgroundsettings_spotlight_enabled_and_more'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='backgroundsettings',
            name='pattern_animation_duration',
        ),
        migrations.RemoveField(
            model_name='backgroundsettings',
            name='spotlight_enabled',
        ),
        migrations.RemoveField(
            model_name='backgroundsettings',
            name='spotlight_size',
        ),
        migrations.AlterField(
            model_name='backgroundsettings',
            name='background_color',
            field=models.CharField(default='#010101', help_text="CSS цвет, например: '#010101'. Будет под паттерном.", max_length=20, verbose_name='Основной цвет фона'),
        ),
    ]

```
--- END OF FILE: main\migrations\0019_remove_backgroundsettings_pattern_animation_duration_and_more.py ---

--- START OF FILE: main\migrations\0020_backgroundobject_parallax_speed_and_more.py ---
```py
# Generated by Django 5.2.1 on 2025-06-21 17:26

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0019_remove_backgroundsettings_pattern_animation_duration_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='backgroundobject',
            name='parallax_speed',
            field=models.FloatField(default=0.3, help_text='Например: 0.2 (медленнее скролла), 1 (вместе со скроллом), -0.5 (в обратную сторону)', verbose_name='Скорость параллакса'),
        ),
        migrations.AddField(
            model_name='backgroundobject',
            name='parallax_target_id',
            field=models.CharField(blank=True, help_text="Например: 'about-us-section'. Оставьте пустым, чтобы отключить параллакс.", max_length=100, null=True, verbose_name='ID секции для параллакс-эффекта'),
        ),
        migrations.AlterField(
            model_name='backgroundobject',
            name='animation_duration',
            field=models.PositiveIntegerField(default=20, help_text="Длительность 'покачивания'. 0 чтобы отключить.", verbose_name='Длительность анимации (секунд)'),
        ),
    ]

```
--- END OF FILE: main\migrations\0020_backgroundobject_parallax_speed_and_more.py ---

--- START OF FILE: main\migrations\0021_service_hover_text.py ---
```py
# Generated by Django 5.2.1 on 2025-06-22 21:22

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0020_backgroundobject_parallax_speed_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='service',
            name='hover_text',
            field=models.TextField(blank=True, help_text='Этот текст появится при наведении на центральный слайд. Если пусто, останется краткое описание.', null=True, verbose_name='Текст при наведении (в карусели)'),
        ),
    ]

```
--- END OF FILE: main\migrations\0021_service_hover_text.py ---

--- START OF FILE: main\migrations\0022_companyprofile_logo_image_light.py ---
```py
# Generated by Django 5.2.1 on 2025-06-23 15:44

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0021_service_hover_text'),
    ]

    operations = [
        migrations.AddField(
            model_name='companyprofile',
            name='logo_image_light',
            field=models.FileField(blank=True, help_text='Светлая версия логотипа для темных фонов (SVG/PNG)', null=True, upload_to='site_assets/', verbose_name='Логотип (светлый)'),
        ),
    ]

```
--- END OF FILE: main\migrations\0022_companyprofile_logo_image_light.py ---

--- START OF FILE: main\migrations\0023_companyprofile_favicon.py ---
```py
# START OF FILE: main/migrations/0023_companyprofile_favicon.py
# Generated by Django 5.2.1 on 2025-07-12 11:30

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0022_companyprofile_logo_image_light'),
    ]

    operations = [
        migrations.AddField(
            model_name='companyprofile',
            name='favicon',
            field=models.FileField(blank=True, help_text='Иконка для вкладки браузера (файл .ico, .png или .svg)', null=True, upload_to='site_assets/', verbose_name='Фавикон'),
        ),
    ]
# END OF FILE: main/migrations/0023_companyprofile_favicon.py
```
--- END OF FILE: main\migrations\0023_companyprofile_favicon.py ---

--- START OF FILE: main\migrations\0024_delete_service.py ---
```py
# Generated by Django 5.2.1 on 2025-07-12 20:53

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0023_companyprofile_favicon'),
    ]

    operations = [
        migrations.DeleteModel(
            name='Service',
        ),
    ]

```
--- END OF FILE: main\migrations\0024_delete_service.py ---

--- START OF FILE: main\migrations\0025_service.py ---
```py
# Generated by Django 5.2.1 on 2025-07-12 21:03

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0024_delete_service'),
    ]

    operations = [
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название игры/услуги')),
                ('short_description', models.CharField(blank=True, max_length=255, verbose_name='Краткое описание (под названием)')),
                ('image', models.FileField(upload_to='service_images/', verbose_name='Изображение (для карточки в карусели)')),
                ('vk_link', models.URLField(blank=True, null=True, verbose_name='Ссылка на VK для записи')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Порядок сортировки')),
            ],
            options={
                'verbose_name': 'Игра/Услуга для карусели',
                'verbose_name_plural': 'Игры/Услуги для карусели',
                'ordering': ['order'],
            },
        ),
    ]

```
--- END OF FILE: main\migrations\0025_service.py ---

--- START OF FILE: main\migrations\0026_delete_service.py ---
```py
# Generated by Django 5.2.1 on 2025-07-14 11:14

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0025_service'),
    ]

    operations = [
        migrations.DeleteModel(
            name='Service',
        ),
    ]

```
--- END OF FILE: main\migrations\0026_delete_service.py ---

--- START OF FILE: main\migrations\0027_section.py ---
```py
# Generated by Django 5.2.1 on 2025-07-14 13:18

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0026_delete_service'),
    ]

    operations = [
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('section_type', models.CharField(choices=[('about_us', 'О нас'), ('features', 'Что мы предлагаем (Преимущества)'), ('orbibol', 'Орбибол'), ('games', 'Игры'), ('market', 'Маркет'), ('gallery', 'Фото и видео галерея'), ('contacts', 'Контакты')], max_length=50, unique=True, verbose_name='Тип секции')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Порядок отображения')),
                ('is_active', models.BooleanField(default=True, verbose_name='Включена')),
            ],
            options={
                'verbose_name': 'Секция на главной странице',
                'verbose_name_plural': 'Секции на главной странице',
                'ordering': ['order'],
            },
        ),
    ]

```
--- END OF FILE: main\migrations\0027_section.py ---

--- START OF FILE: main\migrations\0028_section_show_title_section_title_and_more.py ---
```py
# Generated by Django 5.2.1 on 2025-07-14 14:06

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0027_section'),
    ]

    operations = [
        migrations.AddField(
            model_name='section',
            name='show_title',
            field=models.BooleanField(default=True, verbose_name='Показывать заголовок'),
        ),
        migrations.AddField(
            model_name='section',
            name='title',
            field=models.CharField(blank=True, help_text='Оставьте пустым, чтобы использовать заголовок по умолчанию.', max_length=200, verbose_name='Заголовок секции'),
        ),
        migrations.AlterField(
            model_name='section',
            name='is_active',
            field=models.BooleanField(default=True, verbose_name='Секция включена'),
        ),
    ]

```
--- END OF FILE: main\migrations\0028_section_show_title_section_title_and_more.py ---

--- START OF FILE: main\migrations\0029_alter_backgroundsettings_options_and_more.py ---
```py
# Generated by Django 5.2.1 on 2025-07-14 14:50

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0028_section_show_title_section_title_and_more'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='backgroundsettings',
            options={'verbose_name': '3. Настройки фона', 'verbose_name_plural': '3. Настройки фона'},
        ),
        migrations.AlterModelOptions(
            name='companyprofile',
            options={'verbose_name': '1. Настройки главной страницы', 'verbose_name_plural': '1. Настройки главной страницы'},
        ),
        migrations.AlterModelOptions(
            name='orbibolinfo',
            options={'verbose_name': "2. Настройки секции 'Орбибол'", 'verbose_name_plural': "2. Настройки секции 'Орбибол'"},
        ),
        migrations.AddField(
            model_name='feature',
            name='company_profile',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='features', to='main.companyprofile'),
        ),
        migrations.AddField(
            model_name='galleryitem',
            name='company_profile',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='gallery_items', to='main.companyprofile'),
        ),
        migrations.AddField(
            model_name='gametype',
            name='company_profile',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='game_types', to='main.companyprofile'),
        ),
        migrations.AddField(
            model_name='product',
            name='company_profile',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='products', to='main.companyprofile'),
        ),
        migrations.AddField(
            model_name='section',
            name='company_profile',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sections', to='main.companyprofile'),
        ),
    ]

```
--- END OF FILE: main\migrations\0029_alter_backgroundsettings_options_and_more.py ---

--- START OF FILE: main\migrations\0030_link_existing_data.py ---
```py
# Generated by Django 5.2.1 on 2025-07-15 14:00
# Этот файл создан вручную для переноса существующих данных.

from django.db import migrations

def link_data_to_profile(apps, schema_editor):
    """
    Эта функция привязывает все существующие записи в моделях
    к первому (и единственному) объекту CompanyProfile.
    """
    # Получаем актуальные версии моделей на момент этой миграции
    CompanyProfile = apps.get_model('main', 'CompanyProfile')
    Feature = apps.get_model('main', 'Feature')
    GameType = apps.get_model('main', 'GameType')
    Product = apps.get_model('main', 'Product')
    GalleryItem = apps.get_model('main', 'GalleryItem')
    Section = apps.get_model('main', 'Section')

    # Находим первый (и единственный) профиль компании.
    # Если его нет (например, при самой первой установке), то ничего не делаем.
    try:
        profile = CompanyProfile.objects.first()
    except CompanyProfile.DoesNotExist:
        profile = None

    if profile:
        # Для каждой модели, находим все записи, где company_profile еще не установлен (is null)
        # и обновляем их, устанавливая ссылку на найденный профиль.
        Feature.objects.filter(company_profile__isnull=True).update(company_profile=profile)
        GameType.objects.filter(company_profile__isnull=True).update(company_profile=profile)
        Product.objects.filter(company_profile__isnull=True).update(company_profile=profile)
        GalleryItem.objects.filter(company_profile__isnull=True).update(company_profile=profile)
        Section.objects.filter(company_profile__isnull=True).update(company_profile=profile)

def reverse_code(apps, schema_editor):
    """
    Функция для отката миграции. 
    Мы намеренно ничего не делаем, так как отвязывать данные обратно не требуется.
    """
    pass

class Migration(migrations.Migration):

    dependencies = [
       
        ('main', '0029_alter_backgroundsettings_options_and_more'), 
    ]

    operations = [
        migrations.RunPython(link_data_to_profile, reverse_code=reverse_code),
    ]
```
--- END OF FILE: main\migrations\0030_link_existing_data.py ---

--- START OF FILE: main\migrations\0031_alter_feature_company_profile_and_more.py ---
```py
# Generated by Django 5.2.1 on 2025-07-14 15:00

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0030_link_existing_data'),
    ]

    operations = [
        migrations.AlterField(
            model_name='feature',
            name='company_profile',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='features', to='main.companyprofile'),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='galleryitem',
            name='company_profile',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='gallery_items', to='main.companyprofile'),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='gametype',
            name='company_profile',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='game_types', to='main.companyprofile'),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='product',
            name='company_profile',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='products', to='main.companyprofile'),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='section',
            name='company_profile',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='sections', to='main.companyprofile'),
            preserve_default=False,
        ),
    ]

```
--- END OF FILE: main\migrations\0031_alter_feature_company_profile_and_more.py ---

--- START OF FILE: main\migrations\0032_alter_companyprofile_options_and_more.py ---
```py
# Generated by Django 5.2.1 on 2025-07-14 18:09

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0031_alter_feature_company_profile_and_more'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='companyprofile',
            options={'verbose_name': '1. Главные настройки сайта', 'verbose_name_plural': '1. Главные настройки сайта'},
        ),
        migrations.AddField(
            model_name='orbibolinfo',
            name='company_profile',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='orbibol_info', to='main.companyprofile'),
        ),
    ]

```
--- END OF FILE: main\migrations\0032_alter_companyprofile_options_and_more.py ---

--- START OF FILE: main\migrations\0033_link_orbibol_to_profile.py ---
```py
# Generated by Django 5.2.1 on 2025-07-15 15:00

from django.db import migrations

def link_orbibol_to_profile(apps, schema_editor):
    """
    Эта функция находит единственный объект CompanyProfile и единственный
    объект OrbibolInfo и связывает их между собой.
    """
    CompanyProfile = apps.get_model('main', 'CompanyProfile')
    OrbibolInfo = apps.get_model('main', 'OrbibolInfo')

    # Мы предполагаем, что на момент выполнения миграции в базе
    # существует только по одному экземпляру каждой из этих моделей.
    # Это безопасно для вашей текущей конфигурации "синглтона".
    try:
        profile = CompanyProfile.objects.first()
        orbibol_info = OrbibolInfo.objects.first()

        if profile and orbibol_info:
            # Присваиваем профиль полю company_profile в OrbibolInfo
            orbibol_info.company_profile = profile
            orbibol_info.save()
            
    except CompanyProfile.DoesNotExist:
        # Если профиль компании еще не создан, ничего не делаем.
        pass
    except OrbibolInfo.DoesNotExist:
        # Если настроек орбибола нет, тоже ничего не делаем.
        pass

def reverse_link_orbibol(apps, schema_editor):
    """
    Функция для отката миграции. В данном случае, мы просто
    убираем связь, делая поле company_profile пустым (NULL).
    """
    OrbibolInfo = apps.get_model('main', 'OrbibolInfo')
    # Отвязываем все записи от профилей
    OrbibolInfo.objects.update(company_profile=None)


class Migration(migrations.Migration):

    dependencies = [
        
        ('main', '0032_alter_companyprofile_options_and_more'),
    ]

    operations = [
        migrations.RunPython(link_orbibol_to_profile, reverse_code=reverse_link_orbibol),
    ]
```
--- END OF FILE: main\migrations\0033_link_orbibol_to_profile.py ---

--- START OF FILE: main\migrations\0034_alter_orbibolinfo_company_profile.py ---
```py
# Generated by Django 5.2.1 on 2025-07-14 18:14

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0033_link_orbibol_to_profile'),
    ]

    operations = [
        migrations.AlterField(
            model_name='orbibolinfo',
            name='company_profile',
            field=models.OneToOneField(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='orbibol_info', to='main.companyprofile'),
            preserve_default=False,
        ),
    ]

```
--- END OF FILE: main\migrations\0034_alter_orbibolinfo_company_profile.py ---

--- START OF FILE: main\migrations\0035_alter_orbibolinfo_options_alter_section_section_type_and_more.py ---
```py
# Generated by Django 5.2.1 on 2025-07-14 19:15

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0034_alter_orbibolinfo_company_profile'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='orbibolinfo',
            options={'verbose_name': "Настройки секции 'Орбибол'", 'verbose_name_plural': "Настройки секции 'Орбибол'"},
        ),
        migrations.AlterField(
            model_name='section',
            name='section_type',
            field=models.CharField(choices=[('about_us', 'О нас'), ('features', 'Что мы предлагаем (Преимущества)'), ('carousel', 'Карусель'), ('orbibol', 'Орбибол'), ('games', 'Игры'), ('market', 'Маркет'), ('gallery', 'Фото и видео галерея'), ('contacts', 'Контакты')], max_length=50, unique=True, verbose_name='Тип секции'),
        ),
        migrations.CreateModel(
            name='CarouselSlide',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название/Заголовок слайда')),
                ('short_description', models.CharField(blank=True, max_length=255, verbose_name='Краткое описание (под названием)')),
                ('image', models.FileField(upload_to='carousel_slides/', verbose_name='Изображение для слайда')),
                ('vk_link', models.URLField(blank=True, null=True, verbose_name='Ссылка для кнопки')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Порядок сортировки')),
                ('company_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='carousel_slides', to='main.companyprofile')),
            ],
            options={
                'verbose_name': 'Слайд для карусели',
                'verbose_name_plural': 'Слайды для карусели',
                'ordering': ['order'],
            },
        ),
    ]

```
--- END OF FILE: main\migrations\0035_alter_orbibolinfo_options_alter_section_section_type_and_more.py ---

--- START OF FILE: main\migrations\0036_create_all_sections.py ---
```py
# main/migrations/0036_create_all_sections.py
from django.db import migrations

def create_initial_sections(apps, schema_editor):
    """
    Создает все недостающие секции для существующего профиля компании.
    Это гарантирует, что все типы секций, включая 'Карусель', существуют в БД.
    """
    CompanyProfile = apps.get_model('main', 'CompanyProfile')
    Section = apps.get_model('main', 'Section')

    # ВАЖНО: Мы определяем список секций прямо здесь, внутри миграции,
    # а не берем его из модели, чтобы избежать ошибки AttributeError.
    ALL_SECTIONS = [
        ('about_us', 'О нас'),
        ('features', 'Что мы предлагаем (Преимущества)'),
        ('carousel', 'Карусель'),
        ('orbibol', 'Орбибол'),
        ('games', 'Игры'),
        ('market', 'Маркет'),
        ('gallery', 'Фото и видео галерея'),
        ('contacts', 'Контакты'),
    ]

    profile = CompanyProfile.objects.first()
    if not profile:
        return

    for index, (section_type, display_name) in enumerate(ALL_SECTIONS):
        # Используем get_or_create, чтобы создать секцию, только если ее нет
        obj, created = Section.objects.get_or_create(
            company_profile=profile,
            section_type=section_type,
            defaults={
                'title': display_name,
                'order': index
            }
        )
        if created:
            print(f"Создана недостающая секция: {display_name}")

class Migration(migrations.Migration):

    dependencies = [
        ('main', '0035_alter_orbibolinfo_options_alter_section_section_type_and_more'),
    ]

    operations = [
        migrations.RunPython(create_initial_sections, reverse_code=migrations.RunPython.noop),
    ]
```
--- END OF FILE: main\migrations\0036_create_all_sections.py ---

--- START OF FILE: main\migrations\0037_remove_carouselslide_short_description_and_more.py ---
```py
# Generated by Django 5.2.1 on 2025-07-15 13:18

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0036_create_all_sections'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='carouselslide',
            name='short_description',
        ),
        migrations.AddField(
            model_name='carouselslide',
            name='date_text',
            field=models.CharField(blank=True, max_length=100, verbose_name='Дата/Подзаголовок (виден всегда)'),
        ),
        migrations.AddField(
            model_name='carouselslide',
            name='hover_description',
            field=models.TextField(blank=True, verbose_name='Описание (появляется при наведении)'),
        ),
        migrations.AlterField(
            model_name='carouselslide',
            name='name',
            field=models.CharField(max_length=200, verbose_name='Название/Заголовок слайда (виден всегда)'),
        ),
        migrations.AlterField(
            model_name='carouselslide',
            name='vk_link',
            field=models.URLField(blank=True, null=True, verbose_name='Ссылка для кнопки (весь слайд)'),
        ),
    ]

```
--- END OF FILE: main\migrations\0037_remove_carouselslide_short_description_and_more.py ---

--- START OF FILE: main\migrations\0038_remove_galleryitem_order_link_and_more.py ---
```py
# Generated by Django 5.2.1 on 2025-07-15 18:03

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0037_remove_carouselslide_short_description_and_more'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='galleryitem',
            name='order_link',
        ),
        migrations.RemoveField(
            model_name='galleryitem',
            name='title',
        ),
        migrations.AddField(
            model_name='companyprofile',
            name='gallery_button_link',
            field=models.URLField(blank=True, max_length=250, null=True, verbose_name="Ссылка для кнопки 'Узнать подробнее' в галерее"),
        ),
    ]

```
--- END OF FILE: main\migrations\0038_remove_galleryitem_order_link_and_more.py ---

--- START OF FILE: main\migrations\0039_companyprofile_gallery_button_text.py ---
```py
# Generated by Django 5.2.1 on 2025-07-17 09:40

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0038_remove_galleryitem_order_link_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='companyprofile',
            name='gallery_button_text',
            field=models.CharField(blank=True, default='Узнать подробнее', max_length=100, verbose_name='Текст для кнопки в галерее'),
        ),
    ]

```
--- END OF FILE: main\migrations\0039_companyprofile_gallery_button_text.py ---

--- START OF FILE: main\migrations\0040_companyprofile_body_font_companyprofile_header_font.py ---
```py
# Generated by Django 5.2.1 on 2025-07-17 14:22

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0039_companyprofile_gallery_button_text'),
    ]

    operations = [
        migrations.AddField(
            model_name='companyprofile',
            name='body_font',
            field=models.CharField(choices=[('SUNDAY', 'Sunday (кастомный, для заголовков)'), ('FortuneC', 'FortuneC (кастомный, для текста)'), ('Montserrat', 'Montserrat (современный, гротеск)'), ('Roboto', 'Roboto (классический, без засечек)'), ('Playfair Display', 'Playfair Display (элегантный, с засечками)'), ('Lobster', 'Lobster (рукописный, акцентный)')], default='FortuneC', max_length=100, verbose_name='Шрифт для основного текста (параграфы)'),
        ),
        migrations.AddField(
            model_name='companyprofile',
            name='header_font',
            field=models.CharField(choices=[('SUNDAY', 'Sunday (кастомный, для заголовков)'), ('FortuneC', 'FortuneC (кастомный, для текста)'), ('Montserrat', 'Montserrat (современный, гротеск)'), ('Roboto', 'Roboto (классический, без засечек)'), ('Playfair Display', 'Playfair Display (элегантный, с засечками)'), ('Lobster', 'Lobster (рукописный, акцентный)')], default='SUNDAY', max_length=100, verbose_name='Шрифт для заголовков (H1, H2 и т.д.)'),
        ),
    ]

```
--- END OF FILE: main\migrations\0040_companyprofile_body_font_companyprofile_header_font.py ---

--- START OF FILE: main\migrations\0041_customfont_alter_companyprofile_body_font_and_more.py ---
```py
# Generated by Django 5.2.1 on 2025-07-17 14:39

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0040_companyprofile_body_font_companyprofile_header_font'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomFont',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name="Название шрифта (для CSS, напр. 'MyCoolFont')")),
                ('font_file_otf', models.FileField(blank=True, null=True, upload_to='custom_fonts/', verbose_name='Файл шрифта .otf')),
                ('font_file_ttf', models.FileField(blank=True, null=True, upload_to='custom_fonts/', verbose_name='Файл шрифта .ttf')),
                ('font_file_woff', models.FileField(blank=True, null=True, upload_to='custom_fonts/', verbose_name='Файл шрифта .woff')),
                ('font_file_woff2', models.FileField(blank=True, null=True, upload_to='custom_fonts/', verbose_name='Файл шрифта .woff2')),
            ],
            options={
                'verbose_name': 'Кастомный шрифт',
                'verbose_name_plural': 'Кастомные шрифты',
            },
        ),
        migrations.AlterField(
            model_name='companyprofile',
            name='body_font',
            field=models.CharField(choices=[('SUNDAY', 'Sunday (встроенный)'), ('FortuneC', 'FortuneC (встроенный)'), ('Montserrat', 'Montserrat (Google)'), ('Roboto', 'Roboto (Google)'), ('Playfair Display', 'Playfair Display (Google)'), ('Lobster', 'Lobster (Google)')], default='FortuneC', max_length=100, verbose_name='Шрифт для основного текста (параграфы)'),
        ),
        migrations.AlterField(
            model_name='companyprofile',
            name='header_font',
            field=models.CharField(choices=[('SUNDAY', 'Sunday (встроенный)'), ('FortuneC', 'FortuneC (встроенный)'), ('Montserrat', 'Montserrat (Google)'), ('Roboto', 'Roboto (Google)'), ('Playfair Display', 'Playfair Display (Google)'), ('Lobster', 'Lobster (Google)')], default='SUNDAY', max_length=100, verbose_name='Шрифт для заголовков (H1, H2 и т.д.)'),
        ),
    ]

```
--- END OF FILE: main\migrations\0041_customfont_alter_companyprofile_body_font_and_more.py ---

--- START OF FILE: main\migrations\0042_alter_customfont_font_file_otf_and_more.py ---
```py
# Generated by Django 5.2.1 on 2025-07-17 16:41

import myproject.storages
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0041_customfont_alter_companyprofile_body_font_and_more'),
    ]

    operations = [
        migrations.AlterField(
            model_name='customfont',
            name='font_file_otf',
            field=models.FileField(blank=True, null=True, storage=myproject.storages.RawMediaCloudinaryStorage(), upload_to='custom_fonts/', verbose_name='Файл шрифта .otf'),
        ),
        migrations.AlterField(
            model_name='customfont',
            name='font_file_ttf',
            field=models.FileField(blank=True, null=True, storage=myproject.storages.RawMediaCloudinaryStorage(), upload_to='custom_fonts/', verbose_name='Файл шрифта .ttf'),
        ),
        migrations.AlterField(
            model_name='customfont',
            name='font_file_woff',
            field=models.FileField(blank=True, null=True, storage=myproject.storages.RawMediaCloudinaryStorage(), upload_to='custom_fonts/', verbose_name='Файл шрифта .woff'),
        ),
        migrations.AlterField(
            model_name='customfont',
            name='font_file_woff2',
            field=models.FileField(blank=True, null=True, storage=myproject.storages.RawMediaCloudinaryStorage(), upload_to='custom_fonts/', verbose_name='Файл шрифта .woff2'),
        ),
    ]

```
--- END OF FILE: main\migrations\0042_alter_customfont_font_file_otf_and_more.py ---

--- START OF FILE: main\migrations\0043_alter_section_section_type_alter_section_title_and_more.py ---
```py
# Generated by Django 5.2.1 on 2025-07-18 14:40

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0042_alter_customfont_font_file_otf_and_more'),
    ]

    operations = [
        migrations.AlterField(
            model_name='section',
            name='section_type',
            field=models.CharField(choices=[('about_us', 'О нас'), ('features', 'Что мы предлагаем (Преимущества)'), ('carousel', 'Карусель'), ('orbibol', 'Орбибол'), ('games', 'Игры'), ('market', 'Маркет'), ('gallery', 'Фото и видео галерея'), ('contacts', 'Контакты')], max_length=50, verbose_name='Тип секции'),
        ),
        migrations.AlterField(
            model_name='section',
            name='title',
            field=models.CharField(blank=True, max_length=200, verbose_name='Заголовок секции'),
        ),
        migrations.AlterUniqueTogether(
            name='section',
            unique_together={('company_profile', 'section_type')},
        ),
    ]

```
--- END OF FILE: main\migrations\0043_alter_section_section_type_alter_section_title_and_more.py ---

--- START OF FILE: main\migrations\0044_alter_section_title.py ---
```py
# Generated by Django 5.2.1 on 2025-07-18 15:21

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0043_alter_section_section_type_alter_section_title_and_more'),
    ]

    operations = [
        migrations.AlterField(
            model_name='section',
            name='title',
            field=models.CharField(blank=True, help_text='Оставьте пустым, чтобы использовать заголовок по умолчанию.', max_length=200, verbose_name='Заголовок секции'),
        ),
    ]

```
--- END OF FILE: main\migrations\0044_alter_section_title.py ---

--- START OF FILE: main\migrations\0045_alter_companyprofile_body_font_and_more.py ---
```py
# Generated by Django 5.2.1 on 2025-07-18 16:23

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0044_alter_section_title'),
    ]

    operations = [
        migrations.AlterField(
            model_name='companyprofile',
            name='body_font',
            field=models.CharField(default='FortuneC', max_length=100, verbose_name='Шрифт для основного текста (параграфы)'),
        ),
        migrations.AlterField(
            model_name='companyprofile',
            name='header_font',
            field=models.CharField(default='SUNDAY', max_length=100, verbose_name='Шрифт для заголовков (H1, H2 и т.д.)'),
        ),
    ]

```
--- END OF FILE: main\migrations\0045_alter_companyprofile_body_font_and_more.py ---

--- START OF FILE: main\migrations\0046_companyprofile_market_button_text_and_more.py ---
```py
# Generated by Django 5.2.1 on 2025-07-18 16:51

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0045_alter_companyprofile_body_font_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='companyprofile',
            name='market_button_text',
            field=models.CharField(blank=True, default='Еще больше товаров в нашем маркете', max_length=100, verbose_name="Текст для ссылки 'Еще больше товаров' (Маркет)"),
        ),
        migrations.AddField(
            model_name='companyprofile',
            name='orbibol_details_button_text',
            field=models.CharField(blank=True, default='Узнать подробнее', max_length=100, verbose_name="Текст для кнопки 'Узнать подробнее' (Орбибол)"),
        ),
    ]

```
--- END OF FILE: main\migrations\0046_companyprofile_market_button_text_and_more.py ---

--- START OF FILE: main\migrations\0047_seosettings.py ---
```py
# Generated by Django 5.2.1 on 2025-07-18 17:16

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0046_companyprofile_market_button_text_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='SEOSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meta_title', models.CharField(blank=True, help_text='Основной заголовок страницы для поисковых систем (до 60 символов).', max_length=200, verbose_name='Meta Title')),
                ('meta_description', models.TextField(blank=True, help_text='Краткое описание страницы для поисковых систем (до 160 символов).', max_length=300, verbose_name='Meta Description')),
                ('meta_keywords', models.CharField(blank=True, help_text='Ключевые слова через запятую. Этот тег почти не используется современными поисковиками, но может быть полезен.', max_length=255, verbose_name='Meta Keywords')),
                ('og_title', models.CharField(blank=True, help_text='Заголовок, который будет виден при репосте ссылки в соцсети.', max_length=200, verbose_name='Open Graph Title')),
                ('og_description', models.TextField(blank=True, help_text='Описание для репоста в соцсети.', max_length=300, verbose_name='Open Graph Description')),
                ('og_image', models.ImageField(blank=True, help_text='Картинка для репоста (рекомендуемый размер 1200x630px).', null=True, upload_to='seo_images/', verbose_name='Open Graph Image')),
                ('json_ld_schema', models.TextField(blank=True, default='{\n  "@context": "https://schema.org",\n  "@type": "SportsClub",\n  "name": "Название Вашего Клуба",\n  "alternateName": "Maybe",\n  "description": "Клуб активного отдыха...",\n  "url": "https://maybe-7u6w.onrender.com/",\n  "logo": "URL вашего логотипа",\n  "address": {\n    "@type": "PostalAddress",\n    "streetAddress": "Ваша улица и дом",\n    "addressLocality": "Ваш город",\n    "postalCode": "Ваш индекс",\n    "addressCountry": "RU"\n  },\n  "contactPoint": {\n    "@type": "ContactPoint",\n    "telephone": "+7-XXX-XXX-XX-XX",\n    "contactType": "customer service"\n  }\n}', help_text='Сюда вставляется код разметки Schema.org в формате JSON-LD. Например, для организации или мероприятия.', verbose_name='Структурированные данные (JSON-LD)')),
                ('company_profile', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='seo_settings', to='main.companyprofile', verbose_name='Профиль компании')),
            ],
            options={
                'verbose_name': '2. Настройки SEO',
                'verbose_name_plural': '2. Настройки SEO',
            },
        ),
    ]

```
--- END OF FILE: main\migrations\0047_seosettings.py ---

--- START OF FILE: main\migrations\0048_companyprofile_mobile_menu_indicator_icon.py ---
```py
# Generated by Django 5.2.1 on 2025-07-18 19:12

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0047_seosettings'),
    ]

    operations = [
        migrations.AddField(
            model_name='companyprofile',
            name='mobile_menu_indicator_icon',
            field=models.FileField(blank=True, null=True, upload_to='site_assets/', verbose_name='Иконка-индикатор для моб. меню (стрелка вниз)'),
        ),
    ]

```
--- END OF FILE: main\migrations\0048_companyprofile_mobile_menu_indicator_icon.py ---

--- START OF FILE: main\migrations\0049_product_button_text.py ---
```py
# Generated by Django 5.2.1 on 2025-07-18 19:53

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0048_companyprofile_mobile_menu_indicator_icon'),
    ]

    operations = [
        migrations.AddField(
            model_name='product',
            name='button_text',
            field=models.CharField(default='Заказать игру', max_length=100, verbose_name='Текст кнопки'),
        ),
    ]

```
--- END OF FILE: main\migrations\0049_product_button_text.py ---

--- START OF FILE: main\migrations\0050_companyprofile_section_vertical_padding.py ---
```py
# Generated by Django 5.2.1 on 2025-07-23 11:17

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0049_product_button_text'),
    ]

    operations = [
        migrations.AddField(
            model_name='companyprofile',
            name='section_vertical_padding',
            field=models.PositiveIntegerField(default=5, help_text="Укажите число. Значение будет использовано в 'rem' (например, 5 = 5rem). 1rem ~ 16px.", verbose_name='Вертикальный отступ секций (верх/низ)'),
        ),
    ]

```
--- END OF FILE: main\migrations\0050_companyprofile_section_vertical_padding.py ---

--- START OF FILE: main\migrations\__init__.py ---
```py

```
--- END OF FILE: main\migrations\__init__.py ---

--- START OF FILE: main\static\main\css\base.css ---
```css
@font-face {
    font-family: 'SUNDAY';
    src: url('../fonts/Sunday-Regular.otf') format('opentype'),
         url('../fonts/Sunday-Regular.ttf') format('truetype');
    font-weight: normal;
    font-style: normal;
    font-display: swap;
}
@font-face {
    font-family: 'FortuneC';
    src: url('../fonts/fortunec_italic.otf') format('opentype'); 
    font-weight: normal;
    font-style: italic;
    font-display: swap;
}
@font-face {
    font-family: 'FortuneC';
    src: url('../fonts/fortunec_bold.otf') format('opentype');
    font-weight: bold;
    font-style: normal;
    font-display: swap;
}
@font-face {
    font-family: 'FortuneC';
    src: url('../fonts/fortunec_bolditalic.otf') format('opentype');
    font-weight: bold;
    font-style: italic;
    font-display: swap;
}

:root {
    --color-white: #FFFFFF;         
    --color-green-accent: #44A56B;   
    --color-green-bg: #1E5C37;      
    --color-green-dark-bg: #14301F; 
    --color-black-bg: #010101;      
    --color-pink-accent: #D90C6B;
    --color-green-accent-rgb: 68, 165, 107;
    --fs-main-slogan: 3.125rem;      
    --fs-about-text: 1.9375rem;       
    --fs-section-title: 2.8125rem;    
    --fs-subsection-title: 1.9375rem; 
    --fs-body: 1.3125rem;             
    --fs-button: 1.3125rem;           
    
    --header-padding-normal: 0.8rem;
    --logo-height-normal: 45px;
    --nav-font-size-normal: 1.2rem; 
    
    --header-padding-hover: 1.2rem;   
    --logo-height-hover: 80px;        
    --nav-font-size-hover: 1.3125rem; 

    --header-transition-duration: 0.4s; 
}

*, *::before, *::after { box-sizing: border-box; margin: 0; padding: 0; }
html { font-size: 16px; scroll-behavior: smooth; }
body {
    font-family: var(--font-body);
    font-size: var(--fs-body);
    font-weight: normal; 
    line-height: 1.6;
    color: var(--color-white);
    background-color: var(--color-black-bg);
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}
main {
    padding-top: 120px;
    position: relative; 
    z-index: 1;
    background-color: transparent; 
}
h1, h2, h3, h4, h5, h6 {
    font-family: var(--font-headers);
    font-weight: normal;
    line-height: 1.2;
    color: var(--color-white);
}
h2 {
    font-size: var(--fs-section-title);
    text-transform: uppercase;
    text-align: center;
    margin-bottom: 4rem;
}
a {
    color: inherit;
    text-decoration: none;
}
img, video {
    max-width: 100%;
    height: auto;
    display: block;
}
ul {
    list-style: none;
}
.container {
    width: 100%;
    max-width: 1600px; 
    margin-left: auto;
    margin-right: auto;
    padding-left: 25px;
    padding-right: 25px;
    box-sizing: border-box;
}

#animated-background-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -10; 
    overflow: hidden; 
    pointer-events: none; 
}
#background-pattern {
    position: absolute;
    top: -10%;
    left: -10%;
    width: 120%;
    height: 120%;
    background-repeat: repeat;
    z-index: -2; 
}
.background-object {
    position: absolute;
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center;
}

@keyframes floatAnimation {
    0% { transform: translateY(0px) rotate(0deg); }
    25% { transform: translateY(-20px) rotate(5deg); }
    50% { transform: translateY(0px) rotate(0deg); }
    75% { transform: translateY(20px) rotate(-5deg); }
    100% { transform: translateY(0px) rotate(0deg); }
}

#site-header { 
    padding: var(--header-padding-hover) 0;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    z-index: 1000;
    background-color: transparent;
    transition: padding 0.4s ease-in-out, background-color 0.4s ease-in-out;
}

#site-header.header-active {
    background-color: var(--color-black-bg);
}

.header-container {
    display: flex;
    align-items: center;
    justify-content: space-between;
    position: relative;
}

#site-header .logo img { 
    height: var(--logo-height-hover);
    transition: height var(--header-transition-duration) ease-in-out; 
}
.main-nav {
    flex-grow: 1; 
    padding: 0 4rem;
}
#site-header .main-nav ul { 
    display: flex;
    flex-wrap: wrap;
    justify-content: flex-start;
    gap: 0.5rem 3rem; 
    padding: 0;
    transition: opacity var(--header-transition-duration) ease;
}
#site-header .main-nav a {
    font-family: var(--font-body); 
    font-size: var(--nav-font-size-hover);
    font-weight: normal; 
    color: var(--color-white); 
    padding: 0;
    transition: color 0.3s ease;
}
#site-header .main-nav a:hover {
    color: var(--color-green-accent);
}

.header-center-text {
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
    font-family: var(--font-body);
    font-size: var(--nav-font-size-normal);
    opacity: 0;
    pointer-events: none;
    transition: opacity var(--header-transition-duration) ease;
}

#site-header.header-collapsed {
    padding: var(--header-padding-normal) 0;
}
#site-header.header-collapsed .logo img {
    height: var(--logo-height-normal);
}
#site-header.header-collapsed .main-nav ul {
    opacity: 0;
    pointer-events: none;
}
#site-header.header-collapsed .header-center-text {
    opacity: 1;
    pointer-events: all;
}

.btn {
    display: inline-block;
    padding: 0.8em 1.8em;
    background-color: var(--color-pink-accent); 
    color: var(--color-white);
    font-family: var(--font-body);
    font-size: var(--fs-button);
    font-weight: bold; 
    text-align: center;
    border: 2px solid var(--color-pink-accent);
    border-radius: 5px;
    text-transform: uppercase; 
    transition: background-color 0.3s ease, color 0.3s ease, transform 0.2s ease;
    cursor: pointer;
    letter-spacing: 0.05em;
}
.btn:hover, .btn:focus {
    background-color: var(--color-white);
    color: var(--color-pink-accent);
    border-color: var(--color-pink-accent);
    transform: translateY(-2px);
    outline: none;
}

main section { 
    padding-top: var(--section-vertical-padding); 
    padding-bottom: var(--section-vertical-padding); 
    position: relative; 
    background-color: transparent; 
    scroll-margin-top: 90px;
}

#site-footer-bottom {
    padding: 2rem 0;
    text-align: center;
    font-size: 0.9rem;
    background-color: var(--color-green-dark-bg); 
    color: rgba(255,255,255,0.7);
    position: relative; 
    z-index: 10;
}

.section-error {
    min-height: 80vh; 
    padding-top: 12rem; 
    padding-bottom: 5rem;
    display: flex;
    flex-direction: column; 
    justify-content: center; 
    align-items: center; 
    text-align: center;
    background-color: transparent; 
    position: relative; 
}
.error-code {
    font-family: var(--font-headers);
    font-size: 10rem;
    color: var(--color-pink-accent);
    line-height: 1;
    margin-bottom: 1rem;
}
.error-title {
    font-family: var(--font-headers);
    font-size: var(--fs-section-title);
    text-transform: uppercase;
    color: var(--color-white);
    margin-bottom: 2rem;
}
.error-description {
    font-family: var(--font-body);
    font-size: var(--fs-body);
    color: var(--color-white);
    line-height: 1.7;
    max-width: 60ch;
    margin: 0 auto 3rem auto;
}

.text-center { 
    text-align: center;
}

.mobile-nav-toggle,
.mobile-nav-dropdown,
.mobile-menu-indicator {
    display: none;
}

@media (max-width: 992px) {
    main {
        padding-top: 70px;
    }
    
    /* --- ИЗМЕНЕНИЕ ЗДЕСЬ: УБИРАЕМ ФОНОВЫЕ ОБЪЕКТЫ --- */
    .background-object {
        display: none !important;
    }
    /* --- КОНЕЦ ИЗМЕНЕНИЯ --- */
    
    #site-header .container {
        padding-left: 15px;
        padding-right: 15px;
    }

    #site-header {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        z-index: 1000;
        background-color: var(--color-black-bg) !important;
        padding: 0 !important;
    }
    
    #site-header.header-collapsed,
    #site-header.header-active {
        padding: 0 !important;
    }

    .header-container {
        display: flex;
        align-items: center;
        justify-content: space-between;
        width: 100%;
        height: 70px;
    }

    #site-header .logo img {
        height: 40px !important;
        transition: none;
    }

    .header-center-text {
        display: block;
        position: static;
        transform: none;
        opacity: 1;
        pointer-events: all;
        text-align: center;
        flex-grow: 1;
        padding: 0 10px;
    }

    .mobile-nav-toggle {
        display: flex;
        align-items: center;
        justify-content: center;
        position: static;
        transform: none;
        background: transparent;
        border: none;
        cursor: pointer;
        z-index: 1002;
        padding: 10px;
        width: 50px;
        height: 50px;
    }
    .mobile-nav-toggle span { 
        display: block; 
        width: 30px; 
        height: 3px; 
        background-color: var(--color-white); 
        margin: 6px 0; 
        transition: all 0.3s ease-in-out; 
    }
    
    body.mobile-menu-open .mobile-nav-toggle span:nth-child(1) { transform: rotate(45deg) translate(7px, 7px); }
    body.mobile-menu-open .mobile-nav-toggle span:nth-child(2) { opacity: 0; }
    body.mobile-menu-open .mobile-nav-toggle span:nth-child(3) { transform: rotate(-45deg) translate(8px, -8px); }

    
    .mobile-nav-dropdown {
        display: block;
        width: 100%;
        background-color: var(--color-black-bg);
        border-top: 1px solid rgba(var(--color-green-accent-rgb), 0.3);
        max-height: 0;
        overflow: hidden;
        transition: max-height 0.4s ease-in-out, padding 0.4s ease-in-out;
        padding: 0;
    }
    .mobile-nav-dropdown ul {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 0;
        width: 100%;
        padding: 0;
    }
    .mobile-nav-dropdown li { width: 100%; text-align: center; }
    .mobile-nav-dropdown a { display: block; padding: 12px 0; font-size: 1.3rem; }

    #site-header.mobile-menu-open .mobile-nav-dropdown {
        max-height: 80vh;
        padding: 10px 0;
    }
    
    .main-nav { 
        display: none; 
    }
}

@media (max-width: 768px) {
    html {
        font-size: 13px;
    }

    .error-code { font-size: 5rem; } 
    .error-title { font-size: 1.8rem; } 

    :root {
        --fs-main-slogan: 1.8rem;
        --fs-about-text: 1.2rem;
        --fs-section-title: 1.5rem;
        --fs-subsection-title: 1.2rem;
        --fs-body: 0.95rem;
        --fs-button: 0.95rem;
    }

    main section {
        padding-top: calc(var(--section-vertical-padding) * 0.5);
        padding-bottom: calc(var(--section-vertical-padding) * 0.5);
    }
    h2 {
        margin-bottom: 2rem;
    }
}
```
--- END OF FILE: main\static\main\css\base.css ---

--- START OF FILE: main\static\main\css\sections\about_us.css ---
```css
.section-about-us {
    min-height: 80vh; 
    padding-top: 9rem; 
    padding-bottom: 5rem;
    display: flex;
    flex-direction: column; 
    justify-content: center; 
    align-items: flex-start; 
    text-align: left;
}
.section-about-us .container {
    width: 100%; 
}
.about-us-content {
    max-width: 65ch; 
    margin: 0; 
}
.about-us-social-icons {
    display: flex;
    justify-content: flex-start;
    gap: 1.5rem;
    margin-bottom: 2rem;
}
.about-us-social-icons img {
    height: 40px;
    width: 40px;
    opacity: 0.8;
    transition: opacity 0.3s ease-in-out;
}
.about-us-social-icons a:hover img {
    opacity: 1;
}
.section-about-us .slogan {
    font-family: var(--font-headers); 
    font-size: var(--fs-main-slogan); 
    color: var(--color-green-accent); 
    font-weight: normal; 
    text-transform: uppercase; 
    margin-bottom: 2rem; 
    line-height: 1.2;
}
.section-about-us .about-us-text { 
    font-family: var(--font-body);
    font-size: var(--fs-about-text); 
    font-weight: normal; 
    color: var(--color-white); 
    line-height: 1.7;
    text-align: left; 
    margin: 0;
}
.section-about-us .about-us-text p { margin-bottom: 1em; }
.section-about-us .about-us-text p:last-child { margin-bottom: 0; }

@media (max-width: 768px) {
    .section-about-us {
        min-height: auto;
        align-items: flex-start;
        text-align: left;
        padding-top: 4rem;
        padding-bottom: var(--section-vertical-padding);
        justify-content: flex-start;
    }
    .about-us-content {
        padding: 0;
    }
    .about-us-social-icons {
        justify-content: flex-start;
        gap: 1.5rem;
    }
    .section-about-us .about-us-text {
        text-align: left;
    }
}
```
--- END OF FILE: main\static\main\css\sections\about_us.css ---

--- START OF FILE: main\static\main\css\sections\carousel.css ---
```css
/* main/static/main/css/sections/carousel.css */

.section-carousel h2 {
    text-align: center;
    margin-bottom: 2rem;
}
.carousel-wrapper {
    position: relative;
    max-width: 1200px;
    margin: 0 auto;
    padding-bottom: 40px;
}
.simple-carousel {
    width: 100%;
    height: 450px;
    padding: 20px 0;
}

.swiper-slide {
    display: flex;
    justify-content: center;
    align-items: center;
}

.circular-slide {
    width: 400px;
    height: 400px;
    border-radius: 50%;
    position: relative;
    overflow: hidden;
    background-size: cover;
    background-position: center;
    background-color: #111; /* <-- ИЗМЕНЕНИЕ ЗДЕСЬ (добавлена заглушка) */
    border: 3px solid var(--color-green-accent);
    
    transition: transform 0.6s ease, opacity 0.6s ease, border-color 0.3s ease;
    
    transform: scale(0.5);
    opacity: 0.6;
}

.swiper-slide-active .circular-slide {
    transform: scale(1);
    opacity: 1;
    border-color: var(--color-green-accent);
}

.swiper-slide-active {
    z-index: 10;
}

.circular-slide:hover {
    border-color: var(--color-green-accent) !important;
}

.always-visible-content {
    position: absolute; width: 100%; height: 100%;
    display: flex; flex-direction: column; justify-content: center; align-items: center;
    padding: 1rem; box-sizing: border-box; text-align: center; color: white;
    transition: opacity 0.3s ease; opacity: 1;
}
.always-visible-content h3, .always-visible-content p {
    text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.8);
}
.always-visible-content h3 { font-family: var(--font-headers); font-size: 2rem; margin: 0; }
.always-visible-content p { font-family: var(--font-body); font-size: 1rem; margin: 0.25rem 0 0 0; }

.hover-overlay {
    position: absolute; top: 0; left: 0; width: 100%; height: 100%;
    display: flex; justify-content: center; align-items: center;
    padding: 2rem; box-sizing: border-box; text-align: center;
    color: white; background-color: rgba(0, 0, 0, 0.7);
    transition: opacity 0.3s ease; opacity: 0;
}
.hover-overlay p { font-size: 1.1rem; line-height: 1.5; }

.circular-slide:hover .always-visible-content { opacity: 0; }
.circular-slide:hover .hover-overlay { opacity: 1; }

.swiper-button-prev, .swiper-button-next {
    color: var(--color-green-accent);
    --swiper-navigation-size: 2.2rem;
}

.swiper-pagination {
    bottom: 0 !important;
}
.swiper-pagination-bullet {
    background-color: #fff;
    opacity: 0.7;
}
.swiper-pagination-bullet-active {
    background-color: var(--color-green-accent);
    opacity: 1;
}

@media (max-width: 768px) {
    .simple-carousel {
        height: 320px;
    }
    .circular-slide {
        width: 300px;
        height: 300px;
    }
    .always-visible-content h3 {
        font-size: 1.5rem;
    }
    .hover-overlay p {
        font-size: 1rem;
    }
    .swiper-button-prev, .swiper-button-next {
        display: none;
    }
}
```
--- END OF FILE: main\static\main\css\sections\carousel.css ---

--- START OF FILE: main\static\main\css\sections\contacts.css ---
```css


.section-contacts p { 
    margin-bottom: 1.5rem; 
}


.section-contacts p a { 
    color: var(--color-green-accent); 
    text-decoration: underline; 
}

.section-contacts p a:hover { 
    text-decoration: none; 
}

.social-icons-footer {
    display: flex;
    justify-content: center;
    gap: 1.5rem;
    margin-top: 2rem;
}

.social-icons-footer a {
    text-decoration: none;
}
.social-icons-footer img {
    height: 30px;
    width: 30px;
    opacity: 0.7;
    transition: opacity 0.3s ease;
}
.social-icons-footer a:hover img {
    opacity: 1;
}

@media (max-width: 768px) {
    .section-contacts p {
        font-size: 1.1rem;
        margin-bottom: 1.5rem;
    }
}
```
--- END OF FILE: main\static\main\css\sections\contacts.css ---

--- START OF FILE: main\static\main\css\sections\features.css ---
```css
/* --- СТИЛИ ДЛЯ ДЕСКТОПА (ОСТАЮТСЯ БЕЗ ИЗМЕНЕНИЙ) --- */
.section-features h2 {
    margin-bottom: 5rem;
}

.features-grid { 
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 3.5rem 5rem;
}

.feature-item {
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: 2rem;
    text-align: left;
    max-width: 500px;
}

.feature-item .feature-icon-wrapper {
    flex-shrink: 0;
    width: 160px;
    height: 160px;
    background-color: transparent;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    border: 3px solid var(--color-green-accent);
    overflow: hidden;
}

.feature-item .feature-icon-wrapper img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.feature-item .feature-text-content h3 {
    font-family: var(--font-headers);
    font-size: var(--fs-subsection-title);
    font-weight: normal;
    color: var(--color-green-accent);
    margin-bottom: 0.75rem;
    text-transform: uppercase;
}

.feature-item .feature-text-content p {
    font-size: 1rem;
    line-height: 1.5;
    color: var(--color-white);
}


/* --- ФИНАЛЬНАЯ, РАБОЧАЯ ВЕРСИЯ ДЛЯ МОБИЛЬНЫХ --- */
@media (max-width: 992px) {
    .features-grid {
        display: grid;
        grid-template-columns: 1fr 1fr; /* <-- Жестко 2 столбца */
        gap: 2.5rem 1.5rem;
    }
    
    .feature-item {
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
        gap: 1rem;
        max-width: 100%;
    }

    .feature-item .feature-icon-wrapper {
        width: 130px;
        height: 130px;
    }
    
    .feature-item .feature-icon-wrapper img {
        opacity: 1; /* <-- УБРАЛ ЗАТЕМНЕНИЕ */
    }

    .feature-item .feature-text-content h3 {
        color: var(--color-green-accent);
        font-size: 1rem; /* <-- УМЕНЬШИЛ ШРИФТ ЗАГОЛОВКА */
        margin-bottom: 0.5rem;
    }

    .feature-item .feature-text-content p {
        font-size: 0.8rem;
    }
}

@media (max-width: 576px) {
    .features-grid {
        grid-template-columns: 1fr;
    }
}
```
--- END OF FILE: main\static\main\css\sections\features.css ---

--- START OF FILE: main\static\main\css\sections\gallery.css ---
```css
.gallery-section .gallery-title {
    text-align: center;
}

.gallery-section .gallery-main-description {
    text-align: center;
    max-width: 65ch;
    margin: 0 auto 3rem auto;
    font-size: 1.25rem;
    line-height: 1.7;
}

.bubble-container {
    position: relative;
    width: 100%;
    padding: 1rem;
    box-sizing: border-box;
    margin-bottom: 3rem;
    transition: height 0.5s ease-in-out;
}

.gallery-card {
    position: absolute;
    border-radius: 50%;
    cursor: default;
    transform: scale(0);
    opacity: 0;
    transition: transform 0.8s cubic-bezier(0.175, 0.885, 0.32, 1.275), 
                opacity 0.6s ease, 
                left 0.8s ease, 
                top 0.8s ease;
}

.gallery-card.is-visible {
    transform: scale(1);
    opacity: 1;
}

.gallery-media-circle {
    width: 100%;
    height: 100%;
    border-radius: 50%;
    overflow: hidden;
    border: 3px solid var(--color-green-accent);
    background-color: #111;
}

.gallery-media-circle img,
.gallery-media-circle video {
    width: 100%;
    height: 100%;
    object-fit: cover;
    opacity: 0.85;
}
```
--- END OF FILE: main\static\main\css\sections\gallery.css ---

--- START OF FILE: main\static\main\css\sections\games.css ---
```css
.games-grid { 
    display: grid;
    grid-template-columns: repeat(2, auto);
    gap: 3.5rem 5rem;
    justify-content: center;
}

.game-type-item {
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: 2rem;
    text-align: left;
    color: var(--color-white);
}

.game-type-item .game-type-icon-wrapper {
    flex-shrink: 0;
    width: 160px;
    height: 160px;
    background-color: transparent;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    border: 3px solid var(--color-green-accent);
}

.game-type-item .game-type-icon-wrapper img {
    width: 100%;
    height: 100%;
    object-fit: contain;
}

.game-type-item .game-type-text-content h3 {
    font-family: var(--font-headers);
    font-size: var(--fs-subsection-title);
    font-weight: normal;
    color: var(--color-green-accent);
    margin-bottom: 0.75rem;
    text-transform: uppercase;
}

.game-type-item .game-type-text-content p {
    font-size: 1rem;
    line-height: 1.5;
    color: var(--color-white);
}

@media (max-width: 992px) {
    .games-grid {
        grid-template-columns: repeat(2, 1fr);
        gap: 3rem 1.5rem;
    }
    
    .game-type-item {
        display: grid;
        grid-template-columns: auto 1fr;
        gap: 0 1rem;
        align-items: center;
        min-width: 0;
    }

    .game-type-item .game-type-icon-wrapper {
        width: 60px;
        height: 60px;
        grid-row: 1;
        grid-column: 1;
    }

    .game-type-item .game-type-text-content {
        display: contents;
    }

    .game-type-item .game-type-text-content h3 {
        grid-column: 2;
        margin: 0;
        font-size: clamp(0.85rem, 3.5vw, 1.1rem);
        overflow-wrap: break-word;
        min-width: 0;
    }

    .game-type-item .game-type-text-content p {
        grid-column: 1 / -1;
        margin-top: 0.75rem;
        text-align: left;
        font-size: clamp(0.8rem, 2.5vw, 0.9rem);
        overflow-wrap: break-word;
        min-width: 0;
    }
}
```
--- END OF FILE: main\static\main\css\sections\games.css ---

--- START OF FILE: main\static\main\css\sections\market.css ---
```css
#market-section h2 {
    margin-bottom: 5rem;
}

.market-grid {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 3rem 4rem;
    margin-bottom: 2rem;
}

.product-card {
    text-align: center;
    color: var(--color-white);
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    width: 400px;
    transition: transform 0.3s ease; /* Эта строка уже была, она правильная */
}

/* --- ВОТ ИЗМЕНЕНИЕ, КОТОРОЕ ВСЕ ИСПРАВИТ --- */
.product-card:hover {
    transform: scale(1.05); /* Увеличиваем карточку на 5% при наведении */
}
/* --- КОНЕЦ ИЗМЕНЕНИЯ --- */


.product-content {
    /* Этот блок содержит все, кроме кнопки */
}

.product-image-wrapper {
    width: 400px;
    height: 400px;
    border-radius: 50%;
    overflow: hidden;
    margin: 0 auto 1.5rem auto;
    border: 3px solid var(--color-green-accent);
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
}
.product-image-wrapper img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}
.product-title-bottom {
    font-family: var(--font-body);
    font-weight: bold;
    font-size: 1.5rem;
    margin-bottom: 0.5rem;
}
.product-price {
    font-family: var(--font-headers);
    font-size: 3.3125rem;
    color: var(--color-green-accent);
    margin-bottom: 1rem;
}
.product-description {
    font-size: 1.1rem;
    line-height: 1.5;
    max-width: 35ch;
    margin: 0 auto 1rem auto;
}
.product-button-wrapper {
    padding-top: 1rem;
}

.market-product-link {
    display: inline-block;
    color: var(--color-green-accent);
    font-family: var(--font-headers);
    font-size: 1.25rem;
    text-transform: uppercase;
    text-decoration: underline;
    letter-spacing: 0.05em;
    transition: color 0.3s ease;
}
.market-product-link:hover {
    color: var(--color-white);
    text-decoration: none;
}
.market-more-link {
    display: block;
    text-align: center;
    font-family: var(--font-headers);
    font-size: 1.25rem;
    color: var(--color-green-accent);
    text-decoration: underline;
    transition: color 0.3s ease;
    margin-top: 2rem; 
}
.market-more-link:hover {
    color: var(--color-white);
    text-decoration: none;
}

@media (max-width: 768px) {
    .market-grid {
        gap: 4rem;
    }
    
    .product-image-wrapper {
        width: 300px;
        height: 300px;
    }
    .product-card {
        width: 300px;
    }

    .product-price {
        font-size: 2.8rem;
    }
    .product-title-bottom {
        font-size: 1.4rem;
    }
}
```
--- END OF FILE: main\static\main\css\sections\market.css ---

--- START OF FILE: main\static\main\css\sections\orbibol.css ---
```css
#orbibol-section .container {
    max-width: 1200px; 
}

.orbibol-general-info { 
    text-align: center;
    max-width: 75ch;
    margin: 0 auto 5rem auto;
    font-size: 1.25rem;
    line-height: 1.7;
}

.orbibol-content-wrapper {
    display: flex;
    flex-direction: column;
    gap: 5rem;
    margin-bottom: 5rem; 
}

.orbibol-item {
    display: flex;
    align-items: center;
    gap: 4rem;
    text-align: left;
}

.orbibol-icon-wrapper {
    flex-shrink: 0;
    width: 300px;
    height: 300px;
    border-radius: 50%;
    background-color: rgba(var(--color-green-accent-rgb), 0.05);
    border: 3px solid var(--color-green-accent);
    overflow: hidden;
}

.orbibol-icon-wrapper img {
    width: 100%;
    height: 100%;
    object-fit: cover; /* <-- ИЗМЕНЕНИЕ ЗДЕСЬ */
}

.orbibol-text-content {
    flex-grow: 1;
}

.orbibol-text-content h3 {
    font-family: var(--font-headers);
    font-size: var(--fs-subsection-title);
    color: var(--color-green-accent);
    text-transform: uppercase;
    margin-bottom: 1.5rem;
}

.orbibol-text-content p {
    font-size: var(--fs-body);
    line-height: 1.6;
}

.orbibol-details-link {
    display: inline-block;
    color: var(--color-green-accent);
    font-family: var(--font-headers);
    font-size: 1.25rem;
    text-transform: uppercase;
    text-decoration: underline;
    letter-spacing: 0.05em;
    transition: color 0.3s ease;
}

.orbibol-details-link:hover {
    color: var(--color-white);
    text-decoration: none;
}

@media (max-width: 768px) {
    .orbibol-item {
        flex-direction: column;
        text-align: center;
        gap: 2rem;
    }
    
    .orbibol-icon-wrapper {
        width: 220px;
        height: 220px;
    }
}
```
--- END OF FILE: main\static\main\css\sections\orbibol.css ---

--- START OF FILE: main\static\main\css\style.css ---
```css
/* Глобальные стили */
@import url('base.css');

/* Стили для секций */
@import url('sections/about_us.css');
@import url('sections/features.css');
@import url('sections/carousel.css');
@import url('sections/orbibol.css');
@import url('sections/games.css');
@import url('sections/market.css');
@import url('sections/gallery.css');
@import url('sections/contacts.css');
```
--- END OF FILE: main\static\main\css\style.css ---

--- START OF FILE: main\static\main\js\global\background.js ---
```js
export function setupDynamicBackground() {
    const body = document.body;
    const settings = body.dataset;
    if (settings.backgroundEnabled !== 'true') return;

    const bgContainer = document.getElementById('animated-background-container');
    if (!bgContainer) return;

    const patternEl = document.getElementById('background-pattern');
    if (patternEl) {
        body.style.backgroundColor = settings.bgColor;
        if (settings.patternUrl) {
            patternEl.style.backgroundImage = `url('${settings.patternUrl}')`;
            patternEl.style.backgroundSize = settings.patternSize;
            patternEl.style.opacity = settings.patternOpacity;
        }
    }
    
    const objectPlaceholders = document.querySelectorAll('.background-object-placeholder');
    const parallaxObjects = [];

    objectPlaceholders.forEach(placeholder => {
        const data = placeholder.dataset;
        const objDiv = document.createElement('div');
        objDiv.className = 'background-object';
        
        objDiv.style.backgroundImage = `url('${data.imageUrl}')`;
        objDiv.style.width = `${data.width}px`;
        objDiv.style.height = `${data.width}px`;
        objDiv.style.top = data.top;
        objDiv.style.left = data.left;
        objDiv.style.zIndex = data.zIndex;
        objDiv.style.opacity = data.opacity;
        
        if (data.parallaxTargetId) {
            objDiv.style.position = 'absolute';
            parallaxObjects.push({
                element: objDiv,
                speed: parseFloat(data.parallaxSpeed) || 0,
                initialTop: parseFloat(data.top)
            });
        } else {
            objDiv.style.position = 'fixed';
            const animDuration = parseInt(data.animDuration, 10);
            if (animDuration > 0) {
                objDiv.style.animation = `floatAnimation ${animDuration}s ease-in-out ${data.animDelay || 0}s infinite`;
            }
        }

        bgContainer.appendChild(objDiv);
        placeholder.remove();
    });

    if (parallaxObjects.length > 0) {
        function handleParallax() {
            const scrollY = window.scrollY;
            parallaxObjects.forEach(obj => {
                const translateY = obj.initialTop + (-scrollY * obj.speed / 10);
                obj.element.style.transform = `translate(-50%, ${translateY}%)`;
            });
        }
        window.addEventListener('scroll', handleParallax, { passive: true });
        handleParallax(); 
    }
}
```
--- END OF FILE: main\static\main\js\global\background.js ---

--- START OF FILE: main\static\main\js\global\header.js ---
```js
export function setupHeader() {
    const siteHeader = document.getElementById('site-header');
    const toggleButton = document.getElementById('mobile-nav-toggle');
    const mobileDropdown = document.getElementById('mobile-nav-dropdown');
    const desktopNav = document.querySelector('.main-nav');

    if (!siteHeader || !toggleButton || !mobileDropdown || !desktopNav) return;

   
    mobileDropdown.innerHTML = desktopNav.innerHTML;
    
    const scrollThreshold = 100;
    const activeThreshold = 10;
    const isMobile = () => window.innerWidth <= 992;

    function updateHeaderState() {
        if (isMobile()) {
            siteHeader.classList.remove('header-active', 'header-collapsed', 'mouse-over');
            return;
        }
        const scrollY = window.scrollY;
        const isCollapsed = scrollY > scrollThreshold;
        const isActive = scrollY > activeThreshold;
        siteHeader.classList.toggle('header-active', isActive || siteHeader.classList.contains('mouse-over'));
        siteHeader.classList.toggle('header-collapsed', isCollapsed && !siteHeader.classList.contains('mouse-over'));
    }

    toggleButton.addEventListener('click', (event) => {
        event.stopPropagation();
        siteHeader.classList.toggle('mobile-menu-open');
        document.body.classList.toggle('mobile-menu-open');
    });

    const closeMobileMenu = () => {
        siteHeader.classList.remove('mobile-menu-open');
        document.body.classList.remove('mobile-menu-open');
    };

    mobileDropdown.querySelectorAll('a').forEach(link => {
        link.addEventListener('click', closeMobileMenu);
    });

    document.addEventListener('click', (event) => {
        if (isMobile() && siteHeader.classList.contains('mobile-menu-open')) {
            if (!siteHeader.contains(event.target)) {
                closeMobileMenu();
            }
        }
    });

    siteHeader.addEventListener('mouseenter', () => {
        if (!isMobile()) {
            siteHeader.classList.add('mouse-over');
            updateHeaderState();
        }
    });

    siteHeader.addEventListener('mouseleave', () => {
        if (!isMobile()) {
            siteHeader.classList.remove('mouse-over');
            updateHeaderState();
        }
    });

    window.addEventListener('scroll', updateHeaderState, { passive: true });
    window.addEventListener('resize', () => {
        if (!isMobile()) {
            closeMobileMenu();
        }
        updateHeaderState();
    });
    
    updateHeaderState();
}
```
--- END OF FILE: main\static\main\js\global\header.js ---

--- START OF FILE: main\static\main\js\main.js ---
```js
import { setupHeader } from './global/header.js';
import { setupDynamicBackground } from './global/background.js';
import { setupSimpleCarousel } from './sections/carousel.js'; 
import { initBubbleGallery } from './sections/gallery.js';
// import { setupFeaturesCarousel } from './sections/features.js'; // <-- УДАЛЯЕМ ЭТУ СТРОКУ

document.addEventListener('DOMContentLoaded', function() {
    setupHeader();
    setupDynamicBackground();

    if (document.querySelector('.simple-carousel')) {
        setupSimpleCarousel();
    }
    
    if (document.querySelector('.bubble-container')) {
        initBubbleGallery();
    }

    /*
    // И УДАЛЯЕМ ЭТОТ БЛОК
    if (document.querySelector('.features-carousel')) {
        setupFeaturesCarousel();
    }
    */
});
```
--- END OF FILE: main\static\main\js\main.js ---

--- START OF FILE: main\static\main\js\sections\carousel.js ---
```js
export function setupSimpleCarousel() {
    const carouselEl = document.querySelector('.simple-carousel');
    if (!carouselEl) return;

    const swiper = new Swiper(carouselEl, {
        loop: true,
        centeredSlides: true,
        grabCursor: true,
        speed: 800, // Чуть медленнее для плавности
        spaceBetween: 0,
        
        // --- ИЗМЕНЕНИЕ 1: Добавляем пагинацию ---
        pagination: {
            el: '.swiper-pagination',
            clickable: true,
        },
        
        navigation: {
            nextEl: '.carousel-wrapper .swiper-button-next',
            prevEl: '.carousel-wrapper .swiper-button-prev',
        },
        
        breakpoints: {
            320: {
              slidesPerView: 1,
              spaceBetween: 0
            },
            768: {
              slidesPerView: 2,
              spaceBetween: 0
            },
            1024: {
              slidesPerView: 3,
              spaceBetween: 0
            }
        }
    });

    // --- ИЗМЕНЕНИЕ 2: Логика "подсказки" при скролле ---
    // Создаем "наблюдателя", который следит за появлением карусели на экране
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            // Если карусель появилась в видимой области
            if (entry.isIntersecting) {
                // Ждем полсекунды и плавно листаем на следующий слайд
                setTimeout(() => {
                    swiper.slideNext();
                }, 500);

                // После этого отключаем наблюдателя, чтобы это сработало только один раз
                observer.disconnect();
            }
        });
    }, {
        threshold: 0.5 // Сработает, когда хотя бы 50% карусели видно
    });

    // Начинаем наблюдать за элементом карусели
    observer.observe(carouselEl);
}
```
--- END OF FILE: main\static\main\js\sections\carousel.js ---

--- START OF FILE: main\static\main\js\sections\gallery.js ---
```js
// main/static/main/js/sections/gallery.js

function getRandom(min, max) {
    return Math.random() * (max - min) + min;
}

export function initBubbleGallery() {
    const container = document.querySelector('.bubble-container');
    if (!container) return;

    // --- ИЗМЕНЕНИЕ 1: Создаем "наблюдателя" ---
    // Он будет следить за контейнером галереи
    const observer = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
            // Если контейнер стал виден на экране...
            if (entry.isIntersecting) {
                
                // --- ИЗМЕНЕНИЕ 2: Всю логику анимации переносим сюда ---
                // Этот код теперь выполнится только один раз при появлении
                const bubbleCount = parseInt(container.dataset.bubbleCount || '0', 10);
                const bubbles = Array.from(container.querySelectorAll('.gallery-card'));

                if (bubbleCount === 0) {
                    container.style.height = 'auto';
                    return;
                }

                const containerWidth = container.clientWidth;
                const baseHeight = 300;
                const heightPerBubbleRow = 150;
                const calculatedHeight = baseHeight + Math.ceil(bubbleCount / 4) * heightPerBubbleRow;
                container.style.height = `${calculatedHeight}px`;

                const placedBubbles = [];
                const maxPlacementAttempts = 50;
                
                const isMobile = window.innerWidth < 768;
                const BASE_SIZE = isMobile ? 220 : 350;
                
                const OVERLAP_FACTOR = 0.9;

                const sortedBubbles = bubbles.map(bubble => {
                    return { element: bubble, initialSize: BASE_SIZE * getRandom(0.7, 1.2) };
                }).sort((a, b) => b.initialSize - a.initialSize);


                sortedBubbles.forEach((bubbleData, index) => {
                    let size = bubbleData.initialSize;
                    let bubble = bubbleData.element;
                    let isPlaced = false;

                    while (!isPlaced) {
                        let radius = size / 2;
                        let foundSpotThisCycle = false;
                        
                        const placementYMax = (index / bubbleCount < 0.4) 
                            ? (calculatedHeight / 2) 
                            : calculatedHeight;

                        for (let i = 0; i < maxPlacementAttempts; i++) {
                            let x = getRandom(0, containerWidth - size);
                            let y = getRandom(0, placementYMax - size);
                            let isColliding = false;

                            for (const placed of placedBubbles) {
                                const dx = (x + radius) - (placed.x + placed.radius);
                                const dy = (y + radius) - (placed.y + placed.radius);
                                const distance = Math.sqrt(dx * dx + dy * dy);

                                if (distance < (radius + placed.radius) * OVERLAP_FACTOR) {
                                    isColliding = true;
                                    break;
                                }
                            }

                            if (!isColliding) {
                                bubble.style.width = `${size}px`;
                                bubble.style.height = `${size}px`;
                                bubble.style.left = `${x}px`;
                                bubble.style.top = `${y}px`;
                                bubble.style.position = 'absolute';
                                bubble.style.zIndex = Math.floor(getRandom(1, 10));
                                
                                placedBubbles.push({ x, y, radius });
                                isPlaced = true;
                                foundSpotThisCycle = true;
                                break;
                            }
                        }

                        if (foundSpotThisCycle) {
                            break;
                        }

                        size *= 0.9; 
                        if (size < 50) {
                            let x = getRandom(0, containerWidth - size);
                            let y = getRandom(0, calculatedHeight - size);
                            bubble.style.width = `${size}px`;
                            bubble.style.height = `${size}px`;
                            bubble.style.left = `${x}px`;
                            bubble.style.top = `${y}px`;
                            bubble.style.position = 'absolute';
                            isPlaced = true;
                            placedBubbles.push({ x, y, radius: size/2 });
                        }
                    }
                    
                    setTimeout(() => {
                        bubble.classList.add('is-visible');
                    }, Math.random() * 500 + 100);
                });
                // --- Конец логики анимации ---

                // --- ИЗМЕНЕНИЕ 3: Отключаем наблюдателя, чтобы анимация не повторялась ---
                observer.disconnect();
            }
        });
    }, { 
        threshold: 0.2 // Анимация начнется, когда 20% галереи будет видно
    });

    // --- ИЗМЕНЕНИЕ 4: Запускаем наблюдение за контейнером ---
    observer.observe(container);
}
```
--- END OF FILE: main\static\main\js\sections\gallery.js ---

--- START OF FILE: main\templates\main\base.html ---
```html
{% load static %}
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <!-- SEO -->
    {% if seo_settings %}
        <title>{{ seo_settings.meta_title|default:company_profile.site_name }}</title>
        <meta name="description" content="{{ seo_settings.meta_description }}">
        <meta name="keywords" content="{{ seo_settings.meta_keywords }}">
        <meta property="og:title" content="{{ seo_settings.og_title|default:seo_settings.meta_title }}">
        <meta property="og:description" content="{{ seo_settings.og_description|default:seo_settings.meta_description }}">
        <meta property="og:type" content="website">
        <meta property="og:url" content="{{ request.build_absolute_uri }}">
        {% if seo_settings.og_image %}<meta property="og:image" content="{{ seo_settings.og_image.url }}">{% endif %}
        {% if seo_settings.json_ld_schema %}<script type="application/ld+json">{{ seo_settings.json_ld_schema|safe }}</script>{% endif %}
    {% else %}
        <title>{{ company_profile.site_name|default:"Maybe - Игры и События" }}</title>
    {% endif %}
    
    {% if company_profile.favicon %}<link rel="icon" href="{{ company_profile.favicon.url }}">{% endif %}

    <!-- Fonts & Styles -->
    {% if company_profile %}
        
        {% if company_profile %}
            {% with google_fonts="Montserrat,Roboto,Playfair Display,Lobster" header_f=company_profile.header_font body_f=company_profile.body_font %}
                {% if header_f in google_fonts and body_f in google_fonts and header_f != body_f %}
                    <link rel="preconnect" href="https://fonts.googleapis.com"><link rel="preconnect" href="https://fonts.gstatic.com" crossorigin><link href="https://fonts.googleapis.com/css2?family={{ header_f|urlencode }}:wght@400;700;900&family={{ body_f|urlencode }}:wght@400;700&display=swap" rel="stylesheet">
                {% elif header_f in google_fonts %}
                    <link rel="preconnect" href="https://fonts.googleapis.com"><link rel="preconnect" href="https://fonts.gstatic.com" crossorigin><link href="https://fonts.googleapis.com/css2?family={{ header_f|urlencode }}:wght@400;700;900&display=swap" rel="stylesheet">
                {% elif body_f in google_fonts %}
                    <link rel="preconnect" href="https://fonts.googleapis.com"><link rel="preconnect" href="https://fonts.gstatic.com" crossorigin><link href="https://fonts.googleapis.com/css2?family={{ body_f|urlencode }}:wght@400;700&display=swap" rel="stylesheet">
                {% endif %}
            {% endwith %}
        {% endif %}
    {% endif %}
    <style>
      :root {
        --font-headers: '{{ company_profile.header_font|default:"SUNDAY" }}', sans-serif;
        --font-body: '{{ company_profile.body_font|default:"FortuneC" }}', sans-serif;
        --section-vertical-padding: {{ company_profile.section_vertical_padding|default:5 }}rem;
      }
      {% for font in custom_fonts %}
        @font-face {
            font-family: '{{ font.name }}';
            src: {% if font.font_file_woff2 %}url('{{ font.font_file_woff2.url }}') format('woff2'){% if font.font_file_woff or font.font_file_ttf or font.font_file_otf %},{% endif %}{% endif %}
                 {% if font.font_file_woff %}url('{{ font.font_file_woff.url }}') format('woff'){% if font.font_file_ttf or font.font_file_otf %},{% endif %}{% endif %}
                 {% if font.font_file_ttf %}url('{{ font.font_file_ttf.url }}') format('truetype'){% if font.font_file_otf %},{% endif %}{% endif %}
                 {% if font.font_file_otf %}url('{{ font.font_file_otf.url }}') format('opentype'){% endif %};
            font-weight: normal;
            font-style: normal;
            font-display: swap;
        }
      {% endfor %}
    </style>
    
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css"/>
    <link rel="stylesheet" href="{% static 'main/css/style.css' %}?v={% now 'U' %}">
    
    {% block extra_head %}{% endblock %}
</head>
<body {% if background_settings %}data-background-enabled="true" data-pattern-url="{% if background_settings.background_pattern %}{{ background_settings.background_pattern.url }}{% endif %}" data-pattern-size="{{ background_settings.pattern_size|default:'200px' }}" data-pattern-opacity="{{ background_settings.pattern_opacity|stringformat:'.2f'|cut:',' }}" data-bg-color="{{ background_settings.background_color|default:'#010101' }}"{% endif %}>
    
    <div id="animated-background-container">
        <div id="background-pattern"></div>
        {% if background_settings %}
            {% for obj in background_settings.background_objects.all %}
                <div class="background-object-placeholder"
                    data-image-url="{{ obj.image.url }}"
                    data-width="{{ obj.width }}"
                    data-top="{{ obj.initial_top }}"
                    data-left="{{ obj.initial_left }}"
                    data-z-index="{{ obj.z_index }}"
                    data-opacity="{{ obj.opacity|stringformat:'.2f'|cut:',' }}"
                    data-anim-duration="{{ obj.animation_duration }}"
                    data-anim-delay="{{ obj.animation_delay }}"
                    data-parallax-target-id="{{ obj.parallax_target_id|default:'' }}"
                    data-parallax-speed="{{ obj.parallax_speed|stringformat:'.2f'|cut:',' }}"
                ></div>
            {% endfor %}
        {% endif %}
    </div>

    <header id="site-header">
        <div class="container header-container">
            <a href="/" class="logo">
                {% if company_profile and company_profile.logo_image %}
                    <img src="{{ company_profile.logo_image.url }}" alt="Логотип Maybe">
                {% endif %}
            </a>
            
            <div class="header-center-text">May be</div>

            <nav class="main-nav">
                <ul>
                    {% for section in nav_sections %}
                        {% if section.is_active %}
                            <li>
                                {% if section.section_type == 'about_us' %}
                                    <a href="/">{{ section.title|default:section.get_section_type_display }}</a>
                                {% else %}
                                    <a href="/#{{ section.section_type }}-section">{{ section.title|default:section.get_section_type_display }}</a>
                                {% endif %}
                            </li>
                        {% endif %}
                    {% endfor %}
                </ul>
            </nav>

            <button id="mobile-nav-toggle" class="mobile-nav-toggle" aria-label="Открыть меню">
                {% if company_profile.nav_toggle_icon %}
                    <img src="{{ company_profile.nav_toggle_icon.url }}" alt="Меню">
                {% else %}
                    <span></span><span></span><span></span>
                {% endif %}
            </button>
        </div>
        
        <div id="mobile-nav-dropdown" class="mobile-nav-dropdown"></div>
    </header>

    <main id="main-content">
        {% block content %}{% endblock %}
    </main>
    
    <footer id="site-footer-bottom">
        <div class="container">
            <p>© {% now "Y" %} {% if company_profile.site_name %}{{ company_profile.site_name }}{% else %}Maybe{% endif %}. Все права защищены.</p>
        </div>
    </footer>
    
    <script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js"></script>
    <script src="{% static 'main/js/main.js' %}?v={% now 'U' %}" type="module"></script>
    
    {% block extra_scripts %}{% endblock %}
</body>
</html>
```
--- END OF FILE: main\templates\main\base.html ---

--- START OF FILE: main\templates\main\home_page.html ---
```html
{% extends "main/base.html" %}
{% load static %}

{% block content %}

    {% for section in sections %}
        {% include "main/partials/"|add:section.section_type|add:".html" %}
    {% endfor %}

{% endblock %}
```
--- END OF FILE: main\templates\main\home_page.html ---

--- START OF FILE: main\templates\main\partials\about_us.html ---
```html
<section id="about-us-section" class="section-about-us">
        <div class="container">
            <div class="about-us-content">
                {% if company_profile %}
                    <div class="about-us-social-icons">
                        {% if company_profile.vk_profile_link and company_profile.vk_icon %}
                            <a href="{{ company_profile.vk_profile_link }}" target="_blank" rel="noopener noreferrer">
                                <img src="{{ company_profile.vk_icon.url }}" alt="VK">
                            </a>
                        {% endif %}
                        {% if company_profile.youtube_profile_link and company_profile.youtube_icon %}
                            <a href="{{ company_profile.youtube_profile_link }}" target="_blank" rel="noopener noreferrer">
                                <img src="{{ company_profile.youtube_icon.url }}" alt="YouTube">
                            </a>
                        {% endif %}
                        {% if company_profile.telegram_profile_link and company_profile.telegram_icon %}
                            <a href="{{ company_profile.telegram_profile_link }}" target="_blank" rel="noopener noreferrer">
                                <img src="{{ company_profile.telegram_icon.url }}" alt="Telegram">
                            </a>
                        {% endif %}
                    </div>
                    <h1 class="slogan">{{ company_profile.motto|safe }}</h1>
                    <div class="about-us-text">{{ company_profile.about_us_text|safe|linebreaks }}</div>
                {% else %}
                    <h1 class="slogan">Девиз не задан</h1>
                    <p class="about-us-text">Текст 'О нас' не заполнен в админ-панели.</p>
                {% endif %}
            </div>
        </div>
    </section>
```
--- END OF FILE: main\templates\main\partials\about_us.html ---

--- START OF FILE: main\templates\main\partials\carousel.html ---
```html
<section id="carousel-section" class="section-carousel">
    <div class="container">
        {% if section.show_title %}
            <h2>{{ section.title|default:"Запись на игры" }}</h2>
        {% endif %}
        
        <div class="carousel-wrapper">
            <div class="swiper-button-prev"></div>
            
            <div class="swiper simple-carousel">
                <div class="swiper-wrapper">
                    {% for slide in carousel_slides %}
                    <div class="swiper-slide">
                        <a href="{{ slide.vk_link|default:'#' }}" 
                           class="circular-slide" 
                           target="_blank" 
                           rel="noopener noreferrer"
                           style="background-image: url('{{ slide.image.url }}');">
                           
                           <div class="always-visible-content">
                               <h3>{{ slide.name }}</h3>
                               {% if slide.date_text %}
                                   <p>{{ slide.date_text }}</p>
                               {% endif %}
                           </div>

                           <div class="hover-overlay">
                               {% if slide.hover_description %}
                                   <p>{{ slide.hover_description }}</p>
                               {% endif %}
                           </div>
                        </a>
                    </div>
                    {% empty %}
                    <div class="swiper-slide">
                        <p style="padding: 2rem; text-align: center; width: 100%;">Слайды не добавлены.</p>
                    </div>
                    {% endfor %}
                </div>
            </div>
            
            <div class="swiper-button-next"></div>

            <!-- ИЗМЕНЕНИЕ ЗДЕСЬ: ДОБАВЛЯЕМ ЭТОТ БЛОК -->
            <div class="swiper-pagination"></div>
        </div>
    </div>
</section>
```
--- END OF FILE: main\templates\main\partials\carousel.html ---

--- START OF FILE: main\templates\main\partials\contacts.html ---
```html
<section id="contacts-section" class="section-contacts text-center">
        <div class="container">
            {% if section.show_title %}
                <h2>{{ section.title|default:"Контакты" }}</h2>
            {% endif %}
            {% if company_profile %}
                <p><strong>Адрес:</strong><br><a href="https://yandex.ru/maps/?text={{ company_profile.contact_address|urlencode }}" target="_blank" rel="noopener noreferrer">{{ company_profile.contact_address|linebreaksbr }}</a></p>
                <p><strong>Телефон:</strong><br><a href="tel:{{ company_profile.contact_phone }}">{{ company_profile.contact_phone }}</a></p>
                <p><strong>Email:</strong><br><a href="mailto:{{ company_profile.contact_email }}">{{ company_profile.contact_email }}</a></p>
                
                <div class="social-icons-footer">
                     {% if company_profile.vk_profile_link and company_profile.vk_icon %}
                        <a href="{{ company_profile.vk_profile_link }}" target="_blank" rel="noopener noreferrer">
                            <img src="{{ company_profile.vk_icon.url }}" alt="VK">
                        </a>
                    {% endif %}
                    {% if company_profile.youtube_profile_link and company_profile.youtube_icon %}
                        <a href="{{ company_profile.youtube_profile_link }}" target="_blank" rel="noopener noreferrer">
                            <img src="{{ company_profile.youtube_icon.url }}" alt="YouTube">
                        </a>
                    {% endif %}
                    {% if company_profile.telegram_profile_link and company_profile.telegram_icon %}
                        <a href="{{ company_profile.telegram_profile_link }}" target="_blank" rel="noopener noreferrer">
                            <img src="{{ company_profile.telegram_icon.url }}" alt="Telegram">
                        </a>
                    {% endif %}
                </div>
            {% endif %}
        </div>
    </section>
```
--- END OF FILE: main\templates\main\partials\contacts.html ---

--- START OF FILE: main\templates\main\partials\features.html ---
```html
{% load static %}

<section id="features-section" class="section-features">
    <div class="container">
        {% if section.show_title %}
            <h2>{{ section.title|default:"Что мы предлагаем" }}</h2>
        {% endif %}
        <div class="features-grid">
            {% for feature in features %}
                <div class="feature-item">
                    <div class="feature-icon-wrapper">
                        {% if feature.icon %}
                            <img src="{{ feature.icon.url }}" alt="{{ feature.title }}">
                        {% endif %}
                    </div>
                    <div class="feature-text-content">
                        <h3>{{ feature.title }}</h3>
                        <p>{{ feature.description }}</p>
                    </div>
                </div>
            {% empty %}
                <p>Преимущества не добавлены в админ-панели.</p>
            {% endfor %}
        </div>
    </div>
</section>
```
--- END OF FILE: main\templates\main\partials\features.html ---

--- START OF FILE: main\templates\main\partials\gallery.html ---
```html
<section id="gallery-section" class="gallery-section">
    <div class="container">
        <h2 class="gallery-title">
            {{ section.title|default:"Фото и видео галерея" }}
        </h2>
        {% if company_profile.gallery_description %}
            <p class="gallery-main-description">{{ company_profile.gallery_description }}</p>
        {% endif %}
        
        <div class="gallery-grid bubble-container" data-bubble-count="{{ gallery_items|length }}">
            {% for item in gallery_items %}
                <div class="gallery-card">
                    <div class="gallery-media-circle">
                        {% if item.image %}
                            <img src="{{ item.image.url }}" alt="Элемент галереи">
                        {% elif item.video %}
                            <video src="{{ item.video.url }}" loop muted autoplay playsinline></video>
                        {% endif %}
                    </div>
                </div>
            {% empty %}
                <p style="text-align: center; width: 100%;">Элементы для галереи пока не добавлены.</p>
            {% endfor %}
        </div>
        
        {% if company_profile.gallery_button_link %}
        <div style="text-align: center; margin-top: 4rem;">
            <a href="{{ company_profile.gallery_button_link }}" class="market-more-link" target="_blank" rel="noopener noreferrer">
                {{ company_profile.gallery_button_text|default:"Узнать подробнее" }}
            </a>
        </div>
        {% endif %}
    </div>
</section>
```
--- END OF FILE: main\templates\main\partials\gallery.html ---

--- START OF FILE: main\templates\main\partials\games.html ---
```html
<section id="games-section" class="section-games">
        <div class="container">
            {% if section.show_title %}
                <h2>{{ section.title|default:"Игры" }}</h2>
            {% endif %}
            <div class="games-grid">
                {% for type in game_types %}
                    <div class="game-type-item">
                        <div class="game-type-icon-wrapper">
                            {% if type.icon %}<img src="{{ type.icon.url }}" alt="{{ type.name }}">{% endif %}
                        </div>
                        <div class="game-type-text-content">
                            <h3>{{ type.name }}</h3>
                            <p>{{ type.description }}</p>
                        </div>
                    </div>
                {% empty %}
                    <p>Типы игр не добавлены.</p>
                {% endfor %}
            </div>
        </div>
    </section>
```
--- END OF FILE: main\templates\main\partials\games.html ---

--- START OF FILE: main\templates\main\partials\market.html ---
```html
<section id="market-section">
        <div class="container">
            {% if section.show_title %}
                <h2>{{ section.title|default:"Маркет" }}</h2>
            {% endif %}
            <div class="market-grid">
                {% for product in products %}
                    <a href="{{ product.link|default:'#' }}" class="product-card" target="_blank" rel="noopener noreferrer">
                        <div class="product-image-wrapper">
                            {% if product.image %}
                                <img src="{{ product.image.url }}" alt="{{ product.name }}">
                            {% endif %}
                        </div>
                        <h3 class="product-title">{{ product.name }}</h3>
                        <div class="product-price">{{ product.price }} ₽</div>
                        <p class="product-description">{{ product.description }}</p>
                    </a>
                {% empty %}
                     <p>Товары не добавлены.</p>
                {% endfor %}
            </div>
            {% if company_profile.market_link %}
                <a href="{{ company_profile.market_link }}" class="market-more-link" target="_blank" rel="noopener noreferrer">Еще больше товаров в нашем маркете</a>
            {% endif %}
        </div>
    </section>
```
--- END OF FILE: main\templates\main\partials\market.html ---

--- START OF FILE: main\templates\main\partials\orbibol.html ---
```html
<section id="orbibol-section">
    <div class="container">
        {% if section.show_title %}
            <h2>{{ section.title|default:"Орбибол" }}</h2>
        {% endif %}
        
        {% if orbibol_info %}
            <p class="orbibol-general-info">{{ orbibol_info.general_info|linebreaksbr }}</p>
            
            <div class="orbibol-content-wrapper">
                <!-- Карточка для Сюжетного Орбибола -->
                <div class="orbibol-item">
                    <div class="orbibol-icon-wrapper">
                        {% if orbibol_info.plot_icon %}
                            <img src="{{ orbibol_info.plot_icon.url }}" alt="{{ orbibol_info.plot_title }}">
                        {% endif %}
                    </div>
                    <div class="orbibol-text-content">
                        <h3>{{ orbibol_info.plot_title }}</h3>
                        <p>{{ orbibol_info.plot_description }}</p>
                    </div>
                </div>
                
                <!-- Карточка для Тактического Орбибола -->
                <div class="orbibol-item">
                    <div class="orbibol-icon-wrapper">
                        {% if orbibol_info.tactical_icon %}
                            <img src="{{ orbibol_info.tactical_icon.url }}" alt="{{ orbibol_info.tactical_title }}">
                        {% endif %}
                    </div>
                    <div class="orbibol-text-content">
                        <h3>{{ orbibol_info.tactical_title }}</h3>
                        <p>{{ orbibol_info.tactical_description }}</p>
                    </div>
                </div>
            </div>
            
            {% if orbibol_info.details_link %}
                <div class="text-center">
                    <a href="{{ orbibol_info.details_link }}" target="_blank" rel="noopener noreferrer" class="orbibol-details-link">
                        {{ company_profile.orbibol_details_button_text|default:"Узнать подробнее" }}
                    </a>
                </div>
            {% endif %}
        {% endif %}
    </div>
</section>
```
--- END OF FILE: main\templates\main\partials\orbibol.html ---

--- START OF FILE: main\__init__.py ---
```py

```
--- END OF FILE: main\__init__.py ---

--- START OF FILE: main\admin.py ---
```py
from django.contrib import admin
from django.utils.html import mark_safe
from django import forms
from .models import (
    CompanyProfile, OrbibolInfo, Feature, GameType, Product, GalleryItem,
    BackgroundSettings, BackgroundObject, Section, CarouselSlide, CustomFont,
    SEOSettings
)

def get_all_font_choices():
    static_choices = list(CompanyProfile.FONT_CHOICES)
    try:
        custom_font_choices = [(font.name, f"{font.name} (кастомный)") for font in CustomFont.objects.all()]
        return static_choices + custom_font_choices
    except Exception:
        return static_choices

class CompanyProfileForm(forms.ModelForm):
    header_font = forms.ChoiceField(label="Шрифт для заголовков (H1, H2 и т.д.)")
    body_font = forms.ChoiceField(label="Шрифт для основного текста (параграфы)")

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        all_choices = get_all_font_choices()
        self.fields['header_font'].choices = all_choices
        self.fields['body_font'].choices = all_choices

    class Meta:
        model = CompanyProfile
        fields = '__all__'

@admin.register(CustomFont)
class CustomFontAdmin(admin.ModelAdmin):
    list_display = ('name', 'font_file_otf', 'font_file_ttf', 'font_file_woff', 'font_file_woff2')

@admin.register(SEOSettings)
class SEOSettingsAdmin(admin.ModelAdmin):
    list_display = ('company_profile', 'meta_title', 'meta_description')
    fieldsets = (
        (None, {
            'fields': ('company_profile',),
            'description': 'Здесь собраны все глобальные настройки для поисковой оптимизации сайта.'
        }),
        ('Основные Meta-теги', {
            'fields': ('meta_title', 'meta_description', 'meta_keywords'),
        }),
        ('Open Graph (для репостов в соцсети)', {
            'classes': ('collapse',),
            'fields': ('og_title', 'og_description', 'og_image'),
        }),
        ('Структурированные данные (JSON-LD)', {
            'classes': ('collapse',),
            'description': 'Этот блок для SEO-специалиста. Позволяет поисковым роботам лучше понимать контент вашего сайта.',
            'fields': ('json_ld_schema',),
        }),
    )

    def has_add_permission(self, request):
        return self.model.objects.count() == 0

    def has_delete_permission(self, request, obj=None):
        return False

class ImagePreviewAdminMixin:
    def get_preview(self, obj, field_name, max_height=100, is_background=False):
        field = getattr(obj, field_name, None)
        if field and hasattr(field, 'url'):
            if is_background:
                 return mark_safe(f'<div style="width:{max_height}px; height:{max_height}px; background-image:url({field.url}); background-size: cover; border: 1px solid #ddd;"></div>')
            return mark_safe(f'<img src="{field.url}" style="max-height: {max_height}px; max-width: {max_height*2}px;" />')
        return "Нет изображения"

class OrbibolInfoInline(ImagePreviewAdminMixin, admin.StackedInline):
    model = OrbibolInfo
    can_delete = False
    verbose_name_plural = 'Настройки для секции "Орбибол"'
    readonly_fields = ('plot_icon_preview', 'tactical_icon_preview')
    fieldsets = (
        (None, {'fields': ('general_info', 'details_link')}),
        ('Сюжетный орбибол', {'fields': ('plot_title', 'plot_description', 'plot_icon', 'plot_icon_preview')}),
        ('Тактический орбибол', {'fields': ('tactical_title', 'tactical_description', 'tactical_icon', 'tactical_icon_preview')}),
    )
    def plot_icon_preview(self, obj): return self.get_preview(obj, 'plot_icon', max_height=75)
    plot_icon_preview.short_description = 'Предпросмотр иконки (Сюжетный)'
    def tactical_icon_preview(self, obj): return self.get_preview(obj, 'tactical_icon', max_height=75)
    tactical_icon_preview.short_description = 'Предпросмотр иконки (Тактический)'

class SectionInline(admin.TabularInline):
    model = Section
    extra = 0
    readonly_fields = ('section_type',)
    fields = ('section_type', 'title', 'show_title', 'order', 'is_active')
    ordering = ('order',)
    can_delete = False
    
    def has_add_permission(self, request, obj=None):
        return False

class CarouselSlideInline(admin.TabularInline):
    model = CarouselSlide
    extra = 1
    ordering = ('order',)
    fields = ('name', 'date_text', 'hover_description', 'image', 'vk_link', 'order')

class FeatureInline(admin.TabularInline):
    model = Feature
    extra = 1
    ordering = ('order',)
    fields = ('title', 'description', 'icon', 'order')

class GameTypeInline(admin.TabularInline):
    model = GameType
    extra = 1
    ordering = ('order',)
    fields = ('name', 'description', 'icon', 'order')

class ProductInline(admin.TabularInline):
    model = Product
    extra = 1
    ordering = ('order',)
    fields = ('name', 'price', 'description', 'image', 'link', 'button_text', 'order')

class GalleryItemInline(admin.TabularInline):
    model = GalleryItem
    fields = ('image', 'video', 'order')
    extra = 10 
    ordering = ('order',)

@admin.register(CompanyProfile)
class CompanyProfileAdmin(admin.ModelAdmin):
    form = CompanyProfileForm
    readonly_fields = ('logo_image_preview','logo_image_light_preview','favicon_preview','vk_icon_preview','youtube_icon_preview','telegram_icon_preview','nav_toggle_icon_preview', 'mobile_menu_indicator_icon_preview')
    
    fieldsets = (
        ('Основные настройки сайта', {'fields': ('site_name',('logo_image', 'logo_image_preview'),('logo_image_light', 'logo_image_light_preview'),('favicon', 'favicon_preview'),)}),
        ('Настройки шрифтов и вида', {'fields': ('header_font', 'body_font', 'section_vertical_padding')}),
        ('Секция "О нас"', {'fields': ('motto', 'about_us_text')}),
        ('Настройки других секций', {
            'description': 'Здесь можно изменить ссылки и тексты для кнопок на сайте.', 
            'fields': ('orbibol_details_button_text', 'market_link', 'market_button_text', 'gallery_description', 'gallery_button_link', 'gallery_button_text')
        }),
        ('Контакты и Соцсети', {'classes': ('collapse',), 'fields': ('contact_email', 'contact_phone', 'contact_address', 'vk_profile_link', 'telegram_profile_link', 'youtube_profile_link', ('vk_icon', 'vk_icon_preview'), ('youtube_icon', 'youtube_icon_preview'), ('telegram_icon', 'telegram_icon_preview'))}),
        ('Технические иконки', {'classes': ('collapse',),'fields': (
            ('nav_toggle_icon', 'nav_toggle_icon_preview'),
            ('mobile_menu_indicator_icon', 'mobile_menu_indicator_icon_preview')
        )})
    )
    
    inlines = [
        SectionInline,
        CarouselSlideInline,
        OrbibolInfoInline,
        FeatureInline,
        GameTypeInline,
        ProductInline,
        GalleryItemInline,
    ]

    def _icon_preview(self, obj, field_name, style="max-height: 50px;"):
        field = getattr(obj, field_name)
        if field and hasattr(field, 'url'):
            return mark_safe(f'<img src="{field.url}" style="{style}" />')
        return "Нет иконки"
        
    def logo_image_preview(self, obj): return self._icon_preview(obj, 'logo_image', "max-height: 80px; background: #ccc; padding: 5px;")
    def logo_image_light_preview(self, obj): return self._icon_preview(obj, 'logo_image_light', "max-height: 80px; background: #333; padding: 5px;")
    def favicon_preview(self, obj): return self._icon_preview(obj, 'favicon')
    def vk_icon_preview(self, obj): return self._icon_preview(obj, 'vk_icon')
    def youtube_icon_preview(self, obj): return self._icon_preview(obj, 'youtube_icon')
    def telegram_icon_preview(self, obj): return self._icon_preview(obj, 'telegram_icon')
    def nav_toggle_icon_preview(self, obj): return self._icon_preview(obj, 'nav_toggle_icon')
    def mobile_menu_indicator_icon_preview(self, obj): return self._icon_preview(obj, 'mobile_menu_indicator_icon')
    
    def has_add_permission(self, request): return self.model.objects.count() == 0
    def has_delete_permission(self, request, obj=None): return False

class BackgroundObjectInline(ImagePreviewAdminMixin, admin.TabularInline):
    model = BackgroundObject
    extra = 1
    readonly_fields = ('image_preview',)
    fields = ('name', 'image', 'image_preview', 'width', 'initial_top', 'initial_left', 'opacity', 'z_index', 'animation_duration', 'animation_delay', 'parallax_target_id', 'parallax_speed', 'order')
    ordering = ('order',)
    def image_preview(self, obj): return self.get_preview(obj, 'image', max_height=75)
    image_preview.short_description = 'Предпросмотр'

@admin.register(BackgroundSettings)
class BackgroundSettingsAdmin(ImagePreviewAdminMixin, admin.ModelAdmin):
    list_display = ('name', 'pattern_preview')
    readonly_fields = ('pattern_preview',)
    fields = ('name', 'background_pattern', 'pattern_preview', 'pattern_size', 'pattern_opacity', 'background_color')
    inlines = [BackgroundObjectInline]
    def pattern_preview(self, obj): return self.get_preview(obj, 'background_pattern', is_background=True)
    pattern_preview.short_description = 'Предпросмотр паттерна'
    def has_add_permission(self, request): return self.model.objects.count() == 0
    def has_delete_permission(self, request, obj=None): return False
```
--- END OF FILE: main\admin.py ---

--- START OF FILE: main\apps.py ---
```py
from django.apps import AppConfig


class MainConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'main'
```
--- END OF FILE: main\apps.py ---

--- START OF FILE: main\context_processors.py ---
```py
# START OF FILE: main/context_processors.py
from .models import Section, CustomFont

def global_context(request):
   
    sections_for_nav = Section.objects.filter(is_active=True).order_by('order')
    custom_fonts = CustomFont.objects.all()
    
    return {
        'nav_sections': sections_for_nav,
        'custom_fonts': custom_fonts,
    }
```
--- END OF FILE: main\context_processors.py ---

--- START OF FILE: main\models.py ---
```py
# main/models.py
from django.db import models
from django.core.validators import MinValueValidator, MaxValueValidator

# Убраны строки:
# from myproject.storages import RawMediaCloudinaryStorage
# font_storage = RawMediaCloudinaryStorage()

class CompanyProfile(models.Model):
    site_name = models.CharField(max_length=200, default="Название вашего клуба", verbose_name="Название сайта (в Title)")
    logo_image = models.FileField(upload_to='site_assets/', verbose_name="Логотип сайта (SVG/PNG)", blank=True, null=True)
    logo_image_light = models.FileField(upload_to='site_assets/', verbose_name="Логотип (светлый)", blank=True, null=True, help_text="Светлая версия логотипа для темных фонов (SVG/PNG)")
    favicon = models.FileField(upload_to='site_assets/', verbose_name="Фавикон", blank=True, null=True, help_text="Иконка для вкладки браузера (файл .ico, .png или .svg)")
    motto = models.CharField(max_length=255, blank=True, verbose_name="Девиз компании")
    about_us_text = models.TextField(blank=True, verbose_name="Текст 'О нас'")
    
    section_vertical_padding = models.PositiveIntegerField(
        default=5, 
        verbose_name="Вертикальный отступ секций (верх/низ)",
        help_text="Укажите число. Значение будет использовано в 'rem' (например, 5 = 5rem). 1rem ~ 16px."
    )
    
    gallery_description = models.TextField(verbose_name='Описание для секции "Фото и видео галерея"', blank=True, null=True)
    contact_email = models.EmailField(max_length=255, blank=True, null=True, verbose_name="Контактный Email")
    contact_phone = models.CharField(max_length=50, blank=True, null=True, verbose_name="Контактный Телефон")
    contact_address = models.TextField(blank=True, null=True, verbose_name="Адрес")
    vk_profile_link = models.URLField(max_length=250, blank=True, null=True, verbose_name="Ссылка на профиль VK")
    telegram_profile_link = models.URLField(max_length=250, blank=True, null=True, verbose_name="Ссылка на профиль Telegram")
    youtube_profile_link = models.URLField(max_length=250, blank=True, null=True, verbose_name="Ссылка на профиль YouTube")
    market_link = models.URLField(max_length=250, blank=True, null=True, verbose_name="Ссылка \"Еще больше товаров\" в Маркете")
    gallery_button_link = models.URLField(max_length=250, blank=True, null=True, verbose_name="Ссылка для кнопки 'Узнать подробнее' в галерее")
    gallery_button_text = models.CharField(max_length=100, blank=True, default="Узнать подробнее", verbose_name="Текст для кнопки в галерее")
    orbibol_details_button_text = models.CharField(max_length=100, blank=True, default="Узнать подробнее", verbose_name="Текст для кнопки 'Узнать подробнее' (Орбибол)")
    market_button_text = models.CharField(max_length=100, blank=True, default="Еще больше товаров в нашем маркете", verbose_name="Текст для ссылки 'Еще больше товаров' (Маркет)")

    FONT_CHOICES = [
        ('SUNDAY', 'Sunday (встроенный)'),
        ('FortuneC', 'FortuneC (встроенный)'),
        ('Montserrat', 'Montserrat (Google)'),
        ('Roboto', 'Roboto (Google)'),
        ('Playfair Display', 'Playfair Display (Google)'),
        ('Lobster', 'Lobster (Google)'),
    ]

    header_font = models.CharField(max_length=100, default='SUNDAY', verbose_name="Шрифт для заголовков (H1, H2 и т.д.)")
    body_font = models.CharField(max_length=100, default='FortuneC', verbose_name="Шрифт для основного текста (параграфы)")
    vk_icon = models.FileField(upload_to='site_assets/', verbose_name="Иконка VK (SVG/PNG)", blank=True, null=True)
    youtube_icon = models.FileField(upload_to='site_assets/', verbose_name="Иконка YouTube (SVG/PNG)", blank=True, null=True)
    telegram_icon = models.FileField(upload_to='site_assets/', verbose_name="Иконка Telegram (SVG/PNG)", blank=True, null=True)
    nav_toggle_icon = models.FileField(upload_to='site_assets/', verbose_name="Иконка для раскрытия меню (в свернутом хедере)", blank=True, null=True)
    mobile_menu_indicator_icon = models.FileField(upload_to='site_assets/', verbose_name="Иконка-индикатор для моб. меню (стрелка вниз)", blank=True, null=True)
    
    class Meta:
        verbose_name = "1. Главные настройки сайта"
        verbose_name_plural = "1. Главные настройки сайта"
        
    def __str__(self):
        return self.site_name if self.site_name else "Настройки сайта"
        
    def save(self, *args, **kwargs):
        is_new = self.pk is None
        super().save(*args, **kwargs)
        if is_new:
            SEOSettings.objects.get_or_create(company_profile=self)
            ALL_SECTIONS = [
                {'type': 'about_us', 'title': 'О нас', 'order': 0},
                {'type': 'features', 'title': 'Что мы предлагаем', 'order': 1},
                {'type': 'carousel', 'title': 'Запись на игры', 'order': 2},
                {'type': 'orbibol', 'title': 'Орбибол', 'order': 3},
                {'type': 'games', 'title': 'Игры', 'order': 4},
                {'type': 'market', 'title': 'Маркет', 'order': 5},
                {'type': 'gallery', 'title': 'Фото и видео галерея', 'order': 6},
                {'type': 'contacts', 'title': 'Контакты', 'order': 7},
            ]
            for section_data in ALL_SECTIONS:
                Section.objects.get_or_create(
                    company_profile=self,
                    section_type=section_data['type'],
                    defaults={'title': section_data['title'], 'order': section_data['order']}
                )

class CustomFont(models.Model):
    name = models.CharField(max_length=100, unique=True, verbose_name="Название шрифта (для CSS, напр. 'MyCoolFont')")
    # В полях ниже убран параметр storage=font_storage
    font_file_otf = models.FileField(upload_to='custom_fonts/', blank=True, null=True, verbose_name='Файл шрифта .otf')
    font_file_ttf = models.FileField(upload_to='custom_fonts/', blank=True, null=True, verbose_name='Файл шрифта .ttf')
    font_file_woff = models.FileField(upload_to='custom_fonts/', blank=True, null=True, verbose_name='Файл шрифта .woff')
    font_file_woff2 = models.FileField(upload_to='custom_fonts/', blank=True, null=True, verbose_name='Файл шрифта .woff2')

    class Meta:
        verbose_name = "Кастомный шрифт"
        verbose_name_plural = "Кастомные шрифты"

    def __str__(self):
        return self.name

class CarouselSlide(models.Model):
    company_profile = models.ForeignKey(CompanyProfile, on_delete=models.CASCADE, related_name='carousel_slides')
    name = models.CharField(max_length=200, verbose_name='Название/Заголовок слайда (виден всегда)')
    date_text = models.CharField(max_length=100, blank=True, verbose_name="Дата/Подзаголовок (виден всегда)")
    hover_description = models.TextField(blank=True, verbose_name="Описание (появляется при наведении)")
    image = models.FileField(upload_to='carousel_slides/', verbose_name="Изображение для слайда")
    vk_link = models.URLField(blank=True, null=True, verbose_name="Ссылка для кнопки (весь слайд)")
    order = models.PositiveIntegerField(default=0, verbose_name='Порядок сортировки')
    
    class Meta:
        verbose_name = 'Слайд для карусели'
        verbose_name_plural = 'Слайды для карусели'
        ordering = ['order']

    def __str__(self):
        return self.name
    
class Section(models.Model):
    company_profile = models.ForeignKey(CompanyProfile, on_delete=models.CASCADE, related_name='sections')
    SECTION_CHOICES = [
        ('about_us', 'О нас'),
        ('features', 'Что мы предлагаем (Преимущества)'),
        ('carousel', 'Карусель'),
        ('orbibol', 'Орбибол'),
        ('games', 'Игры'),
        ('market', 'Маркет'),
        ('gallery', 'Фото и видео галерея'),
        ('contacts', 'Контакты'),
    ]
    section_type = models.CharField(max_length=50, choices=SECTION_CHOICES, verbose_name="Тип секции")
    title = models.CharField(max_length=200, blank=True, verbose_name="Заголовок секции", help_text="Оставьте пустым, чтобы использовать заголовок по умолчанию.")
    show_title = models.BooleanField(default=True, verbose_name="Показывать заголовок")
    order = models.PositiveIntegerField(default=0, verbose_name="Порядок отображения")
    is_active = models.BooleanField(default=True, verbose_name="Секция включена")

    class Meta:
        verbose_name = "Секция на главной странице"
        verbose_name_plural = "Секции на главной странице"
        ordering = ['order']
        unique_together = ('company_profile', 'section_type')

    def __str__(self):
        return self.get_section_type_display()

class Feature(models.Model):
    company_profile = models.ForeignKey(CompanyProfile, on_delete=models.CASCADE, related_name='features')
    title = models.CharField(max_length=100, verbose_name="Заголовок преимущества")
    description = models.TextField(verbose_name="Описание преимущества")
    icon = models.FileField(upload_to='feature_icons/', verbose_name="Иконка (SVG или PNG)")
    order = models.PositiveIntegerField(default=0, db_index=True, verbose_name="Порядок отображения")
    class Meta:
        verbose_name = "Преимущество (Что мы предлагаем)"
        verbose_name_plural = "Преимущества (Что мы предлагаем)"
        ordering = ['order']
    def __str__(self):
        return self.title

class GameType(models.Model):
    company_profile = models.ForeignKey(CompanyProfile, on_delete=models.CASCADE, related_name='game_types')
    name = models.CharField(max_length=100, verbose_name="Название типа игры")
    description = models.TextField(verbose_name="Краткое описание типа игры")
    icon = models.FileField(upload_to='gametype_icons/', verbose_name="Иконка для типа игры (SVG или PNG)")
    order = models.PositiveIntegerField(default=0, db_index=True, verbose_name="Порядок отображения")
    class Meta:
        verbose_name = "Тип игры (секция 'Игры')"
        verbose_name_plural = "Типы игр (секция 'Игры')"
        ordering = ['order']
    def __str__(self):
        return self.name

class Product(models.Model):
    company_profile = models.ForeignKey(CompanyProfile, on_delete=models.CASCADE, related_name='products')
    name = models.CharField(max_length=200, verbose_name="Название товара")
    price = models.PositiveIntegerField(verbose_name="Цена")
    description = models.TextField(verbose_name="Краткое описание товара")
    image = models.FileField(upload_to='product_images/', verbose_name="Изображение товара (SVG/PNG)")
    link = models.URLField(max_length=200, blank=True, null=True, verbose_name="Ссылка на страницу товара")
    order = models.PositiveIntegerField(default=0, db_index=True, verbose_name="Порядок отображения")
    button_text = models.CharField(max_length=100, default="Заказать игру", verbose_name="Текст кнопки")

    class Meta:
        verbose_name = "Товар"
        verbose_name_plural = "Товары"
        ordering = ['order']
        
    def __str__(self):
        return self.name

class GalleryItem(models.Model):
    company_profile = models.ForeignKey(CompanyProfile, on_delete=models.CASCADE, related_name='gallery_items')
    image = models.FileField(upload_to='gallery/', verbose_name="Изображение", blank=True, null=True, help_text="Загрузите, если это фото.")
    video = models.FileField(upload_to='gallery/', verbose_name="Видео (mp4, webm)", blank=True, null=True, help_text="Загрузите, если это видео.")
    order = models.PositiveIntegerField(default=0, db_index=True, verbose_name="Порядок отображения")
    
    class Meta:
        verbose_name = "Элемент галереи"
        verbose_name_plural = "Элементы галереи"
        ordering = ['order']

    def __str__(self):
        if self.image:
            return f"Изображение: {self.image.name}"
        elif self.video:
            return f"Видео: {self.video.name}"
        return f"Элемент галереи #{self.pk}"

class OrbibolInfo(models.Model):
    company_profile = models.OneToOneField(CompanyProfile, on_delete=models.CASCADE, related_name='orbibol_info')
    general_info = models.TextField(verbose_name="Общая информация (первый абзац под заголовком 'Орбибол')")
    plot_title = models.CharField(max_length=100, default="Сюжетный орбибол", verbose_name="Заголовок блока 'Сюжетный'")
    plot_description = models.TextField(verbose_name="Описание для 'Сюжетный орбибол'")
    plot_icon = models.FileField(upload_to='orbibol_icons/', verbose_name="Иконка для \"Сюжетный орбибол\" (SVG/PNG)", blank=True, null=True)
    tactical_title = models.CharField(max_length=100, default="Тактический орбибол", verbose_name="Заголовок блока 'Тактический'")
    tactical_description = models.TextField(verbose_name="Описание для 'Тактический орбибол'")
    tactical_icon = models.FileField(upload_to='orbibol_icons/', verbose_name="Иконка для \"Тактический орбибол\" (SVG/PNG)", blank=True, null=True)
    details_link = models.URLField(max_length=250, blank=True, null=True, verbose_name="Ссылка 'Узнать подробнее'")
    class Meta:
        verbose_name = "Настройки секции 'Орбибол'"
        verbose_name_plural = "Настройки секции 'Орбибол'"
    def __str__(self):
        return "Информация для секции Орбибол"

class BackgroundSettings(models.Model):
    name = models.CharField(max_length=100, default="Основные настройки фона", verbose_name="Название набора настроек")
    background_pattern = models.FileField(upload_to='backgrounds/', blank=True, null=True, verbose_name="Паттерн фона (повторяющееся изображение)", help_text="Это изображение будет повторяться на фоне.")
    pattern_size = models.CharField(max_length=50, default="200px", verbose_name="Размер паттерна", help_text="CSS значение, например: '200px', '50%', 'cover', 'contain'.")
    pattern_opacity = models.DecimalField(max_digits=3, decimal_places=2, default=0.3, verbose_name="Прозрачность паттерна (от 0.0 до 1.0)", validators=[MinValueValidator(0), MaxValueValidator(1)])
    background_color = models.CharField(max_length=20, default="#010101", verbose_name="Основной цвет фона", help_text="CSS цвет, например: '#010101'. Будет под паттерном.")
    class Meta:
        verbose_name = "3. Настройки фона"
        verbose_name_plural = "3. Настройки фона"
    def __str__(self):
        return self.name

class BackgroundObject(models.Model):
    settings = models.ForeignKey(BackgroundSettings, on_delete=models.CASCADE, related_name='background_objects', verbose_name="Набор настроек")
    name = models.CharField(max_length=100, verbose_name="Название объекта")
    image = models.FileField(upload_to='backgrounds/objects/', verbose_name="Изображение объекта")
    width = models.PositiveIntegerField(default=150, verbose_name="Ширина объекта (px)")
    initial_top = models.CharField(max_length=10, default="50%", verbose_name="Начальная позиция сверху", help_text="CSS значение, например '50%' или '100px'")
    initial_left = models.CharField(max_length=10, default="50%", verbose_name="Начальная позиция слева", help_text="CSS значение, например '50%' или '100px'")
    animation_duration = models.PositiveIntegerField(default=20, verbose_name="Длительность анимации (секунд)", help_text="Длительность 'покачивания'. 0 чтобы отключить.")
    animation_delay = models.PositiveIntegerField(default=0, verbose_name="Задержка перед началом анимации (секунд)")
    opacity = models.DecimalField(max_digits=3, decimal_places=2, default=0.5, verbose_name="Прозрачность (от 0.0 до 1.0)", validators=[MinValueValidator(0), MaxValueValidator(1)])
    z_index = models.IntegerField(default=-9, verbose_name="Слой (z-index)", help_text="Чем меньше, тем 'ниже' объект. Паттерн фона на слое -10.")
    order = models.PositiveIntegerField(default=0, db_index=True, verbose_name="Порядок")
    parallax_target_id = models.CharField(max_length=100, blank=True, null=True, verbose_name="ID секции для параллакс-эффекта", help_text="Например: 'about-us-section'. Оставьте пустым, чтобы отключить параллакс.")
    parallax_speed = models.FloatField(default=0.3, verbose_name="Скорость параллакса", help_text="Например: 0.2 (медленнее скролла), 1 (вместе со скроллом), -0.5 (в обратную сторону)")
    class Meta:
        verbose_name = "Анимированный объект фона"
        verbose_name_plural = "Анимированные объекты фона"
        ordering = ['order']
    def __str__(self):
        return self.name

class SEOSettings(models.Model):
    company_profile = models.OneToOneField(CompanyProfile, on_delete=models.CASCADE, related_name='seo_settings', verbose_name="Профиль компании")
    meta_title = models.CharField(max_length=200, blank=True, verbose_name="Meta Title", help_text="Основной заголовок страницы для поисковых систем (до 60 символов).")
    meta_description = models.TextField(max_length=300, blank=True, verbose_name="Meta Description", help_text="Краткое описание страницы для поисковых систем (до 160 символов).")
    meta_keywords = models.CharField(max_length=255, blank=True, verbose_name="Meta Keywords", help_text="Ключевые слова через запятую. Этот тег почти не используется современными поисковиками, но может быть полезен.")
    og_title = models.CharField(max_length=200, blank=True, verbose_name="Open Graph Title", help_text="Заголовок, который будет виден при репосте ссылки в соцсети.")
    og_description = models.TextField(max_length=300, blank=True, verbose_name="Open Graph Description", help_text="Описание для репоста в соцсети.")
    og_image = models.ImageField(upload_to='seo_images/', blank=True, null=True, verbose_name="Open Graph Image", help_text="Картинка для репоста (рекомендуемый размер 1200x630px).")
    json_ld_schema = models.TextField(
        blank=True,
        verbose_name="Структурированные данные (JSON-LD)",
        help_text="Сюда вставляется код разметки Schema.org в формате JSON-LD. Например, для организации или мероприятия.",
        default='''{
  "@context": "https://schema.org",
  "@type": "SportsClub",
  "name": "Название Вашего Клуба",
  "alternateName": "Maybe",
  "description": "Клуб активного отдыха...",
  "url": "https://maybe-7u6w.onrender.com/",
  "logo": "URL вашего логотипа",
  "address": {
    "@type": "PostalAddress",
    "streetAddress": "Ваша улица и дом",
    "addressLocality": "Ваш город",
    "postalCode": "Ваш индекс",
    "addressCountry": "RU"
  },
  "contactPoint": {
    "@type": "ContactPoint",
    "telephone": "+7-XXX-XXX-XX-XX",
    "contactType": "customer service"
  }
}'''
    )

    class Meta:
        verbose_name = "2. Настройки SEO"
        verbose_name_plural = "2. Настройки SEO"

    def __str__(self):
        return f"SEO-настройки для {self.company_profile.site_name}"
```
--- END OF FILE: main\models.py ---

--- START OF FILE: main\tests.py ---
```py
from django.test import TestCase

# Create your tests here.

```
--- END OF FILE: main\tests.py ---

--- START OF FILE: main\urls.py ---
```py
from django.urls import path
from . import views

app_name = 'main'

urlpatterns = [
    path('', views.home_page_view, name='home_page'),
    path('robots.txt', views.robots_txt_view, name='robots_txt'),
    path('sitemap.xml', views.sitemap_xml_view, name='sitemap_xml'),
]
```
--- END OF FILE: main\urls.py ---

--- START OF FILE: main\views.py ---
```py
from django.shortcuts import render
from django.http import HttpResponse
from django.template.loader import render_to_string
from .models import (
    CompanyProfile, OrbibolInfo, Feature, GameType, Product, GalleryItem,
    BackgroundSettings, Section, CarouselSlide, SEOSettings
)

def home_page_view(request):
    company_profile = CompanyProfile.objects.first()
    seo_settings = SEOSettings.objects.first()

    if company_profile:
        orbibol_info = getattr(company_profile, 'orbibol_info', None)
        features = company_profile.features.all()
        game_types = company_profile.game_types.all()
        products = company_profile.products.all()
        gallery_items = company_profile.gallery_items.all()
        carousel_slides = company_profile.carousel_slides.all()
    else:
        orbibol_info, features, game_types, products, gallery_items, carousel_slides = None, [], [], [], [], []

    background_settings = BackgroundSettings.objects.prefetch_related('background_objects').first()
    sections = Section.objects.filter(is_active=True).order_by('order')

    context = {
        'company_profile': company_profile,
        'seo_settings': seo_settings,
        'orbibol_info': orbibol_info,
        'features': features,
        'game_types': game_types,
        'products': products,
        'gallery_items': gallery_items,
        'background_settings': background_settings,
        'sections': sections,
        'carousel_slides': carousel_slides,
    }
    return render(request, 'main/home_page.html', context)

def robots_txt_view(request):
    lines = [
        "User-Agent: *",
        "Disallow: /admin/",
        f"Sitemap: {request.build_absolute_uri('/sitemap.xml')}"
    ]
    return HttpResponse("\n".join(lines), content_type="text/plain")

def sitemap_xml_view(request):
    context = { 'url': request.build_absolute_uri('/') }
    return HttpResponse(render_to_string('sitemap.xml', context), content_type='application/xml')

# === ИЗМЕНЕНИЯ ЗДЕСЬ ===
def custom_handler404(request, exception):
    context = {
        'company_profile': CompanyProfile.objects.first(),
        'background_settings': BackgroundSettings.objects.prefetch_related('background_objects').first(),
        'seo_settings': SEOSettings.objects.first(), # <-- ДОБАВЛЕНО
    }
    return render(request, "404.html", context, status=404)

def custom_handler500(request):
    context = {
        'company_profile': CompanyProfile.objects.first(),
        'background_settings': BackgroundSettings.objects.prefetch_related('background_objects').first(),
        'seo_settings': SEOSettings.objects.first(), # <-- ДОБАВЛЕНО
    }
    return render(request, "500.html", context, status=500)
```
--- END OF FILE: main\views.py ---

--- START OF FILE: myproject\asgi.py ---
```py
"""
ASGI config for myproject project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')

application = get_asgi_application()

```
--- END OF FILE: myproject\asgi.py ---

--- START OF FILE: myproject\settings.py ---
```py
# START OF FILE: myproject/settings.py
import os
from pathlib import Path
from dotenv import load_dotenv

BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv(BASE_DIR / '.env')
SECRET_KEY = os.environ.get('SECRET_KEY')
DEBUG = os.environ.get('DEBUG', 'False').lower() == 'true'
ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '127.0.0.1,localhost').split(',')

# Приложения Django. Cloudinary отсюда убран.
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'main',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
ROOT_URLCONF = 'myproject.urls'
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'main.context_processors.global_context',
            ],
        },
    },
]
WSGI_APPLICATION = 'myproject.wsgi.application'

# Настройки для локальной базы данных PostgreSQL.
# Данные берутся из .env файла.
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('DB_NAME'),
        'USER': os.environ.get('DB_USER'),
        'PASSWORD': os.environ.get('DB_PASSWORD'),
        'HOST': os.environ.get('DB_HOST', 'localhost'),
        'PORT': os.environ.get('DB_PORT', '5432'),
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]
LANGUAGE_CODE = 'ru-ru'
TIME_ZONE = 'Europe/Moscow'
USE_I18N = True
USE_TZ = True
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Настройки для статических файлов (CSS, JS)
STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_STORAGE = "whitenoise.storage.CompressedStaticFilesStorage"

# Настройки для медиафайлов (загружаемые пользователем картинки)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Блоки STORAGES и CLOUDINARY_STORAGE полностью удалены.

LOG_DIR = BASE_DIR / 'logs'
LOG_DIR.mkdir(exist_ok=True)
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}', 'style': '{',},
        'simple': {'format': '{levelname} {message}', 'style': '{',},
    },
    'handlers': {
        'console': {'level': 'INFO', 'class': 'logging.StreamHandler', 'formatter': 'simple',},
        'file': {
            'level': 'ERROR', 'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOG_DIR / 'django_errors.log', 'maxBytes': 1024 * 1024 * 5,
            'backupCount': 5, 'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {'handlers': ['console', 'file'], 'level': 'INFO', 'propagate': True,},
        'django.request': {'handlers': ['file'], 'level': 'ERROR', 'propagate': False,},
        'main': {'handlers': ['console', 'file'], 'level': 'INFO', 'propagate': True,}
    },
}
```
--- END OF FILE: myproject\settings.py ---

--- START OF FILE: myproject\storages.py ---
```py

from cloudinary_storage.storage import MediaCloudinaryStorage

class RawMediaCloudinaryStorage(MediaCloudinaryStorage):
    """
    Кастомное хранилище для "сырых" файлов (raw files),
    таких как шрифты, в Cloudinary.
    """
    def __init__(self, *args, **kwargs):
        # Устанавливаем тип ресурса как 'raw'
        kwargs['resource_type'] = 'raw'
        super().__init__(*args, **kwargs)
```
--- END OF FILE: myproject\storages.py ---

--- START OF FILE: myproject\urls.py ---
```py
# myproject/urls.py

import os
from django.contrib import admin
from django.urls import path, include

# Мы убрали лишние импорты (re_path, RedirectView, settings, static)

ADMIN_URL = os.environ.get('ADMIN_URL', 'admin/')

urlpatterns = [
    path(ADMIN_URL, admin.site.urls),
    path('', include('main.urls')),
]

# Обработчики ошибок остаются, они нам нужны
handler404 = 'main.views.custom_handler404'
handler500 = 'main.views.custom_handler500'
```
--- END OF FILE: myproject\urls.py ---

--- START OF FILE: myproject\wsgi.py ---
```py
import os
from django.core.wsgi import get_wsgi_application
from whitenoise import WhiteNoise
from django.conf import settings

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')

application = get_wsgi_application()
application = WhiteNoise(application, root=settings.STATIC_ROOT)
```
--- END OF FILE: myproject\wsgi.py ---

--- START OF FILE: myproject\__init__.py ---
```py

```
--- END OF FILE: myproject\__init__.py ---

--- START OF FILE: templates\404.html ---
```html
{% extends "main/base.html" %}
{% load static %}

{% block title %}Страница не найдена (404) - {{ block.super }}{% endblock %}

{% block header %}{# Пустой блок, чтобы не показывать обычное меню на странице ошибки #}{% endblock %}

{% block content %}
<section class="section-error">
    <div class="container">
        <div class="error-code">404</div>
        <h1 class="error-title">Страница не найдена</h1>
        <p class="error-description">
            Кажется, вы свернули не туда. Но не волнуйтесь, даже самые интересные приключения начинаются с неожиданных поворотов.
        </p>
        <a href="{% url 'main:home_page' %}" class="btn">Вернуться на главную</a>
    </div>
</section>
{% endblock %}

{% block footer %}{# И футер тоже скроем #}{% endblock %}
```
--- END OF FILE: templates\404.html ---

--- START OF FILE: templates\500.html ---
```html
{% extends "main/base.html" %}
{% load static %}

{% block title %}Ошибка сервера (500) - {{ block.super }}{% endblock %}

{% block header %}{% endblock %}

{% block content %}
<section class="section-error">
    <div class="container">
        <div class="error-code">500</div>
        <h1 class="error-title">Внутренняя ошибка сервера</h1>
        <p class="error-description">
            Что-то пошло не так на нашей стороне. Мы уже работаем над устранением проблемы. Пожалуйста, попробуйте зайти чуть позже.
        </p>
        <a href="{% url 'main:home_page' %}" class="btn">Вернуться на главную</a>
    </div>
</section>
{% endblock %}

{% block footer %}{% endblock %}
```
--- END OF FILE: templates\500.html ---

--- START OF FILE: templates\base_error.html ---
```html
{% load static %}
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <title>{% block title %}Ошибка | {% if company_profile and company_profile.site_name %}{{ company_profile.site_name }}{% else %}Maybe - Игры и События{% endif %}{% endblock %}</title>
    
    <link rel="shortcut icon" href="{% static 'main/images/favicon.ico' %}" type="image/x-icon">

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700;900&family=Open+Sans:wght@400;700&display=swap" rel="stylesheet">
    
    <link rel="stylesheet" href="{% static 'main/css/style.css' %}">
</head>
<body 
    {% if background_settings %}
        data-background-enabled="true"
        data-pattern-url="{{ background_settings.background_pattern.url|default_if_none:'' }}"
        data-pattern-size="{{ background_settings.pattern_size|default:'200px' }}"
        data-pattern-opacity="{{ background_settings.pattern_opacity|stringformat:'.2f'|cut:',' }}"
        data-bg-color="{{ background_settings.background_color|default:'#010101' }}"
    {% endif %}
>
    
    <div id="animated-background-container">
        <div id="background-pattern"></div>
        {% if background_settings %}
            {% for obj in background_settings.background_objects.all %}
                <div class="background-object-placeholder"
                    data-image-url="{{ obj.image.url }}"
                    data-width="{{ obj.width }}"
                    data-top="{{ obj.initial_top }}"
                    data-left="{{ obj.initial_left }}"
                    data-z-index="{{ obj.z_index }}"
                    data-opacity="{{ obj.opacity|stringformat:'.2f'|cut:',' }}"
                    data-anim-duration="{{ obj.animation_duration }}"
                    data-anim-delay="{{ obj.animation_delay }}"
                    data-parallax-target-id="{{ obj.parallax_target_id|default:'' }}"
                    data-parallax-speed="{{ obj.parallax_speed|stringformat:'.2f'|cut:',' }}"
                ></div>
            {% endfor %}
        {% endif %}
    </div>

    <header id="site-header">
        <div class="container header-container">
            <a href="/" class="logo">
                {# На темном фоне страницы ошибки пытаемся использовать светлый логотип #}
                {% if company_profile.logo_image_light %}
                    <img src="{{ company_profile.logo_image_light.url }}" alt="Логотип Maybe">
                {% elif company_profile.logo_image %}
                    <img src="{% static 'main/images/site_assets/logo.svg' %}" alt="Логотип Maybe">
                {% else %}
                    <img src="{% static 'main/images/logo.png' %}" alt="Логотип Maybe">
                {% endif %}
            </a>
            <div class="header-center-text">May be</div>
            <nav class="main-nav">
                <ul>
                    <li><a href="/#about-us-section">О нас</a></li>
                    <li><a href="/#features-section">Что мы предлагаем</a></li>
                    <li><a href="/#orbibol-section">Орбибол</a></li>
                    <li><a href="/#games-section">Игры</a></li>
                    <li><a href="/#market-section">Маркет</a></li>
                    <li><a href="/#gallery-section">Фото и видео галерея</a></li>
                    <li><a href="/#contacts-section">Контакты</a></li>
                </ul>
            </nav>
        </div>
    </header>

    <main id="main-content">
        {% block content %}
        
        {% endblock %}
    </main>
    
    <footer id="site-footer-bottom">
        <div class="container">
            <p>© {% now "Y" %} {% if company_profile and company_profile.site_name %}{{ company_profile.site_name }}{% else %}Maybe{% endif %}. Все права защищены.</p>
        </div>
    </footer>

    <script src="{% static 'main/js/main.js' %}"></script>
</body>
</html>
```
--- END OF FILE: templates\base_error.html ---

--- START OF FILE: templates\sitemap.xml ---
```xml
<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
   <url>
      <loc>{{ url }}</loc>
      <priority>1.0</priority>
   </url>
</urlset>
```
--- END OF FILE: templates\sitemap.xml ---

--- START OF FILE: .gitignore ---
```
# START OF FILE: .gitignore

# Environments
.env
venv/
env/

# Django
db.sqlite3
*.log
staticfiles/
media/     

# Python
*.pyc
__pycache__/

```
--- END OF FILE: .gitignore ---

--- START OF FILE: build.sh ---
```sh

set -o errexit

pip install -r requirements.txt

# Собираем статику. Теперь команда простая.
python manage.py collectstatic --no-input

# Применяем миграции и создаем суперпользователя.
python manage.py migrate
python manage.py createsuper
```
--- END OF FILE: build.sh ---

--- START OF FILE: manage.py ---
```py
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

```
--- END OF FILE: manage.py ---

