--- START OF FILE: main\management\commands\createsuper.py ---
```py
# main/management/commands/createsuper.py
import os
from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model

User = get_user_model()

class Command(BaseCommand):
    help = 'Creates a superuser from environment variables.'

    def handle(self, *args, **options):
        username = os.environ.get('DJANGO_SUPERUSER_USERNAME')
        email = os.environ.get('DJANGO_SUPERUSER_EMAIL')
        password = os.environ.get('DJANGO_SUPERUSER_PASSWORD')

        if not all([username, email, password]):
            self.stdout.write(self.style.ERROR('Missing superuser environment variables'))
            return

        if not User.objects.filter(username=username).exists():
            self.stdout.write(f'Creating account for {username} ({email})')
            User.objects.create_superuser(email=email, username=username, password=password)
            self.stdout.write(self.style.SUCCESS('Superuser created successfully.'))
        else:
            self.stdout.write(self.style.WARNING('Superuser already exists.'))
```
--- END OF FILE: main\management\commands\createsuper.py ---

--- START OF FILE: main\management\commands\__init__.py ---
```py

```
--- END OF FILE: main\management\commands\__init__.py ---

--- START OF FILE: main\management\__init__.py ---
```py

```
--- END OF FILE: main\management\__init__.py ---

--- START OF FILE: main\migrations\0001_initial.py ---
```py
# Generated by Django 5.2.1 on 2025-06-19 10:01

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название услуги/игры')),
                ('description', models.TextField(verbose_name='Описание')),
                ('vk_link', models.URLField(blank=True, max_length=250, null=True, verbose_name='Ссылка на VK для записи/подробностей')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Порядок отображения')),
            ],
            options={
                'verbose_name': 'Услуга/Игра',
                'verbose_name_plural': 'Услуги и Игры',
                'ordering': ['order'],
            },
        ),
    ]
```
--- END OF FILE: main\migrations\0001_initial.py ---

--- START OF FILE: main\migrations\0002_alter_service_options_alter_service_order_and_more.py ---
```py
# Generated by Django 5.2.1 on 2025-06-19 15:17

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0001_initial'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='service',
            options={'ordering': ['order', 'name'], 'verbose_name': 'Услуга или Игра', 'verbose_name_plural': 'Услуги и Игры'},
        ),
        migrations.AlterField(
            model_name='service',
            name='order',
            field=models.PositiveIntegerField(db_index=True, default=0, verbose_name='Порядок сортировки'),
        ),
        migrations.AlterField(
            model_name='service',
            name='vk_link',
            field=models.URLField(blank=True, max_length=250, null=True, verbose_name='Ссылка на VK'),
        ),
    ]
```
--- END OF FILE: main\migrations\0002_alter_service_options_alter_service_order_and_more.py ---

--- START OF FILE: main\migrations\0003_companyprofile.py ---
```py
# Generated by Django 5.2.1 on 2025-06-19 15:24

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0002_alter_service_options_alter_service_order_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='CompanyProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('site_name', models.CharField(default='Название вашего клуба', max_length=200, verbose_name='Название сайта (в Title)')),
                ('motto', models.CharField(blank=True, max_length=255, verbose_name='Девиз компании')),
                ('about_us_text', models.TextField(blank=True, verbose_name="Текст 'О нас'")),
            ],
            options={
                'verbose_name': 'Профиль компании и настройки сайта',
                'verbose_name_plural': 'Профили компании и настройки сайта',
            },
        ),
    ]
```
--- END OF FILE: main\migrations\0003_companyprofile.py ---

--- START OF FILE: main\migrations\0004_orbibolinfo_companyprofile_contact_address_and_more.py ---
```py
# Generated by Django 5.2.1 on 2025-06-19 19:45

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0003_companyprofile'),
    ]

    operations = [
        migrations.CreateModel(
            name='OrbibolInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('general_info', models.TextField(verbose_name="Общая информация (первый абзац под заголовком 'Орбибол')")),
                ('plot_title', models.CharField(default='Сюжетный орбибол', max_length=100, verbose_name="Заголовок блока 'Сюжетный'")),
                ('plot_description', models.TextField(verbose_name="Описание для 'Сюжетный орбибол'")),
                ('tactical_title', models.CharField(default='Тактический орбибол', max_length=100, verbose_name="Заголовок блока 'Тактический'")),
                ('tactical_description', models.TextField(verbose_name="Описание для 'Тактический орбибол'")),
                ('details_link', models.URLField(blank=True, max_length=250, null=True, verbose_name="Ссылка 'Узнать подробнее'")),
            ],
            options={
                'verbose_name': 'Информация об Орбиболе',
                'verbose_name_plural': 'Информация об Орбиболе',
            },
        ),
        migrations.AddField(
            model_name='companyprofile',
            name='contact_address',
            field=models.TextField(blank=True, null=True, verbose_name='Адрес'),
        ),
        migrations.AddField(
            model_name='companyprofile',
            name='contact_email',
            field=models.EmailField(blank=True, max_length=255, null=True, verbose_name='Контактный Email'),
        ),
        migrations.AddField(
            model_name='companyprofile',
            name='contact_phone',
            field=models.CharField(blank=True, max_length=50, null=True, verbose_name='Контактный Телефон'),
        ),
        migrations.AddField(
            model_name='companyprofile',
            name='telegram_profile_link',
            field=models.URLField(blank=True, max_length=250, null=True, verbose_name='Ссылка на профиль Telegram (для иконки в контактах)'),
        ),
        migrations.AddField(
            model_name='companyprofile',
            name='vk_profile_link',
            field=models.URLField(blank=True, max_length=250, null=True, verbose_name='Ссылка на профиль VK (для иконки в контактах)'),
        ),
        migrations.AddField(
            model_name='companyprofile',
            name='youtube_profile_link',
            field=models.URLField(blank=True, max_length=250, null=True, verbose_name='Ссылка на профиль YouTube (для иконки в контактах)'),
        ),
    ]
```
--- END OF FILE: main\migrations\0004_orbibolinfo_companyprofile_contact_address_and_more.py ---

--- START OF FILE: main\migrations\0005_feature.py ---
```py
# Generated by Django 5.2.1 on 2025-06-19 20:06

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0004_orbibolinfo_companyprofile_contact_address_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Feature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Заголовок преимущества')),
                ('description', models.TextField(verbose_name='Описание преимущества')),
                ('icon', models.FileField(upload_to='feature_icons/', verbose_name='Иконка (SVG или PNG)')),
                ('order', models.PositiveIntegerField(db_index=True, default=0, verbose_name='Порядок отображения')),
            ],
            options={
                'verbose_name': 'Преимущество (Что мы предлагаем)',
                'verbose_name_plural': 'Преимущества (Что мы предлагаем)',
                'ordering': ['order'],
            },
        ),
    ]
```
--- END OF FILE: main\migrations\0005_feature.py ---

--- START OF FILE: main\migrations\0006_gametype.py ---
```py
# Generated by Django 5.2.1 on 2025-06-19 20:46

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0005_feature'),
    ]

    operations = [
        migrations.CreateModel(
            name='GameType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название типа игры')),
                ('description', models.TextField(verbose_name='Краткое описание типа игры')),
                ('icon', models.FileField(upload_to='gametype_icons/', verbose_name='Иконка для типа игры (SVG или PNG)')),
                ('order', models.PositiveIntegerField(db_index=True, default=0, verbose_name='Порядок отображения')),
            ],
            options={
                'verbose_name': "Тип игры (секция 'Игры')",
                'verbose_name_plural': "Типы игр (секция 'Игры')",
                'ordering': ['order'],
            },
        ),
    ]
```
--- END OF FILE: main\migrations\0006_gametype.py ---

--- START OF FILE: main\migrations\0007_alter_service_options_remove_service_description_and_more.py ---
```py
# Generated by Django 5.2.1 on 2025-06-19 21:48

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0006_gametype'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='service',
            options={'ordering': ['order', 'name'], 'verbose_name': 'Игра/Услуга (для Записи на игру)', 'verbose_name_plural': 'Игры/Услуги (для Записи на игру)'},
        ),
        migrations.RemoveField(
            model_name='service',
            name='description',
        ),
        migrations.AddField(
            model_name='service',
            name='detailed_description',
            field=models.TextField(default='Подробное описание скоро появится.', verbose_name='Подробное описание (Когда, Жанры, Цена и т.д.)'),
        ),
        migrations.AddField(
            model_name='service',
            name='image',
            field=models.ImageField(blank=True, null=True, upload_to='service_arts/', verbose_name='Арт для игры (для карусели)'),
        ),
        migrations.AddField(
            model_name='service',
            name='short_description',
            field=models.CharField(blank=True, max_length=255, null=True, verbose_name='Краткое описание/даты (для карусели)'),
        ),
        migrations.AlterField(
            model_name='service',
            name='name',
            field=models.CharField(max_length=200, verbose_name='Название игры/услуги (для Записи на игру)'),
        ),
        migrations.AlterField(
            model_name='service',
            name='vk_link',
            field=models.URLField(blank=True, max_length=250, null=True, verbose_name='Ссылка на VK для записи'),
        ),
    ]
```
--- END OF FILE: main\migrations\0007_alter_service_options_remove_service_description_and_more.py ---

--- START OF FILE: main\migrations\0008_alter_service_image.py ---
```py


from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0007_alter_service_options_remove_service_description_and_more'),
    ]

    operations = [
        migrations.AlterField(
            model_name='service',
            name='image',
            field=models.FileField(blank=True, null=True, upload_to='service_arts/', verbose_name='Арт для игры (для карусели, SVG/PNG)'),
        ),
    ]
```
--- END OF FILE: main\migrations\0008_alter_service_image.py ---

--- START OF FILE: main\migrations\0009_paginationsettings.py ---
```py
# Generated by Django 5.2.1 on 2025-06-20 20:33

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0008_alter_service_image'),
    ]

    operations = [
        migrations.CreateModel(
            name='PaginationSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('diamond_count', models.PositiveIntegerField(default=8, verbose_name='Количество ромбиков')),
                ('diamond_size', models.PositiveIntegerField(default=12, verbose_name='Размер ромбика (в пикселях)')),
                ('active_color', models.CharField(default='#D90C6B', max_length=7, verbose_name='Цвет активного ромбика (HEX)')),
                ('inactive_color', models.CharField(default='#FFFFFF', max_length=7, verbose_name='Цвет неактивного ромбика (HEX)')),
            ],
            options={
                'verbose_name': 'Настройки пагинации карусели',
                'verbose_name_plural': 'Настройки пагинации карусели',
            },
        ),
    ]
```
--- END OF FILE: main\migrations\0009_paginationsettings.py ---

--- START OF FILE: main\migrations\0010_delete_paginationsettings_orbibolinfo_plot_icon_and_more.py ---
```py
# Generated by Django 5.2.1 on 2025-06-20 21:20

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0009_paginationsettings'),
    ]

    operations = [
        migrations.DeleteModel(
            name='PaginationSettings',
        ),
        migrations.AddField(
            model_name='orbibolinfo',
            name='plot_icon',
            field=models.FileField(blank=True, null=True, upload_to='orbibol_icons/', verbose_name='Иконка для "Сюжетный орбибол" (SVG/PNG)'),
        ),
        migrations.AddField(
            model_name='orbibolinfo',
            name='tactical_icon',
            field=models.FileField(blank=True, null=True, upload_to='orbibol_icons/', verbose_name='Иконка для "Тактический орбибол" (SVG/PNG)'),
        ),
    ]

```
--- END OF FILE: main\migrations\0010_delete_paginationsettings_orbibolinfo_plot_icon_and_more.py ---

--- START OF FILE: main\migrations\0011_companyprofile_logo_image_and_more.py ---
```py
# Generated by Django 5.2.1 on 2025-06-20 21:50

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0010_delete_paginationsettings_orbibolinfo_plot_icon_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='companyprofile',
            name='logo_image',
            field=models.FileField(blank=True, null=True, upload_to='site_assets/', verbose_name='Логотип сайта (SVG/PNG)'),
        ),
        migrations.AddField(
            model_name='companyprofile',
            name='telegram_icon',
            field=models.FileField(blank=True, null=True, upload_to='site_assets/', verbose_name='Иконка Telegram (SVG/PNG)'),
        ),
        migrations.AddField(
            model_name='companyprofile',
            name='vk_icon',
            field=models.FileField(blank=True, null=True, upload_to='site_assets/', verbose_name='Иконка VK (SVG/PNG)'),
        ),
        migrations.AddField(
            model_name='companyprofile',
            name='youtube_icon',
            field=models.FileField(blank=True, null=True, upload_to='site_assets/', verbose_name='Иконка YouTube (SVG/PNG)'),
        ),
        migrations.AlterField(
            model_name='companyprofile',
            name='telegram_profile_link',
            field=models.URLField(blank=True, max_length=250, null=True, verbose_name='Ссылка на профиль Telegram'),
        ),
        migrations.AlterField(
            model_name='companyprofile',
            name='vk_profile_link',
            field=models.URLField(blank=True, max_length=250, null=True, verbose_name='Ссылка на профиль VK'),
        ),
        migrations.AlterField(
            model_name='companyprofile',
            name='youtube_profile_link',
            field=models.URLField(blank=True, max_length=250, null=True, verbose_name='Ссылка на профиль YouTube'),
        ),
    ]

```
--- END OF FILE: main\migrations\0011_companyprofile_logo_image_and_more.py ---

--- START OF FILE: main\migrations\0012_product_companyprofile_market_link.py ---
```py
# Generated by Django 5.2.1 on 2025-06-20 22:03

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0011_companyprofile_logo_image_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название товара')),
                ('price', models.PositiveIntegerField(verbose_name='Цена')),
                ('description', models.TextField(verbose_name='Краткое описание товара')),
                ('image', models.FileField(upload_to='product_images/', verbose_name='Изображение товара (SVG/PNG)')),
                ('link', models.URLField(blank=True, null=True, verbose_name='Ссылка на страницу товара')),
                ('order', models.PositiveIntegerField(db_index=True, default=0, verbose_name='Порядок отображения')),
            ],
            options={
                'verbose_name': 'Товар',
                'verbose_name_plural': 'Товары',
                'ordering': ['order'],
            },
        ),
        migrations.AddField(
            model_name='companyprofile',
            name='market_link',
            field=models.URLField(blank=True, max_length=250, null=True, verbose_name='Ссылка "Еще больше товаров" в Маркете'),
        ),
    ]

```
--- END OF FILE: main\migrations\0012_product_companyprofile_market_link.py ---

--- START OF FILE: main\migrations\0013_galleryitem_companyprofile_gallery_description.py ---
```py
# Generated by Django 5.2.1 on 2025-06-20 22:23

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0012_product_companyprofile_market_link'),
    ]

    operations = [
        migrations.CreateModel(
            name='GalleryItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Заголовок (напр. Фотосъемка)')),
                ('image', models.FileField(blank=True, help_text='Загрузите, если это фото.', null=True, upload_to='gallery/', verbose_name='Изображение')),
                ('video', models.FileField(blank=True, help_text='Загрузите, если это видео.', null=True, upload_to='gallery/', verbose_name='Видео (mp4, webm)')),
                ('order_link', models.URLField(verbose_name='Ссылка для кнопки "Заказать"')),
                ('order', models.PositiveIntegerField(db_index=True, default=0, verbose_name='Порядок отображения')),
            ],
            options={
                'verbose_name': 'Элемент галереи',
                'verbose_name_plural': 'Элементы галереи',
                'ordering': ['order'],
            },
        ),
        migrations.AddField(
            model_name='companyprofile',
            name='gallery_description',
            field=models.TextField(blank=True, null=True, verbose_name='Описание для секции "Фото и видео галерея"'),
        ),
    ]

```
--- END OF FILE: main\migrations\0013_galleryitem_companyprofile_gallery_description.py ---

--- START OF FILE: main\migrations\0014_companyprofile_nav_toggle_icon.py ---
```py
# Generated by Django 5.2.1 on 2025-06-20 22:41

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0013_galleryitem_companyprofile_gallery_description'),
    ]

    operations = [
        migrations.AddField(
            model_name='companyprofile',
            name='nav_toggle_icon',
            field=models.FileField(blank=True, null=True, upload_to='site_assets/', verbose_name='Иконка для раскрытия меню (в свернутом хедере)'),
        ),
    ]

```
--- END OF FILE: main\migrations\0014_companyprofile_nav_toggle_icon.py ---

--- START OF FILE: main\migrations\0015_backgroundsettings_backgroundobject.py ---
```py
# Generated by Django 5.2.1 on 2025-06-21 10:42

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0014_companyprofile_nav_toggle_icon'),
    ]

    operations = [
        migrations.CreateModel(
            name='BackgroundSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Основные настройки фона', max_length=100, verbose_name='Название набора настроек')),
                ('background_pattern', models.FileField(blank=True, help_text='Это изображение будет повторяться на фоне.', null=True, upload_to='backgrounds/', verbose_name='Паттерн фона (повторяющееся изображение)')),
                ('pattern_size', models.CharField(default='200px', help_text="CSS значение, например: '200px', '50%', 'cover', 'contain'.", max_length=50, verbose_name='Размер паттерна')),
                ('pattern_opacity', models.DecimalField(decimal_places=2, default=0.1, max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Прозрачность паттерна (от 0.0 до 1.0)')),
                ('background_color', models.CharField(default='rgba(0,0,0,0.5)', help_text="CSS цвет, например: '#000000', 'rgba(0,0,0,0.5)'. Будет поверх паттерна.", max_length=20, verbose_name='Цвет-наложение на фон')),
            ],
            options={
                'verbose_name': 'Настройки фона',
                'verbose_name_plural': 'Настройки фона',
            },
        ),
        migrations.CreateModel(
            name='BackgroundObject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название объекта')),
                ('image', models.FileField(upload_to='backgrounds/objects/', verbose_name='Изображение объекта')),
                ('width', models.PositiveIntegerField(default=150, verbose_name='Ширина объекта (px)')),
                ('initial_top', models.CharField(default='50%', help_text="CSS значение, например '50%' или '100px'", max_length=10, verbose_name='Начальная позиция сверху')),
                ('initial_left', models.CharField(default='50%', help_text="CSS значение, например '50%' или '100px'", max_length=10, verbose_name='Начальная позиция слева')),
                ('animation_duration', models.PositiveIntegerField(default=20, verbose_name='Длительность анимации (секунд)')),
                ('animation_delay', models.PositiveIntegerField(default=0, verbose_name='Задержка перед началом анимации (секунд)')),
                ('opacity', models.DecimalField(decimal_places=2, default=0.5, max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Прозрачность (от 0.0 до 1.0)')),
                ('z_index', models.IntegerField(default=-9, help_text="Чем меньше, тем 'ниже' объект. Паттерн фона на слое -10.", verbose_name='Слой (z-index)')),
                ('order', models.PositiveIntegerField(db_index=True, default=0, verbose_name='Порядок')),
                ('settings', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='objects', to='main.backgroundsettings', verbose_name='Набор настроек')),
            ],
            options={
                'verbose_name': 'Анимированный объект фона',
                'verbose_name_plural': 'Анимированные объекты фона',
                'ordering': ['order'],
            },
        ),
    ]

```
--- END OF FILE: main\migrations\0015_backgroundsettings_backgroundobject.py ---

--- START OF FILE: main\migrations\0016_alter_backgroundobject_settings.py ---
```py
# Generated by Django 5.2.1 on 2025-06-21 10:49

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0015_backgroundsettings_backgroundobject'),
    ]

    operations = [
        migrations.AlterField(
            model_name='backgroundobject',
            name='settings',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='background_objects', to='main.backgroundsettings', verbose_name='Набор настроек'),
        ),
    ]

```
--- END OF FILE: main\migrations\0016_alter_backgroundobject_settings.py ---

--- START OF FILE: main\migrations\0017_backgroundsettings_pattern_animation_duration.py ---
```py
# Generated by Django 5.2.1 on 2025-06-21 16:00

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0016_alter_backgroundobject_settings'),
    ]

    operations = [
        migrations.AddField(
            model_name='backgroundsettings',
            name='pattern_animation_duration',
            field=models.PositiveIntegerField(default=60, help_text="Время полного цикла 'плавания' фона. 0, чтобы отключить.", verbose_name='Длительность анимации паттерна (секунд)'),
        ),
    ]

```
--- END OF FILE: main\migrations\0017_backgroundsettings_pattern_animation_duration.py ---

--- START OF FILE: main\migrations\0018_backgroundsettings_spotlight_enabled_and_more.py ---
```py
# Generated by Django 5.2.1 on 2025-06-21 16:35

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0017_backgroundsettings_pattern_animation_duration'),
    ]

    operations = [
        migrations.AddField(
            model_name='backgroundsettings',
            name='spotlight_enabled',
            field=models.BooleanField(default=True, verbose_name="Включить эффект 'прожектора'"),
        ),
        migrations.AddField(
            model_name='backgroundsettings',
            name='spotlight_size',
            field=models.PositiveIntegerField(default=500, verbose_name='Размер прожектора (px)'),
        ),
        migrations.AlterField(
            model_name='backgroundsettings',
            name='background_color',
            field=models.CharField(default='rgba(1,1,1,0.9)', help_text="CSS цвет, например: '#010101', 'rgba(1,1,1,0.9)'. Будет затемнять паттерн.", max_length=20, verbose_name='Цвет-наложение на фон'),
        ),
        migrations.AlterField(
            model_name='backgroundsettings',
            name='pattern_opacity',
            field=models.DecimalField(decimal_places=2, default=0.3, max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Прозрачность паттерна (от 0.0 до 1.0)'),
        ),
    ]

```
--- END OF FILE: main\migrations\0018_backgroundsettings_spotlight_enabled_and_more.py ---

--- START OF FILE: main\migrations\0019_remove_backgroundsettings_pattern_animation_duration_and_more.py ---
```py
# Generated by Django 5.2.1 on 2025-06-21 17:07

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0018_backgroundsettings_spotlight_enabled_and_more'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='backgroundsettings',
            name='pattern_animation_duration',
        ),
        migrations.RemoveField(
            model_name='backgroundsettings',
            name='spotlight_enabled',
        ),
        migrations.RemoveField(
            model_name='backgroundsettings',
            name='spotlight_size',
        ),
        migrations.AlterField(
            model_name='backgroundsettings',
            name='background_color',
            field=models.CharField(default='#010101', help_text="CSS цвет, например: '#010101'. Будет под паттерном.", max_length=20, verbose_name='Основной цвет фона'),
        ),
    ]

```
--- END OF FILE: main\migrations\0019_remove_backgroundsettings_pattern_animation_duration_and_more.py ---

--- START OF FILE: main\migrations\0020_backgroundobject_parallax_speed_and_more.py ---
```py
# Generated by Django 5.2.1 on 2025-06-21 17:26

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0019_remove_backgroundsettings_pattern_animation_duration_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='backgroundobject',
            name='parallax_speed',
            field=models.FloatField(default=0.3, help_text='Например: 0.2 (медленнее скролла), 1 (вместе со скроллом), -0.5 (в обратную сторону)', verbose_name='Скорость параллакса'),
        ),
        migrations.AddField(
            model_name='backgroundobject',
            name='parallax_target_id',
            field=models.CharField(blank=True, help_text="Например: 'about-us-section'. Оставьте пустым, чтобы отключить параллакс.", max_length=100, null=True, verbose_name='ID секции для параллакс-эффекта'),
        ),
        migrations.AlterField(
            model_name='backgroundobject',
            name='animation_duration',
            field=models.PositiveIntegerField(default=20, help_text="Длительность 'покачивания'. 0 чтобы отключить.", verbose_name='Длительность анимации (секунд)'),
        ),
    ]

```
--- END OF FILE: main\migrations\0020_backgroundobject_parallax_speed_and_more.py ---

--- START OF FILE: main\migrations\0021_service_hover_text.py ---
```py
# Generated by Django 5.2.1 on 2025-06-22 21:22

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0020_backgroundobject_parallax_speed_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='service',
            name='hover_text',
            field=models.TextField(blank=True, help_text='Этот текст появится при наведении на центральный слайд. Если пусто, останется краткое описание.', null=True, verbose_name='Текст при наведении (в карусели)'),
        ),
    ]

```
--- END OF FILE: main\migrations\0021_service_hover_text.py ---

--- START OF FILE: main\migrations\0022_companyprofile_logo_image_light.py ---
```py
# Generated by Django 5.2.1 on 2025-06-23 15:44

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0021_service_hover_text'),
    ]

    operations = [
        migrations.AddField(
            model_name='companyprofile',
            name='logo_image_light',
            field=models.FileField(blank=True, help_text='Светлая версия логотипа для темных фонов (SVG/PNG)', null=True, upload_to='site_assets/', verbose_name='Логотип (светлый)'),
        ),
    ]

```
--- END OF FILE: main\migrations\0022_companyprofile_logo_image_light.py ---

--- START OF FILE: main\migrations\0023_companyprofile_favicon.py ---
```py
# START OF FILE: main/migrations/0023_companyprofile_favicon.py
# Generated by Django 5.2.1 on 2025-07-12 11:30

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0022_companyprofile_logo_image_light'),
    ]

    operations = [
        migrations.AddField(
            model_name='companyprofile',
            name='favicon',
            field=models.FileField(blank=True, help_text='Иконка для вкладки браузера (файл .ico, .png или .svg)', null=True, upload_to='site_assets/', verbose_name='Фавикон'),
        ),
    ]
# END OF FILE: main/migrations/0023_companyprofile_favicon.py
```
--- END OF FILE: main\migrations\0023_companyprofile_favicon.py ---

--- START OF FILE: main\migrations\0024_delete_service.py ---
```py
# Generated by Django 5.2.1 on 2025-07-12 20:53

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0023_companyprofile_favicon'),
    ]

    operations = [
        migrations.DeleteModel(
            name='Service',
        ),
    ]

```
--- END OF FILE: main\migrations\0024_delete_service.py ---

--- START OF FILE: main\migrations\0025_service.py ---
```py
# Generated by Django 5.2.1 on 2025-07-12 21:03

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0024_delete_service'),
    ]

    operations = [
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название игры/услуги')),
                ('short_description', models.CharField(blank=True, max_length=255, verbose_name='Краткое описание (под названием)')),
                ('image', models.FileField(upload_to='service_images/', verbose_name='Изображение (для карточки в карусели)')),
                ('vk_link', models.URLField(blank=True, null=True, verbose_name='Ссылка на VK для записи')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Порядок сортировки')),
            ],
            options={
                'verbose_name': 'Игра/Услуга для карусели',
                'verbose_name_plural': 'Игры/Услуги для карусели',
                'ordering': ['order'],
            },
        ),
    ]

```
--- END OF FILE: main\migrations\0025_service.py ---

--- START OF FILE: main\migrations\__init__.py ---
```py

```
--- END OF FILE: main\migrations\__init__.py ---

--- START OF FILE: main\static\main\css\style.css ---
```css
@font-face {
    font-family: 'SUNDAY';
    
    src: url('../fonts/Sunday-Regular.otf') format('opentype'),
         url('../fonts/Sunday-Regular.ttf') format('truetype');
    font-weight: normal;
    font-style: normal;
    font-display: swap;
}
@font-face {
    font-family: 'FortuneC';
    src: url('../fonts/fortunec_italic.otf') format('opentype'); 
    font-weight: normal;
    font-style: italic;
    font-display: swap;
}
@font-face {
    font-family: 'FortuneC';
    src: url('../fonts/fortunec_bold.otf') format('opentype');
    font-weight: bold;
    font-style: normal;
    font-display: swap;
}
@font-face {
    font-family: 'FortuneC';
    src: url('../fonts/fortunec_bolditalic.otf') format('opentype');
    font-weight: bold;
    font-style: italic;
    font-display: swap;
}


:root {
    --font-sunday: 'SUNDAY', 'Montserrat', sans-serif;       
    --font-fortunec: 'FortuneC', 'Open Sans', sans-serif; 
    --color-white: #FFFFFF;         
    --color-green-accent: #44A56B;   
    --color-green-bg: #1E5C37;      
    --color-green-dark-bg: #14301F; 
    --color-black-bg: #010101;      
    --color-pink-accent: #D90C6B;
    --color-green-accent-rgb: 68, 165, 107;
    --fs-main-slogan: 3.125rem;      
    --fs-about-text: 1.9375rem;       
    --fs-section-title: 2.8125rem;    
    --fs-subsection-title: 1.9375rem; 
    --fs-body: 1.3125rem;             
    --fs-button: 1.3125rem;           
    
    
    --header-padding-normal: 0.8rem;
    --logo-height-normal: 45px;
    --nav-font-size-normal: 1.2rem; 
    
    
    --header-padding-hover: 1.2rem;   
    --logo-height-hover: 80px;        
    --nav-font-size-hover: 1.3125rem; 

    --header-transition-duration: 0.4s; 
}

*, *::before, *::after { box-sizing: border-box; margin: 0; padding: 0; }
html { font-size: 16px; scroll-behavior: smooth; }
body {
    font-family: var(--font-fortunec); font-size: var(--fs-body); font-weight: normal; 
    line-height: 1.6; color: var(--color-white); background-color: var(--color-black-bg);
    -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale;
}
main {
    transition: padding-top var(--header-transition-duration) ease-in-out;
    position: relative; 
    z-index: 1;
    background-color: transparent; 
}
h1, h2, h3, h4, h5, h6 { font-family: var(--font-sunday); font-weight: normal; line-height: 1.2; color: var(--color-white); }
h2 { font-size: var(--fs-section-title); text-transform: uppercase; text-align: center; margin-bottom: 4rem; }
a { color: inherit; text-decoration: none; }
img, video { max-width: 100%; height: auto; display: block; }
ul { list-style: none; }
.container { width: 90%; max-width: 1300px; margin-left: auto; margin-right: auto; padding-left: 15px; padding-right: 15px; }

#animated-background-container {
    position: fixed;
    top: 0; left: 0;
    width: 100%; height: 100%;
    z-index: -10; 
    overflow: hidden; 
    pointer-events: none; 
}
#background-pattern {
    position: absolute;
    top: -10%; left: -10%;
    width: 120%; height: 120%;
    background-repeat: repeat;
    z-index: -2; 
}
.background-object {
    position: absolute;
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center;
}

@keyframes floatAnimation {
    0% { transform: translateY(0px) rotate(0deg); }
    25% { transform: translateY(-20px) rotate(5deg); }
    50% { transform: translateY(0px) rotate(0deg); }
    75% { transform: translateY(20px) rotate(-5deg); }
    100% { transform: translateY(0px) rotate(0deg); }
}


#site-header { 
    padding: var(--header-padding-hover) 0;
    position: fixed; top: 0; left: 0; width: 100%;
    z-index: 1000; background-color: transparent;
    transition: padding var(--header-transition-duration) ease-in-out, background-color var(--header-transition-duration) ease-in-out;
}

#site-header.header-active {
    background-color: var(--color-black-bg);
}

.header-container { display: flex; align-items: center; justify-content: space-between; position: relative;}

#site-header .logo img { 
    height: var(--logo-height-hover);
    transition: height var(--header-transition-duration) ease-in-out; 
}
.main-nav {
    flex-grow: 1; 
    padding: 0 4rem;
}
#site-header .main-nav ul { 
    display: flex;
    flex-wrap: wrap; 
    justify-content: flex-start;
    gap: 0.5rem 3rem; 
    padding: 0;
    transition: opacity var(--header-transition-duration) ease;
}
#site-header .main-nav a {
    font-family: var(--font-fortunec); 
    font-size: var(--nav-font-size-hover);
    font-weight: normal; 
    color: var(--color-white); 
    padding: 0;
    transition: color 0.3s ease;
}
#site-header .main-nav a:hover { color: var(--color-green-accent); }

.header-center-text {
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
    font-family: var(--font-fortunec);
    font-size: var(--nav-font-size-normal);
    opacity: 0;
    pointer-events: none;
    transition: opacity var(--header-transition-duration) ease;
}

#site-header.header-collapsed {
    padding: var(--header-padding-normal) 0;
}
#site-header.header-collapsed .logo img {
    height: var(--logo-height-normal);
}
#site-header.header-collapsed .main-nav ul {
    opacity: 0;
    pointer-events: none;
}
#site-header.header-collapsed .header-center-text {
    opacity: 1;
    pointer-events: all;
}

.section-about-us {
    min-height: 80vh; 
    padding-top: 9rem; 
    padding-bottom: 5rem;
    display: flex;
    flex-direction: column; 
    justify-content: center; 
    align-items: flex-start; 
    text-align: left;
    background-color: transparent; 
    position: relative; 
}
.section-about-us .container {
    width: 100%; 
}
.about-us-content {
    max-width: 65ch; 
    margin: 0; 
}
.about-us-social-icons {
    display: flex;
    justify-content: flex-start;
    gap: 1.5rem;
    margin-bottom: 2rem;
}
.about-us-social-icons img {
    height: 40px;
    width: 40px;
    opacity: 0.8;
    transition: opacity 0.3s ease-in-out;
}
.about-us-social-icons a:hover img {
    opacity: 1;
}

.section-about-us .slogan {
    font-family: var(--font-sunday); 
    font-size: var(--fs-main-slogan); 
    color: var(--color-green-accent); 
    font-weight: normal; 
    text-transform: uppercase; 
    margin-bottom: 2rem; 
    line-height: 1.2;
}
.section-about-us .about-us-text { 
    font-family: var(--font-fortunec); 
    font-size: var(--fs-about-text); 
    font-weight: normal; 
    color: var(--color-white); 
    line-height: 1.7;
    text-align: left; 
    margin: 0;
}
.section-about-us .about-us-text p { margin-bottom: 1em; }
.section-about-us .about-us-text p:last-child { margin-bottom: 0; }

.btn {
    display: inline-block; padding: 0.8em 1.8em; background-color: var(--color-pink-accent); 
    color: var(--color-white); font-family: var(--font-fortunec); font-size: var(--fs-button); font-weight: bold; 
    text-align: center; border: 2px solid var(--color-pink-accent); border-radius: 5px; text-transform: uppercase; 
    transition: background-color 0.3s ease, color 0.3s ease, transform 0.2s ease;
    cursor: pointer; letter-spacing: 0.05em;
}
.btn:hover, .btn:focus {
    background-color: var(--color-white); color: var(--color-pink-accent); border-color: var(--color-pink-accent);
    transform: translateY(-2px); outline: none;
}


main section { 
    padding-top: 5rem; 
    padding-bottom: 5rem; 
    position: relative; 
    background-color: transparent; 
}


.section-features h2 {
    color: var(--color-green-accent); 
    margin-bottom: 5rem;
}

.features-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(450px, 1fr)); 
    gap: 3.5rem 5rem;
}

.feature-item {
    display: flex;
    align-items: center;
    gap: 2rem;
    text-align: left;
}

.feature-icon-wrapper {
    flex-shrink: 0; 
    width: 110px;
    height: 110px;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: rgba(var(--color-green-accent-rgb), 0.1); 
}

.feature-icon-wrapper img {
    max-width: 55px;
    max-height: 55px;
    object-fit: contain;
}

.feature-text-content h3 {
    font-family: var(--font-sunday);
    font-size: var(--fs-subsection-title);
    color: var(--color-green-accent);
    text-transform: uppercase;
    margin-bottom: 0.75rem;
}

.feature-text-content p {
    font-size: 1.3125rem;
    line-height: 1.6;
}


#orbibol-section .container {
    max-width: 800px;
}

#orbibol-section h2 {
    color: var(--color-white);
}

.orbibol-general-info { 
    text-align: center;
    max-width: 65ch;
    margin: 0 auto 3.5rem auto;
    font-size: 1.25rem;
    line-height: 1.7;
}

.orbibol-content-wrapper {
    display: flex;
    flex-direction: column;
    gap: 3rem; 
    margin-bottom: 3rem; 
}

.orbibol-item {
    display: flex;
    align-items: center;
    gap: 2rem; 
    text-align: left;
}

.orbibol-icon-wrapper {
    flex-shrink: 0;
    width: 100px;
    height: 100px;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
}

.orbibol-icon-wrapper img {
    max-width: 50px;
    max-height: 50px;
    object-fit: contain;
}

.orbibol-text-content h3 {
    font-family: var(--font-sunday);
    font-size: 1.8rem;
    color: var(--color-white);
    text-transform: uppercase;
    margin-bottom: 0.5rem;
}

.orbibol-text-content p {
    font-size: 1.1rem;
    line-height: 1.6;
}

.orbibol-details-link {
    display: inline-block;
    color: var(--color-green-accent);
    font-family: var(--font-sunday);
    font-size: 1.25rem;
    text-transform: uppercase;
    text-decoration: none;
    letter-spacing: 0.05em;
    transition: color 0.3s ease;
}

.orbibol-details-link:hover {
    color: var(--color-white);
}

.text-center { 
    text-align: center;
}

.section-games {} 
.section-games h2 {
    color: var(--color-white); 
}

.games-grid { 
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(450px, 1fr)); 
    gap: 3.5rem 5rem;
}

.game-type-item {
    display: flex;
    align-items: center;
    gap: 2rem;
    text-align: left;
    color: var(--color-white);
    background-color: transparent;
    padding: 0;
    border-radius: 0;
}

.game-type-item .game-type-icon-wrapper {
    flex-shrink: 0;
    width: 110px; 
    height: 110px; 
    background-color: rgba(var(--color-green-accent-rgb), 0.1);
    border-radius: 50%; 
    display: flex; 
    justify-content: center; 
    align-items: center;
    margin-bottom: 0;
}

.game-type-item .game-type-icon-wrapper img { 
    max-height: 55px; 
    max-width: 55px;
    object-fit: contain;
}

.game-type-item .game-type-text-content h3 {
    font-family: var(--font-sunday);
    font-size: var(--fs-subsection-title);
    font-weight: normal;
    color: var(--color-green-accent);
    margin-bottom: 0.75rem;
    text-transform: uppercase;
}

.game-type-item .game-type-text-content p {
    font-size: 1.1rem;
    line-height: 1.6;
    color: var(--color-white);
}


#market-section h2 {
    color: var(--color-white);
    margin-bottom: 5rem;
}

.market-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 3rem;
    margin-bottom: 4rem;
}

.product-card {
    text-align: center;
    color: var(--color-white);
    text-decoration: none;
    transition: transform 0.3s ease;
}
.product-card:hover {
    transform: translateY(-5px);
}

.product-image-wrapper {
    width: 250px;
    height: 250px;
    border-radius: 50%;
    overflow: hidden;
    margin: 0 auto 1.5rem auto;
}

.product-image-wrapper img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.product-title {
    font-family: var(--font-fortunec);
    font-weight: bold;
    font-size: 1.5rem;
    margin-bottom: 0.5rem;
}

.product-price {
    font-family: var(--font-sunday);
    font-size: 3.3125rem;
    color: var(--color-green-accent);
    margin-bottom: 1rem;
}

.product-description {
    font-size: 1.1rem;
    line-height: 1.5;
    max-width: 35ch;
    margin: 0 auto;
}

.market-more-link {
    display: block;
    text-align: center;
    font-family: var(--font-sunday);
    font-size: 1.25rem;
    color: var(--color-green-accent);
    text-decoration: none;
    transition: color 0.3s ease;
}
.market-more-link:hover {
    color: var(--color-white);
    text-decoration: underline;
}



#gallery-section h2 {
    color: var(--color-white);
}
.gallery-description {
    text-align: center;
    max-width: 65ch;
    margin: 0 auto 4rem auto;
    font-size: 1.25rem;
    line-height: 1.7;
}
.gallery-grid {
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    gap: 8rem;
    align-items: flex-start;
}
.gallery-item {
    text-align: center;
}
.gallery-item h3 {
    font-family: var(--font-sunday);
    font-weight: normal;
    text-transform: uppercase;
    font-size: 2.5rem;
    color: var(--color-white);
    margin-bottom: 2rem;
}
.gallery-content-link {
    display: inline-block;
    text-decoration: none;
}
.gallery-content-link:hover .gallery-media-wrapper {
    transform: scale(1.05);
    box-shadow: 0 0 25px rgba(var(--color-green-accent-rgb), 0.5);
}
.gallery-content-link:hover .gallery-order-link {
    color: var(--color-white);
}
.gallery-media-wrapper {
    width: 300px;
    height: 300px;
    border-radius: 50%;
    overflow: hidden;
    margin: 0 auto;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}
.gallery-media-wrapper img,
.gallery-media-wrapper video {
    width: 100%;
    height: 100%;
    object-fit: cover;
}
.gallery-order-link {
    display: inline-block;
    margin-top: 2rem;
    font-family: var(--font-sunday);
    font-size: 2rem;
    color: var(--color-green-accent);
    text-transform: uppercase;
    transition: color 0.3s ease;
    text-decoration: none;
}



.section-contacts {} 
.section-contacts h2 {}
.section-contacts p { margin-bottom: 0.75rem; }
.section-contacts a { color: var(--color-green-accent); text-decoration: underline; }
.section-contacts a:hover { text-decoration: none; }

.social-icons-footer {
    display: flex;
    justify-content: center;
    gap: 1.5rem;
    margin-top: 2rem;
}
.social-icons-footer a {
    text-decoration: none;
}
.social-icons-footer img {
    height: 30px;
    width: 30px;
    opacity: 0.7;
    transition: opacity 0.3s ease;
}
.social-icons-footer a:hover img {
    opacity: 1;
}



#site-footer-bottom {
    padding: 2rem 0; text-align: center; font-size: 0.9rem;
    background-color: var(--color-green-dark-bg); 
    color: rgba(255,255,255,0.7);
    position: relative; 
    z-index: 10;
}

/* Error Pages Styles */
.section-error {
    min-height: 80vh; 
    padding-top: 12rem; 
    padding-bottom: 5rem;
    display: flex;
    flex-direction: column; 
    justify-content: center; 
    align-items: center; 
    text-align: center;
    background-color: transparent; 
    position: relative; 
}

.error-code {
    font-family: var(--font-sunday);
    font-size: 10rem;
    color: var(--color-pink-accent);
    line-height: 1;
    margin-bottom: 1rem;
}

.error-title {
    font-family: var(--font-sunday);
    font-size: var(--fs-section-title);
    text-transform: uppercase;
    color: var(--color-white);
    margin-bottom: 2rem;
}

.error-description {
    font-family: var(--font-fortunec);
    font-size: var(--fs-body);
    color: var(--color-white);
    line-height: 1.7;
    max-width: 60ch;
    margin: 0 auto 3rem auto;
}

/* === СТИЛИ ДЛЯ КАРУСЕЛИ === */
#booking-section {
    position: relative;
    padding: 4rem 0;
    overflow: hidden;
}

.booking-swiper {
    width: 100%;
    height: 550px; 
    overflow: visible;
}

.booking-swiper .swiper-wrapper {
    display: flex !important; /* Гарантируем flex-контейнер */
    flex-direction: row !important; /* Гарантируем в один ряд */
    flex-wrap: nowrap !important; /* Запрещаем перенос */
    align-items: center !important; /* Выравнивание по центру */
    height: 100% !important; /* Гарантируем высоту */
}

.booking-swiper .swiper-slide {
    width: 440px;
    height: 440px;
    transform: scale(0.65);
    opacity: 0.6;
    transition: transform 0.4s ease, opacity 0.4s ease;
    margin: 0 -40px;
    
    position: relative; 
}

.booking-swiper .swiper-slide-active {
    transform: scale(1.1);
    opacity: 1;
    z-index: 1;
}

.booking-slide-link {
    display: block; 
    width: 100%;
    height: 100%;
    position: relative;
    border-radius: 50%;
    overflow: hidden;
    background-color: #222;
    /* ИЗМЕНЕНИЕ: По умолчанию некликабелен */
    pointer-events: none !important; 
}

/* ИЗМЕНЕНИЕ: Активный слайд - кликабелен */
.swiper-slide-active .booking-slide-link {
    pointer-events: auto !important; 
}

.booking-slide-art, .booking-slide-placeholder {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
}

.booking-slide-placeholder {
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 2rem;
    color: #888;
}

/* Оверлей с текстом */
.booking-slide-info {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.75); 
    color: #fff;
    
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
    padding: 20px;
    
    /* ИЗМЕНЕНИЕ: По умолчанию невидим и некликабелен */
    opacity: 0 !important; 
    pointer-events: none !important; 
    transition: opacity 0.3s ease;
}

/* ИЗМЕНЕНИЕ: Показываем текст ТОЛЬКО на активном слайде */
.swiper-slide-active .booking-slide-info {
    opacity: 1 !important;
    pointer-events: auto !important; 
}

/* Ховер-эффект на активном слайде */
.swiper-slide-active .booking-slide-link:hover .booking-slide-art {
    transform: scale(1.1); 
}
.swiper-slide-active .booking-slide-link:hover .booking-slide-info {
    background: rgba(0, 0, 0, 0.9);
}

/* Текстовые стили */
.booking-slide-title {
    font-family: var(--font-sunday);
    font-size: 2.5rem;
    margin-bottom: 10px;
}
.booking-slide-description {
    font-family: var(--font-fortunec);
    font-size: 1.1rem;
    opacity: 0.9;
}

/* АГРЕССИВНО СКРЫВАЕМ СТАНДАРТНУЮ ПАГИНАЦИЮ SWIPER */
.swiper-pagination,
.swiper-pagination-fraction,
.swiper-pagination-bullets,
.swiper-pagination-progressbar {
    display: none !important;
    visibility: hidden !important;
    height: 0 !important;
    width: 0 !important;
    overflow: hidden !important;
}

/* СТИЛИ ДЛЯ НАШЕЙ КАСТОМНОЙ ПАГИНАЦИИ */
.custom-pagination {
    text-align: center;
    margin-top: 1rem; 
    position: relative;
    z-index: 10;
}

.custom-pagination-bullet {
    display: inline-block;
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background: #fff;
    opacity: 0.4;
    margin: 0 6px;
    cursor: pointer;
    transition: opacity 0.3s, background-color 0.3s;
}

.custom-pagination-bullet-active {
    background: var(--color-pink-accent);
    opacity: 1;
}

/* Стрелки */
.booking-swiper .swiper-button-prev,
.booking-swiper .swiper-button-next {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    width: 44px;
    height: 44px;
    color: var(--color-white);
    z-index: 20;
}
.booking-swiper .swiper-button-prev::after,
.booking-swiper .swiper-button-next::after {
    font-size: 2rem;
}


/* Медиа-запросы */
@media (max-width: 1100px) {
    .features-grid,
    .games-grid {
        grid-template-columns: 1fr;
        gap: 3rem;
    }
}

@media (max-width: 992px) {
    .main-nav {
        display: none; 
    }
}

@media (max-width: 768px) {
    .about-us-content {
        padding: 0 15px; 
    }
    .orbibol-item {
        flex-direction: column;
        text-align: center;
        gap: 1.5rem;
    }

    .error-code {
        font-size: 8rem;
    }
    .error-title {
        font-size: 2.2rem;
    }

    .booking-swiper .swiper-slide {
        width: 300px;
        height: 300px; /* Фиксируем высоту круга */
        transform: scale(0.7);
        margin: 0 -20px;
    }
    .booking-swiper .swiper-slide-active {
        transform: scale(1);
    }
    .booking-swiper {
        height: 350px; /* Подстраиваем высоту контейнера под мобильный размер */
    }
}

@media (max-width: 576px) {
    .features-grid,
    .games-grid {
        display: flex;
        flex-direction: column;
    }

    .feature-item,
    .game-type-item {
        flex-direction: column;
        text-align: center;
    }

    .section-features h2 {
        margin-bottom: 3rem;
    }
}
```
--- END OF FILE: main\static\main\css\style.css ---

--- START OF FILE: main\static\main\js\main.js ---
```js
document.addEventListener('DOMContentLoaded', function() {
    
    function setupHeader() {
        const siteHeader = document.getElementById('site-header');
        if (!siteHeader) return;
        const scrollThreshold = 100;
        const activeThreshold = 10;

        function handleScroll() {
            const scrollY = window.scrollY;
            siteHeader.classList.toggle('header-active', scrollY > activeThreshold);
            siteHeader.classList.toggle('header-collapsed', scrollY > scrollThreshold);
        }
    
        window.addEventListener('scroll', handleScroll, { passive: true });
        
        siteHeader.addEventListener('mouseenter', () => {
            siteHeader.classList.add('header-active');
            siteHeader.classList.remove('header-collapsed');
        });
    
        siteHeader.addEventListener('mouseleave', () => {
             handleScroll();
        });
        
        handleScroll();
    }

    function setupDynamicBackground() {
        const body = document.body;
        const settings = body.dataset;
        if (settings.backgroundEnabled !== 'true') return;

        const bgContainer = document.getElementById('animated-background-container');
        if (!bgContainer) return;

        const patternEl = document.getElementById('background-pattern');
        if (patternEl) {
            body.style.backgroundColor = settings.bgColor;
            if (settings.patternUrl) {
                patternEl.style.backgroundImage = `url('${settings.patternUrl}')`;
                patternEl.style.backgroundSize = settings.patternSize;
                patternEl.style.opacity = settings.patternOpacity;
            }
        }
        
        const objectPlaceholders = document.querySelectorAll('.background-object-placeholder');
        const parallaxObjects = [];

        objectPlaceholders.forEach(placeholder => {
            const data = placeholder.dataset;
            const objDiv = document.createElement('div');
            objDiv.className = 'background-object';
            
            objDiv.style.backgroundImage = `url('${data.imageUrl}')`;
            objDiv.style.width = `${data.width}px`;
            objDiv.style.height = `${data.width}px`;
            objDiv.style.top = data.top;
            objDiv.style.left = data.left;
            objDiv.style.zIndex = data.zIndex;
            objDiv.style.opacity = data.opacity;
            
            if (data.parallaxTargetId) {
                objDiv.style.position = 'absolute';
                parallaxObjects.push({
                    element: objDiv,
                    speed: parseFloat(data.parallaxSpeed) || 0,
                    initialTop: parseFloat(data.top)
                });
            } else {
                objDiv.style.position = 'fixed';
                const animDuration = parseInt(data.animDuration, 10);
                if (animDuration > 0) {
                    objDiv.style.animation = `floatAnimation ${animDuration}s ease-in-out ${data.animDelay || 0}s infinite`;
                }
            }

            bgContainer.appendChild(objDiv);
            placeholder.remove();
        });

        if (parallaxObjects.length > 0) {
            function handleParallax() {
                const scrollY = window.scrollY;
                parallaxObjects.forEach(obj => {
                    const translateY = obj.initialTop + (-scrollY * obj.speed / 10);
                    obj.element.style.transform = `translate(-50%, ${translateY}%)`;
                });
            }
            window.addEventListener('scroll', handleParallax, { passive: true });
            handleParallax(); 
        }
    }

    function setupSwiper() {
        const swiperContainer = document.querySelector('.booking-swiper');
        if (swiperContainer) {
            const slides = swiperContainer.querySelectorAll('.swiper-slide');
            const customPaginationBullets = document.querySelectorAll('.custom-pagination-bullet');
            
            const mySwiper = new Swiper(swiperContainer, {
                loop: true,
                centeredSlides: true,
                slidesPerView: 'auto',
                loopAdditionalSlides: slides.length,
                
                // ИЗМЕНЕНИЕ: Устанавливаем нужное расстояние
                spaceBetween: 15,
                
                pagination: false, 

                navigation: {
                  nextEl: '.swiper-button-next',
                  prevEl: '.swiper-button-prev',
                },

                on: {
                    slideChange: function () {
                        let currentIndex = this.realIndex;
                        customPaginationBullets.forEach((bullet, index) => {
                            if (index === currentIndex) {
                                bullet.classList.add('custom-pagination-bullet-active');
                            } else {
                                bullet.classList.remove('custom-pagination-bullet-active');
                            }
                        });
                    },
                },
            });

            if (customPaginationBullets.length > 0) {
                 customPaginationBullets[mySwiper.realIndex].classList.add('custom-pagination-bullet-active');
            }
        }
    }

    setupHeader();
    setupDynamicBackground();
    setupSwiper();
});
```
--- END OF FILE: main\static\main\js\main.js ---

--- START OF FILE: main\templates\main\base.html ---
```html
{% load static %}
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}{% if company_profile.site_name %}{{ company_profile.site_name }}{% else %}Maybe - Игры и События{% endif %}{% endblock %}</title>
    
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700;900&family=Open+Sans:wght@400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="{% static 'main/css/style.css' %}">
    <link rel="stylesheet" href="https://unpkg.com/swiper/swiper-bundle.min.css" />
</head>
<body {% if background_settings %}data-background-enabled="true" data-pattern-url="{% if background_settings.background_pattern %}{{ background_settings.background_pattern.url }}{% endif %}" data-pattern-size="{{ background_settings.pattern_size|default:'200px' }}" data-pattern-opacity="{{ background_settings.pattern_opacity|stringformat:'.2f'|cut:',' }}" data-bg-color="{{ background_settings.background_color|default:'#010101' }}"{% endif %}>
    <div id="animated-background-container"><div id="background-pattern"></div>{% if background_settings %}{% for obj in background_settings.background_objects.all %}<div class="background-object-placeholder" data-image-url="{{ obj.image.url }}" data-width="{{ obj.width }}" data-top="{{ obj.initial_top }}" data-left="{{ obj.initial_left }}" data-z-index="{{ obj.z_index }}" data-opacity="{{ obj.opacity|stringformat:'.2f'|cut:',' }}" data-anim-duration="{{ obj.animation_duration }}" data-anim-delay="{{ obj.animation_delay }}" data-parallax-target-id="{{ obj.parallax_target_id|default:'' }}" data-parallax-speed="{{ obj.parallax_speed|stringformat:'.2f'|cut:',' }}"></div>{% endfor %}{% endif %}</div>
    {% block header %}<header id="site-header"><div class="container header-container"><a href="/" class="logo">{% if company_profile and company_profile.logo_image %}<img src="{{ company_profile.logo_image.url }}" alt="Логотип Maybe">{% endif %}</a><div class="header-center-text">May be</div><nav class="main-nav"><ul><li><a href="/#about-us-section">О нас</a></li><li><a href="/#features-section">Что мы предлагаем</a></li><li><a href="/#booking-section">Запись на игру</a></li><li><a href="/#orbibol-section">Орбибол</a></li><li><a href="/#games-section">Игры</a></li><li><a href="/#market-section">Маркет</a></li><li><a href="/#gallery-section">Фото и видео галерея</a></li><li><a href="/#contacts-section">Контакты</a></li></ul></nav></div></header>{% endblock header %}
    <main id="main-content">{% block content %}{% endblock %}</main>
    {% block footer %}<footer id="site-footer-bottom"><div class="container"><p>© {% now "Y" %} {% if company_profile.site_name %}{{ company_profile.site_name }}{% else %}Maybe{% endif %}. Все права защищены.</p></div></footer>{% endblock footer %}
    <script src="https://unpkg.com/swiper/swiper-bundle.min.js"></script><script src="{% static 'main/js/main.js' %}"></script>
</body>
</html>
```
--- END OF FILE: main\templates\main\base.html ---

--- START OF FILE: main\templates\main\home_page.html ---
```html
{% extends "main/base.html" %}
{% load static %}

{% block content %}
    
    <!-- 1. СЕКЦИЯ "О НАС" -->
    <section id="about-us-section" class="section-about-us">
        <div class="container">
            <div class="about-us-content">
                {% if company_profile %}
                    <div class="about-us-social-icons">
                        {% if company_profile.vk_profile_link and company_profile.vk_icon %}
                            <a href="{{ company_profile.vk_profile_link }}" target="_blank" rel="noopener noreferrer">
                                <img src="{{ company_profile.vk_icon.url }}" alt="VK">
                            </a>
                        {% endif %}
                        {% if company_profile.youtube_profile_link and company_profile.youtube_icon %}
                            <a href="{{ company_profile.youtube_profile_link }}" target="_blank" rel="noopener noreferrer">
                                <img src="{{ company_profile.youtube_icon.url }}" alt="YouTube">
                            </a>
                        {% endif %}
                        {% if company_profile.telegram_profile_link and company_profile.telegram_icon %}
                            <a href="{{ company_profile.telegram_profile_link }}" target="_blank" rel="noopener noreferrer">
                                <img src="{{ company_profile.telegram_icon.url }}" alt="Telegram">
                            </a>
                        {% endif %}
                    </div>
                    <h1 class="slogan">{{ company_profile.motto|safe }}</h1>
                    <div class="about-us-text">{{ company_profile.about_us_text|safe|linebreaks }}</div>
                {% else %}
                    <h1 class="slogan">Девиз не задан</h1>
                    <p class="about-us-text">Текст 'О нас' не заполнен в админ-панели.</p>
                {% endif %}
            </div>
        </div>
    </section>

    <!-- 2. СЕКЦИЯ "ЧТО МЫ ПРЕДЛАГАЕМ" -->
    <section id="features-section" class="section-features">
        <div class="container">
            <h2>Что мы предлагаем</h2>
            <div class="features-grid">
                {% for feature in features %}
                    <div class="feature-item">
                        <div class="feature-icon-wrapper">
                            {% if feature.icon %}
                                <img src="{{ feature.icon.url }}" alt="{{ feature.title }}">
                            {% endif %}
                        </div>
                        <div class="feature-text-content">
                            <h3>{{ feature.title }}</h3>
                            <p>{{ feature.description }}</p>
                        </div>
                    </div>
                {% empty %}
                    <p>Преимущества не добавлены в админ-панели.</p>
                {% endfor %}
            </div>
        </div>
    </section>

    <!-- 3. СЕКЦИЯ "ЗАПИСЬ НА ИГРУ" -->
    <section id="booking-section">
        <div class="container">
            <h2>Запись на игру</h2>
            
            <div class="swiper booking-swiper">
                <div class="swiper-wrapper">
                    
                    {# Основной цикл #}
                    {% for service in services %}
                    <div class="swiper-slide">
                        <a href="{{ service.vk_link|default:'#' }}" class="booking-slide-link" target="_blank" rel="noopener noreferrer">
                             {% if service.image %}
                                <img src="{{ service.image.url }}" alt="{{ service.name }}" class="booking-slide-art">
                            {% else %}
                                <div class="booking-slide-placeholder">Арт</div>
                            {% endif %}
                           
                            <div class="booking-slide-info">
                                <h3 class="booking-slide-title">{{ service.name }}</h3>
                                {% if service.short_description %}
                                <p class="booking-slide-description">{{ service.short_description }}</p>
                                {% endif %}
                            </div>
                        </a>
                    </div>
                    {% endfor %}

                    {# Хак для зацикливания #}
                    {% if services|length > 0 and services|length < 4 %}
                        {% for service in services %}
                        <div class="swiper-slide">
                            <a href="{{ service.vk_link|default:'#' }}" class="booking-slide-link" target="_blank" rel="noopener noreferrer">
                                 {% if service.image %}
                                    <img src="{{ service.image.url }}" alt="{{ service.name }}" class="booking-slide-art">
                                {% else %}
                                    <div class="booking-slide-placeholder">Арт</div>
                                {% endif %}
                               
                                <div class="booking-slide-info">
                                    <h3 class="booking-slide-title">{{ service.name }}</h3>
                                    {% if service.short_description %}
                                    <p class="booking-slide-description">{{ service.short_description }}</p>
                                    {% endif %}
                                </div>
                            </a>
                        </div>
                        {% endfor %}
                    {% endif %}

                </div>
                <!-- Стрелки удалены из HTML -->
                <!-- <div class="swiper-button-prev"></div> -->
                <!-- <div class="swiper-button-next"></div> -->
            </div>

            <!-- Кастомная пагинация удалена из HTML -->
            <!-- <div class="custom-pagination"> -->
            <!--     {% for service in services %} -->
            <!--         <span class="custom-pagination-bullet"></span> -->
            <!--     {% endfor %} -->
            <!-- </div> -->

        </div>
    </section>

    <!-- 4. СЕКЦИЯ "ОРБИБОЛ" -->
    <section id="orbibol-section">
        <div class="container">
            <h2>Орбибол</h2>
            {% if orbibol_info %}
                <p class="orbibol-general-info">{{ orbibol_info.general_info|linebreaksbr }}</p>
                <div class="orbibol-content-wrapper">
                    <div class="orbibol-item">
                        <div class="orbibol-icon-wrapper">
                            {% if orbibol_info.plot_icon %}<img src="{{ orbibol_info.plot_icon.url }}" alt="">{% endif %}
                        </div>
                        <div class="orbibol-text-content">
                            <h3>{{ orbibol_info.plot_title }}</h3>
                            <p>{{ orbibol_info.plot_description }}</p>
                        </div>
                    </div>
                    <div class="orbibol-item">
                        <div class="orbibol-icon-wrapper">
                            {% if orbibol_info.tactical_icon %}<img src="{{ orbibol_info.tactical_icon.url }}" alt="">{% endif %}
                        </div>
                        <div class="orbibol-text-content">
                            <h3>{{ orbibol_info.tactical_title }}</h3>
                            <p>{{ orbibol_info.tactical_description }}</p>
                        </div>
                    </div>
                </div>
                {% if orbibol_info.details_link %}
                    <div class="text-center">
                        <a href="{{ orbibol_info.details_link }}" target="_blank" rel="noopener noreferrer" class="orbibol-details-link">Узнать подробнее</a>
                    </div>
                {% endif %}
            {% endif %}
        </div>
    </section>

    <!-- 5. СЕКЦИЯ "ИГРЫ" -->
    <section id="games-section" class="section-games">
        <div class="container">
            <h2>Игры</h2>
            <div class="games-grid">
                {% for type in game_types %}
                    <div class="game-type-item">
                        <div class="game-type-icon-wrapper">
                            {% if type.icon %}<img src="{{ type.icon.url }}" alt="{{ type.name }}">{% endif %}
                        </div>
                        <div class="game-type-text-content">
                            <h3>{{ type.name }}</h3>
                            <p>{{ type.description }}</p>
                        </div>
                    </div>
                {% empty %}
                    <p>Типы игр не добавлены.</p>
                {% endfor %}
            </div>
        </div>
    </section>

    <!-- 6. СЕКЦИЯ "МАРКЕТ" -->
    <section id="market-section">
        <div class="container">
            <h2>Маркет</h2>
            <div class="market-grid">
                {% for product in products %}
                    <a href="{{ product.link|default:'#' }}" class="product-card" target="_blank" rel="noopener noreferrer">
                        <div class="product-image-wrapper">
                            {% if product.image %}<img src="{{ product.image.url }}" alt="{{ product.name }}">{% endif %}
                        </div>
                        <h3 class="product-title">{{ product.name }}</h3>
                        <div class="product-price">{{ product.price }} ₽</div>
                        <p class="product-description">{{ product.description }}</p>
                    </a>
                {% empty %}
                     <p>Товары не добавлены.</p>
                {% endfor %}
            </div>
            {% if company_profile.market_link %}
                <a href="{{ company_profile.market_link }}" class="market-more-link" target="_blank" rel="noopener noreferrer">Еще больше товаров в нашем маркете</a>
            {% endif %}
        </div>
    </section>

    <!-- 7. СЕКЦИЯ "ГАЛЕРЕЯ" -->
    <section id="gallery-section">
        <div class="container">
            <h2>Фото и видео галерея</h2>
            {% if company_profile.gallery_description %}
                <p class="gallery-description">{{ company_profile.gallery_description }}</p>
            {% endif %}
            <div class="gallery-grid">
                {% for item in gallery_items %}
                    <div class="gallery-item">
                        <h3>{{ item.title }}</h3>
                        <a href="{{ item.order_link }}" target="_blank" rel="noopener noreferrer" class="gallery-content-link">
                            <div class="gallery-media-wrapper">
                                {% if item.image %}
                                    <img src="{{ item.image.url }}" alt="{{ item.title }}">
                                {% elif item.video %}
                                    <video src="{{ item.video.url }}" autoplay muted loop playsinline></video>
                                {% endif %}
                            </div>
                        </a>
                        <a href="{{ item.order_link }}" target="_blank" rel="noopener noreferrer" class="gallery-order-link">Заказать</a>
                    </div>
                {% empty %}
                    <p>Элементы галереи не добавлены.</p>
                {% endfor %}
            </div>
        </div>
    </section>
    
    <!-- 8. СЕКЦИЯ "КОНТАКТЫ" -->
    <section id="contacts-section" class="section-contacts text-center">
        <div class="container">
            <h2>Контакты</h2>
            {% if company_profile %}
                <p><strong>Адрес:</strong><br>{{ company_profile.contact_address|linebreaksbr }}</p>
                <p><strong>Телефон:</strong><br><a href="tel:{{ company_profile.contact_phone }}">{{ company_profile.contact_phone }}</a></p>
                <p><strong>Email:</strong><br><a href="mailto:{{ company_profile.contact_email }}">{{ company_profile.contact_email }}</a></p>
                
                <div class="social-icons-footer">
                     {% if company_profile.vk_profile_link and company_profile.vk_icon %}
                        <a href="{{ company_profile.vk_profile_link }}" target="_blank" rel="noopener noreferrer">
                            <img src="{{ company_profile.vk_icon.url }}" alt="VK">
                        </a>
                    {% endif %}
                    {% if company_profile.youtube_profile_link and company_profile.youtube_icon %}
                        <a href="{{ company_profile.youtube_profile_link }}" target="_blank" rel="noopener noreferrer">
                            <img src="{{ company_profile.youtube_icon.url }}" alt="YouTube">
                        </a>
                    {% endif %}
                    {% if company_profile.telegram_profile_link and company_profile.telegram_icon %}
                        <a href="{{ company_profile.telegram_profile_link }}" target="_blank" rel="noopener noreferrer">
                            <img src="{{ company_profile.telegram_icon.url }}" alt="Telegram">
                        </a>
                    {% endif %}
                </div>
            {% endif %}
        </div>
    </section>

{% endblock %}
```
--- END OF FILE: main\templates\main\home_page.html ---

--- START OF FILE: main\__init__.py ---
```py

```
--- END OF FILE: main\__init__.py ---

--- START OF FILE: main\admin.py ---
```py
from django.contrib import admin
from django.utils.html import mark_safe
from .models import (
    Service,
    CompanyProfile, OrbibolInfo, Feature, GameType, Product, GalleryItem,
    BackgroundSettings, BackgroundObject
)

class ImagePreviewAdminMixin:
    """
    Миксин для добавления предпросмотра изображений в админ-панели Django.
    """
    def get_preview(self, obj, field_name, max_height=100, is_background=False):
        """Возвращает HTML для предпросмотра."""
        field = getattr(obj, field_name, None)
        if field and hasattr(field, 'url'):
            if is_background:
                 return mark_safe(f'<div style="width:{max_height}px; height:{max_height}px; background-image:url({field.url}); background-size: cover; border: 1px solid #ddd;"></div>')
            return mark_safe(f'<img src="{field.url}" style="max-height: {max_height}px; max-width: {max_height*2}px;" />')
        return "Нет изображения"

@admin.register(Service)
class ServiceAdmin(ImagePreviewAdminMixin, admin.ModelAdmin):
    list_display = ('name', 'order', 'image_preview')
    list_editable = ('order',)
    readonly_fields = ('image_preview',)
    fields = ('name', 'short_description', 'image', 'image_preview', 'vk_link', 'order')

    def image_preview(self, obj):
        return self.get_preview(obj, 'image', max_height=150)
    image_preview.short_description = 'Предпросмотр'


@admin.register(Feature)
class FeatureAdmin(ImagePreviewAdminMixin, admin.ModelAdmin):
    list_display = ('title', 'order', 'icon_preview')
    list_editable = ('order',)
    readonly_fields = ('icon_preview',)
    fields = ('title', 'description', 'icon', 'icon_preview', 'order')

    def icon_preview(self, obj):
        return self.get_preview(obj, 'icon')
    icon_preview.short_description = 'Предпросмотр иконки'


@admin.register(GameType)
class GameTypeAdmin(ImagePreviewAdminMixin, admin.ModelAdmin):
    list_display = ('name', 'order', 'icon_preview')
    list_editable = ('order',)
    readonly_fields = ('icon_preview',)
    fields = ('name', 'description', 'icon', 'icon_preview', 'order')

    def icon_preview(self, obj):
        return self.get_preview(obj, 'icon')
    icon_preview.short_description = 'Предпросмотр иконки'


@admin.register(Product)
class ProductAdmin(ImagePreviewAdminMixin, admin.ModelAdmin):
    list_display = ('name', 'price', 'order', 'image_preview')
    list_editable = ('order',)
    readonly_fields = ('image_preview',)
    fields = ('name', 'price', 'description', 'image', 'image_preview', 'link', 'order')

    def image_preview(self, obj):
        return self.get_preview(obj, 'image', max_height=150)
    image_preview.short_description = 'Предпросмотр'


@admin.register(GalleryItem)
class GalleryItemAdmin(ImagePreviewAdminMixin, admin.ModelAdmin):
    list_display = ('title', 'order', 'media_preview')
    list_editable = ('order',)
    readonly_fields = ('media_preview',)
    fields = ('title', 'image', 'video', 'media_preview', 'order_link', 'order')

    def media_preview(self, obj):
        if obj.image:
            return self.get_preview(obj, 'image', max_height=150)
        if obj.video:
            return mark_safe(f'<video src="{obj.video.url}" controls style="max-height: 150px; max-width: 300px;"></video>')
        return "Нет медиа"
    media_preview.short_description = 'Предпросмотр'


@admin.register(OrbibolInfo)
class OrbibolInfoAdmin(ImagePreviewAdminMixin, admin.ModelAdmin):
    readonly_fields = ('plot_icon_preview', 'tactical_icon_preview')
    fieldsets = (
        (None, {'fields': ('general_info', 'details_link')}),
        ('Сюжетный орбибол', {'fields': ('plot_title', 'plot_description', 'plot_icon', 'plot_icon_preview')}),
        ('Тактический орбибол', {'fields': ('tactical_title', 'tactical_description', 'tactical_icon', 'tactical_icon_preview')}),
    )

    def plot_icon_preview(self, obj):
        return self.get_preview(obj, 'plot_icon')
    plot_icon_preview.short_description = 'Предпросмотр иконки'

    def tactical_icon_preview(self, obj):
        return self.get_preview(obj, 'tactical_icon')
    tactical_icon_preview.short_description = 'Предпросмотр иконки'


@admin.register(CompanyProfile)
class CompanyProfileAdmin(ImagePreviewAdminMixin, admin.ModelAdmin):
    readonly_fields = (
        'logo_image_preview', 'logo_image_light_preview', 'favicon_preview', 'vk_icon_preview',
        'youtube_icon_preview', 'telegram_icon_preview', 'nav_toggle_icon_preview'
    )
    fieldsets = (
        ('Основные настройки', {
            'fields': (
                'site_name',
                ('logo_image', 'logo_image_preview'),
                ('logo_image_light', 'logo_image_light_preview'),
                ('favicon', 'favicon_preview'),
                'motto', 'about_us_text'
            )
        }),
        ('Ссылки на страницы', {'fields': ('market_link', 'gallery_description')}),
        ('Контакты и Соцсети', {'fields': ('contact_email', 'contact_phone', 'contact_address', 'vk_profile_link', 'telegram_profile_link', 'youtube_profile_link')}),
        ('Иконки', {
            'classes': ('collapse',),
            'fields': (
                ('vk_icon', 'vk_icon_preview'),
                ('youtube_icon', 'youtube_icon_preview'),
                ('telegram_icon', 'telegram_icon_preview'),
                ('nav_toggle_icon', 'nav_toggle_icon_preview')
            )
        }),
    )

    def _icon_preview(self, obj, field_name, style="max-height: 50px; max-width: 50px;"):
        field = getattr(obj, field_name)
        if field and hasattr(field, 'url'):
            return mark_safe(f'<img src="{field.url}" style="{style}" />')
        return "Нет иконки"

    def logo_image_preview(self, obj):
        return self._icon_preview(obj, 'logo_image', "max-height: 100px; max-width: 100px; background: #ccc; padding: 5px;")
    logo_image_preview.short_description = 'Предпросмотр'

    def logo_image_light_preview(self, obj):
        return self._icon_preview(obj, 'logo_image_light', "max-height: 100px; max-width: 100px; background: #333; padding: 5px;")
    logo_image_light_preview.short_description = 'Предпросмотр (светлый)'
    
    def favicon_preview(self, obj): return self._icon_preview(obj, 'favicon')
    favicon_preview.short_description = 'Предпросмотр Фавикона'

    def vk_icon_preview(self, obj): return self._icon_preview(obj, 'vk_icon')
    vk_icon_preview.short_description = 'Предпросмотр VK'

    def youtube_icon_preview(self, obj): return self._icon_preview(obj, 'youtube_icon')
    youtube_icon_preview.short_description = 'Предпросмотр YouTube'

    def telegram_icon_preview(self, obj): return self._icon_preview(obj, 'telegram_icon')
    telegram_icon_preview.short_description = 'Предпросмотр Telegram'

    def nav_toggle_icon_preview(self, obj): return self._icon_preview(obj, 'nav_toggle_icon')
    nav_toggle_icon_preview.short_description = 'Предпросмотр иконки меню'


class BackgroundObjectInline(ImagePreviewAdminMixin, admin.TabularInline):
    model = BackgroundObject
    extra = 1
    readonly_fields = ('image_preview',)
    fields = ('name', 'image', 'image_preview', 'width', 'initial_top', 'initial_left', 'opacity', 'z_index', 'animation_duration', 'animation_delay', 'parallax_target_id', 'parallax_speed', 'order')
    ordering = ('order',)

    def image_preview(self, obj):
        return self.get_preview(obj, 'image', max_height=75)
    image_preview.short_description = 'Предпросмотр'


@admin.register(BackgroundSettings)
class BackgroundSettingsAdmin(ImagePreviewAdminMixin, admin.ModelAdmin):
    list_display = ('name', 'pattern_preview')
    readonly_fields = ('pattern_preview',)
    fields = ('name', 'background_pattern', 'pattern_preview', 'pattern_size', 'pattern_opacity', 'background_color')
    inlines = [BackgroundObjectInline]

    def pattern_preview(self, obj):
        return self.get_preview(obj, 'background_pattern', is_background=True)
    pattern_preview.short_description = 'Предпросмотр паттерна'

    def has_add_permission(self, request):
        if self.model.objects.count() >= 1:
            return False
        return super().has_add_permission(request)

    def has_delete_permission(self, request, obj=None):
        return False
```
--- END OF FILE: main\admin.py ---

--- START OF FILE: main\apps.py ---
```py
from django.apps import AppConfig


class MainConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'main'
```
--- END OF FILE: main\apps.py ---

--- START OF FILE: main\models.py ---
```py
from django.db import models
from django.core.validators import MinValueValidator, MaxValueValidator

# ВОЗВРАЩАЕМ МОДЕЛЬ ДЛЯ КАРУСЕЛИ
class Service(models.Model):
    name = models.CharField(max_length=200, verbose_name="Название игры/услуги")
    short_description = models.CharField(max_length=255, verbose_name="Краткое описание (под названием)", blank=True)
    image = models.FileField(upload_to='service_images/', verbose_name="Изображение (для карточки в карусели)")
    vk_link = models.URLField(verbose_name="Ссылка на VK для записи", blank=True, null=True)
    order = models.PositiveIntegerField(default=0, verbose_name="Порядок сортировки")

    class Meta:
        verbose_name = "Игра/Услуга для карусели"
        verbose_name_plural = "Игры/Услуги для карусели"
        ordering = ['order']

    def __str__(self):
        return self.name

class CompanyProfile(models.Model):
    site_name = models.CharField(max_length=200, default="Название вашего клуба", verbose_name="Название сайта (в Title)")
    logo_image = models.FileField(upload_to='site_assets/', verbose_name="Логотип сайта (SVG/PNG)", blank=True, null=True)
    logo_image_light = models.FileField(upload_to='site_assets/', verbose_name="Логотип (светлый)", blank=True, null=True, help_text="Светлая версия логотипа для темных фонов (SVG/PNG)")
    favicon = models.FileField(upload_to='site_assets/', verbose_name="Фавикон", blank=True, null=True, help_text="Иконка для вкладки браузера (файл .ico, .png или .svg)")
    motto = models.CharField(max_length=255, blank=True, verbose_name="Девиз компании")
    about_us_text = models.TextField(blank=True, verbose_name="Текст 'О нас'")
    gallery_description = models.TextField(verbose_name='Описание для секции "Фото и видео галерея"', blank=True, null=True)
    contact_email = models.EmailField(max_length=255, blank=True, null=True, verbose_name="Контактный Email")
    contact_phone = models.CharField(max_length=50, blank=True, null=True, verbose_name="Контактный Телефон")
    contact_address = models.TextField(blank=True, null=True, verbose_name="Адрес")
    vk_profile_link = models.URLField(max_length=250, blank=True, null=True, verbose_name="Ссылка на профиль VK")
    telegram_profile_link = models.URLField(max_length=250, blank=True, null=True, verbose_name="Ссылка на профиль Telegram")
    youtube_profile_link = models.URLField(max_length=250, blank=True, null=True, verbose_name="Ссылка на профиль YouTube")
    market_link = models.URLField(max_length=250, blank=True, null=True, verbose_name="Ссылка \"Еще больше товаров\" в Маркете")
    vk_icon = models.FileField(upload_to='site_assets/', verbose_name="Иконка VK (SVG/PNG)", blank=True, null=True)
    youtube_icon = models.FileField(upload_to='site_assets/', verbose_name="Иконка YouTube (SVG/PNG)", blank=True, null=True)
    telegram_icon = models.FileField(upload_to='site_assets/', verbose_name="Иконка Telegram (SVG/PNG)", blank=True, null=True)
    nav_toggle_icon = models.FileField(upload_to='site_assets/', verbose_name="Иконка для раскрытия меню (в свернутом хедере)", blank=True, null=True)
    class Meta:
        verbose_name = "Профиль компании и настройки сайта"
        verbose_name_plural = "Профили компании и настройки сайта"
    def __str__(self):
        return self.site_name if self.site_name else "Настройки сайта"

class OrbibolInfo(models.Model):
    general_info = models.TextField(verbose_name="Общая информация (первый абзац под заголовком 'Орбибол')")
    plot_title = models.CharField(max_length=100, default="Сюжетный орбибол", verbose_name="Заголовок блока 'Сюжетный'")
    plot_description = models.TextField(verbose_name="Описание для 'Сюжетный орбибол'")
    plot_icon = models.FileField(upload_to='orbibol_icons/', verbose_name="Иконка для \"Сюжетный орбибол\" (SVG/PNG)", blank=True, null=True)
    tactical_title = models.CharField(max_length=100, default="Тактический орбибол", verbose_name="Заголовок блока 'Тактический'")
    tactical_description = models.TextField(verbose_name="Описание для 'Тактический орбибол'")
    tactical_icon = models.FileField(upload_to='orbibol_icons/', verbose_name="Иконка для \"Тактический орбибол\" (SVG/PNG)", blank=True, null=True)
    details_link = models.URLField(max_length=250, blank=True, null=True, verbose_name="Ссылка 'Узнать подробнее'")
    class Meta:
        verbose_name = "Информация об Орбиболе"
        verbose_name_plural = "Информация об Орбиболе" 
    def __str__(self):
        return "Информация для секции Орбибол"
    
class Feature(models.Model):
    title = models.CharField(max_length=100, verbose_name="Заголовок преимущества")
    description = models.TextField(verbose_name="Описание преимущества")
    icon = models.FileField(upload_to='feature_icons/', verbose_name="Иконка (SVG или PNG)") 
    order = models.PositiveIntegerField(default=0, db_index=True, verbose_name="Порядок отображения")
    class Meta:
        verbose_name = "Преимущество (Что мы предлагаем)"
        verbose_name_plural = "Преимущества (Что мы предлагаем)"
        ordering = ['order']
    def __str__(self):
        return self.title    
    
class GameType(models.Model):
    name = models.CharField(max_length=100, verbose_name="Название типа игры")
    description = models.TextField(verbose_name="Краткое описание типа игры")
    icon = models.FileField(upload_to='gametype_icons/', verbose_name="Иконка для типа игры (SVG или PNG)")
    order = models.PositiveIntegerField(default=0, db_index=True, verbose_name="Порядок отображения")
    class Meta:
        verbose_name = "Тип игры (секция 'Игры')"
        verbose_name_plural = "Типы игр (секция 'Игры')"
        ordering = ['order']
    def __str__(self):
        return self.name

class Product(models.Model):
    name = models.CharField(max_length=200, verbose_name="Название товара")
    price = models.PositiveIntegerField(verbose_name="Цена")
    description = models.TextField(verbose_name="Краткое описание товара")
    image = models.FileField(upload_to='product_images/', verbose_name="Изображение товара (SVG/PNG)")
    link = models.URLField(max_length=200, blank=True, null=True, verbose_name="Ссылка на страницу товара")
    order = models.PositiveIntegerField(default=0, db_index=True, verbose_name="Порядок отображения")
    class Meta:
        verbose_name = "Товар"
        verbose_name_plural = "Товары"
        ordering = ['order']
    def __str__(self):
        return self.name

class GalleryItem(models.Model):
    title = models.CharField(max_length=100, verbose_name="Заголовок (напр. Фотосъемка)")
    image = models.FileField(upload_to='gallery/', verbose_name="Изображение", blank=True, null=True, help_text="Загрузите, если это фото.")
    video = models.FileField(upload_to='gallery/', verbose_name="Видео (mp4, webm)", blank=True, null=True, help_text="Загрузите, если это видео.")
    order_link = models.URLField(verbose_name='Ссылка для кнопки "Заказать"')
    order = models.PositiveIntegerField(default=0, db_index=True, verbose_name="Порядок отображения")
    class Meta:
        verbose_name = "Элемент галереи"
        verbose_name_plural = "Элементы галереи"
        ordering = ['order']
    def __str__(self):
        return self.title

class BackgroundSettings(models.Model):
    name = models.CharField(max_length=100, default="Основные настройки фона", verbose_name="Название набора настроек")
    background_pattern = models.FileField(upload_to='backgrounds/', blank=True, null=True, verbose_name="Паттерн фона (повторяющееся изображение)", help_text="Это изображение будет повторяться на фоне.")
    pattern_size = models.CharField(max_length=50, default="200px", verbose_name="Размер паттерна", help_text="CSS значение, например: '200px', '50%', 'cover', 'contain'.")
    pattern_opacity = models.DecimalField(max_digits=3, decimal_places=2, default=0.3, verbose_name="Прозрачность паттерна (от 0.0 до 1.0)", validators=[MinValueValidator(0), MaxValueValidator(1)])
    background_color = models.CharField(max_length=20, default="#010101", verbose_name="Основной цвет фона", help_text="CSS цвет, например: '#010101'. Будет под паттерном.")
    class Meta:
        verbose_name = "Настройки фона"
        verbose_name_plural = "Настройки фона"
    def __str__(self):
        return self.name

class BackgroundObject(models.Model):
    settings = models.ForeignKey(BackgroundSettings, on_delete=models.CASCADE, related_name='background_objects', verbose_name="Набор настроек")
    name = models.CharField(max_length=100, verbose_name="Название объекта")
    image = models.FileField(upload_to='backgrounds/objects/', verbose_name="Изображение объекта")
    width = models.PositiveIntegerField(default=150, verbose_name="Ширина объекта (px)")
    initial_top = models.CharField(max_length=10, default="50%", verbose_name="Начальная позиция сверху", help_text="CSS значение, например '50%' или '100px'")
    initial_left = models.CharField(max_length=10, default="50%", verbose_name="Начальная позиция слева", help_text="CSS значение, например '50%' или '100px'")
    animation_duration = models.PositiveIntegerField(default=20, verbose_name="Длительность анимации (секунд)", help_text="Длительность 'покачивания'. 0 чтобы отключить.")
    animation_delay = models.PositiveIntegerField(default=0, verbose_name="Задержка перед началом анимации (секунд)")
    opacity = models.DecimalField(max_digits=3, decimal_places=2, default=0.5, verbose_name="Прозрачность (от 0.0 до 1.0)", validators=[MinValueValidator(0), MaxValueValidator(1)])
    z_index = models.IntegerField(default=-9, verbose_name="Слой (z-index)", help_text="Чем меньше, тем 'ниже' объект. Паттерн фона на слое -10.")
    order = models.PositiveIntegerField(default=0, db_index=True, verbose_name="Порядок")
    parallax_target_id = models.CharField(max_length=100, blank=True, null=True, verbose_name="ID секции для параллакс-эффекта", help_text="Например: 'about-us-section'. Оставьте пустым, чтобы отключить параллакс.")
    parallax_speed = models.FloatField(default=0.3, verbose_name="Скорость параллакса", help_text="Например: 0.2 (медленнее скролла), 1 (вместе со скроллом), -0.5 (в обратную сторону)")
    class Meta:
        verbose_name = "Анимированный объект фона"
        verbose_name_plural = "Анимированные объекты фона"
        ordering = ['order']
    def __str__(self):
        return self.name
```
--- END OF FILE: main\models.py ---

--- START OF FILE: main\tests.py ---
```py
from django.test import TestCase

# Create your tests here.

```
--- END OF FILE: main\tests.py ---

--- START OF FILE: main\urls.py ---
```py
from django.urls import path
from . import views

app_name = 'main'

urlpatterns = [
    path('', views.home_page_view, name='home_page'),
]
```
--- END OF FILE: main\urls.py ---

--- START OF FILE: main\views.py ---
```py
from django.shortcuts import render
from .models import (
    Service,
    CompanyProfile, OrbibolInfo, Feature, GameType, Product, GalleryItem,
    BackgroundSettings
)

def home_page_view(request):
    services = Service.objects.all()
    company_profile = CompanyProfile.objects.first() 
    orbibol_info = OrbibolInfo.objects.first()
    features = Feature.objects.all() 
    game_types = GameType.objects.all()
    products = Product.objects.all()
    gallery_items = GalleryItem.objects.all()
    background_settings = BackgroundSettings.objects.prefetch_related('background_objects').first()
                                                    
    context = {
        'services': services,
        'company_profile': company_profile,
        'orbibol_info': orbibol_info,
        'features': features,
        'game_types': game_types,
        'products': products,
        'gallery_items': gallery_items,
        'background_settings': background_settings,
    }
    return render(request, 'main/home_page.html', context)

def custom_handler404(request, exception):
    context = {
        'company_profile': None,
        'background_settings': None,
    }
    return render(request, "404.html", context, status=404)

def custom_handler500(request):
    context = {
        'company_profile': None,
        'background_settings': None,
    }
    return render(request, "500.html", context, status=500)
```
--- END OF FILE: main\views.py ---

--- START OF FILE: myproject\asgi.py ---
```py
"""
ASGI config for myproject project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')

application = get_asgi_application()

```
--- END OF FILE: myproject\asgi.py ---

--- START OF FILE: myproject\settings.py ---
```py
# START OF FILE: myproject/settings.py
import os
from pathlib import Path
from dotenv import load_dotenv
import dj_database_url

BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv(BASE_DIR / '.env')
SECRET_KEY = os.environ.get('SECRET_KEY')
DEBUG = os.environ.get('DEBUG', 'False').lower() == 'true'
ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '127.0.0.1,localhost').split(',')

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'whitenoise.runserver_nostatic',
    'cloudinary_storage',
    'django.contrib.staticfiles',
    'cloudinary',
    'main',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
ROOT_URLCONF = 'myproject.urls'
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
WSGI_APPLICATION = 'myproject.wsgi.application'

DATABASES = {'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': BASE_DIR / 'db.sqlite3'}}
DATABASE_URL = os.environ.get('DATABASE_URL')
if DATABASE_URL:
    DATABASES['default'] = dj_database_url.config(
        default=DATABASE_URL, conn_max_age=600, conn_health_checks=True
    )

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]
LANGUAGE_CODE = 'ru-ru'
TIME_ZONE = 'Europe/Moscow'
USE_I18N = True
USE_TZ = True
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = []

STORAGES = {
    "default": {
        "BACKEND": "cloudinary_storage.storage.MediaCloudinaryStorage",
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedStaticFilesStorage",
    },
}

CLOUDINARY_STORAGE = {
    'CLOUD_NAME': os.environ.get('CLOUDINARY_CLOUD_NAME'),
    'API_KEY': os.environ.get('CLOUDINARY_API_KEY'),
    'API_SECRET': os.environ.get('CLOUDINARY_API_SECRET'),
}

STATICFILES_STORAGE = "whitenoise.storage.CompressedStaticFilesStorage"

LOG_DIR = BASE_DIR / 'logs'
LOG_DIR.mkdir(exist_ok=True)
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}', 'style': '{',},
        'simple': {'format': '{levelname} {message}', 'style': '{',},
    },
    'handlers': {
        'console': {'level': 'INFO', 'class': 'logging.StreamHandler', 'formatter': 'simple',},
        'file': {
            'level': 'ERROR', 'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOG_DIR / 'django_errors.log', 'maxBytes': 1024 * 1024 * 5,
            'backupCount': 5, 'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {'handlers': ['console', 'file'], 'level': 'INFO', 'propagate': True,},
        'django.request': {'handlers': ['file'], 'level': 'ERROR', 'propagate': False,},
        'main': {'handlers': ['console', 'file'], 'level': 'INFO', 'propagate': True,}
    },
}
```
--- END OF FILE: myproject\settings.py ---

--- START OF FILE: myproject\urls.py ---
```py
# myproject/urls.py

import os
from django.contrib import admin
from django.urls import path, include

# Мы убрали лишние импорты (re_path, RedirectView, settings, static)

ADMIN_URL = os.environ.get('ADMIN_URL', 'admin/')

urlpatterns = [
    path(ADMIN_URL, admin.site.urls),
    path('', include('main.urls')),
]

# Обработчики ошибок остаются, они нам нужны
handler404 = 'main.views.custom_handler404'
handler500 = 'main.views.custom_handler500'
```
--- END OF FILE: myproject\urls.py ---

--- START OF FILE: myproject\wsgi.py ---
```py
import os
from django.core.wsgi import get_wsgi_application
from whitenoise import WhiteNoise
from django.conf import settings

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')

application = get_wsgi_application()
application = WhiteNoise(application, root=settings.STATIC_ROOT)
```
--- END OF FILE: myproject\wsgi.py ---

--- START OF FILE: myproject\__init__.py ---
```py

```
--- END OF FILE: myproject\__init__.py ---

--- START OF FILE: staticfiles\admin\css\autocomplete.css ---
```css
select.admin-autocomplete {
    width: 20em;
}

.select2-container--admin-autocomplete.select2-container {
    min-height: 30px;
}

.select2-container--admin-autocomplete .select2-selection--single,
.select2-container--admin-autocomplete .select2-selection--multiple {
    min-height: 30px;
    padding: 0;
}

.select2-container--admin-autocomplete.select2-container--focus .select2-selection,
.select2-container--admin-autocomplete.select2-container--open .select2-selection {
    border-color: var(--body-quiet-color);
    min-height: 30px;
}

.select2-container--admin-autocomplete.select2-container--focus .select2-selection.select2-selection--single,
.select2-container--admin-autocomplete.select2-container--open .select2-selection.select2-selection--single {
    padding: 0;
}

.select2-container--admin-autocomplete.select2-container--focus .select2-selection.select2-selection--multiple,
.select2-container--admin-autocomplete.select2-container--open .select2-selection.select2-selection--multiple {
    padding: 0;
}

.select2-container--admin-autocomplete .select2-selection--single {
    background-color: var(--body-bg);
    border: 1px solid var(--border-color);
    border-radius: 4px;
}

.select2-container--admin-autocomplete .select2-selection--single .select2-selection__rendered {
    color: var(--body-fg);
    line-height: 30px;
}

.select2-container--admin-autocomplete .select2-selection--single .select2-selection__clear {
    cursor: pointer;
    float: right;
    font-weight: bold;
}

.select2-container--admin-autocomplete .select2-selection--single .select2-selection__placeholder {
    color: var(--body-quiet-color);
}

.select2-container--admin-autocomplete .select2-selection--single .select2-selection__arrow {
    height: 26px;
    position: absolute;
    top: 1px;
    right: 1px;
    width: 20px;
}

.select2-container--admin-autocomplete .select2-selection--single .select2-selection__arrow b {
    border-color: #888 transparent transparent transparent;
    border-style: solid;
    border-width: 5px 4px 0 4px;
    height: 0;
    left: 50%;
    margin-left: -4px;
    margin-top: -2px;
    position: absolute;
    top: 50%;
    width: 0;
}

.select2-container--admin-autocomplete[dir="rtl"] .select2-selection--single .select2-selection__clear {
    float: left;
}

.select2-container--admin-autocomplete[dir="rtl"] .select2-selection--single .select2-selection__arrow {
    left: 1px;
    right: auto;
}

.select2-container--admin-autocomplete.select2-container--disabled .select2-selection--single {
    background-color: var(--darkened-bg);
    cursor: default;
}

.select2-container--admin-autocomplete.select2-container--disabled .select2-selection--single .select2-selection__clear {
    display: none;
}

.select2-container--admin-autocomplete.select2-container--open .select2-selection--single .select2-selection__arrow b {
    border-color: transparent transparent #888 transparent;
    border-width: 0 4px 5px 4px;
}

.select2-container--admin-autocomplete .select2-selection--multiple {
    background-color: var(--body-bg);
    border: 1px solid var(--border-color);
    border-radius: 4px;
    cursor: text;
}

.select2-container--admin-autocomplete .select2-selection--multiple .select2-selection__rendered {
    box-sizing: border-box;
    list-style: none;
    margin: 0;
    padding: 0 10px 5px 5px;
    width: 100%;
    display: flex;
    flex-wrap: wrap;
}

.select2-container--admin-autocomplete .select2-selection--multiple .select2-selection__rendered li {
    list-style: none;
}

.select2-container--admin-autocomplete .select2-selection--multiple .select2-selection__placeholder {
    color: var(--body-quiet-color);
    margin-top: 5px;
    float: left;
}

.select2-container--admin-autocomplete .select2-selection--multiple .select2-selection__clear {
    cursor: pointer;
    float: right;
    font-weight: bold;
    margin: 5px;
    position: absolute;
    right: 0;
}

.select2-container--admin-autocomplete .select2-selection--multiple .select2-selection__choice {
    background-color: var(--darkened-bg);
    border: 1px solid var(--border-color);
    border-radius: 4px;
    cursor: default;
    float: left;
    margin-right: 5px;
    margin-top: 5px;
    padding: 0 5px;
}

.select2-container--admin-autocomplete .select2-selection--multiple .select2-selection__choice__remove {
    color: var(--body-quiet-color);
    cursor: pointer;
    display: inline-block;
    font-weight: bold;
    margin-right: 2px;
}

.select2-container--admin-autocomplete .select2-selection--multiple .select2-selection__choice__remove:hover {
    color: var(--body-fg);
}

.select2-container--admin-autocomplete[dir="rtl"] .select2-selection--multiple .select2-selection__choice, .select2-container--admin-autocomplete[dir="rtl"] .select2-selection--multiple .select2-selection__placeholder, .select2-container--admin-autocomplete[dir="rtl"] .select2-selection--multiple .select2-search--inline {
    float: right;
}

.select2-container--admin-autocomplete[dir="rtl"] .select2-selection--multiple .select2-selection__choice {
    margin-left: 5px;
    margin-right: auto;
}

.select2-container--admin-autocomplete[dir="rtl"] .select2-selection--multiple .select2-selection__choice__remove {
    margin-left: 2px;
    margin-right: auto;
}

.select2-container--admin-autocomplete.select2-container--focus .select2-selection--multiple {
    border: solid var(--body-quiet-color) 1px;
    outline: 0;
}

.select2-container--admin-autocomplete.select2-container--disabled .select2-selection--multiple {
    background-color: var(--darkened-bg);
    cursor: default;
}

.select2-container--admin-autocomplete.select2-container--disabled .select2-selection__choice__remove {
    display: none;
}

.select2-container--admin-autocomplete.select2-container--open.select2-container--above .select2-selection--single, .select2-container--admin-autocomplete.select2-container--open.select2-container--above .select2-selection--multiple {
    border-top-left-radius: 0;
    border-top-right-radius: 0;
}

.select2-container--admin-autocomplete.select2-container--open.select2-container--below .select2-selection--single, .select2-container--admin-autocomplete.select2-container--open.select2-container--below .select2-selection--multiple {
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
}

.select2-container--admin-autocomplete .select2-search--dropdown {
    background: var(--darkened-bg);
}

.select2-container--admin-autocomplete .select2-search--dropdown .select2-search__field {
    background: var(--body-bg);
    color: var(--body-fg);
    border: 1px solid var(--border-color);
    border-radius: 4px;
}

.select2-container--admin-autocomplete .select2-search--inline .select2-search__field {
    background: transparent;
    color: var(--body-fg);
    border: none;
    outline: 0;
    box-shadow: none;
    -webkit-appearance: textfield;
}

.select2-container--admin-autocomplete .select2-results > .select2-results__options {
    max-height: 200px;
    overflow-y: auto;
    color: var(--body-fg);
    background: var(--body-bg);
}

.select2-container--admin-autocomplete .select2-results__option[role=group] {
    padding: 0;
}

.select2-container--admin-autocomplete .select2-results__option[aria-disabled=true] {
    color: var(--body-quiet-color);
}

.select2-container--admin-autocomplete .select2-results__option[aria-selected=true] {
    background-color: var(--selected-bg);
    color: var(--body-fg);
}

.select2-container--admin-autocomplete .select2-results__option .select2-results__option {
    padding-left: 1em;
}

.select2-container--admin-autocomplete .select2-results__option .select2-results__option .select2-results__group {
    padding-left: 0;
}

.select2-container--admin-autocomplete .select2-results__option .select2-results__option .select2-results__option {
    margin-left: -1em;
    padding-left: 2em;
}

.select2-container--admin-autocomplete .select2-results__option .select2-results__option .select2-results__option .select2-results__option {
    margin-left: -2em;
    padding-left: 3em;
}

.select2-container--admin-autocomplete .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option {
    margin-left: -3em;
    padding-left: 4em;
}

.select2-container--admin-autocomplete .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option {
    margin-left: -4em;
    padding-left: 5em;
}

.select2-container--admin-autocomplete .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option {
    margin-left: -5em;
    padding-left: 6em;
}

.select2-container--admin-autocomplete .select2-results__option--highlighted[aria-selected] {
    background-color: var(--primary);
    color: var(--primary-fg);
}

.select2-container--admin-autocomplete .select2-results__group {
    cursor: default;
    display: block;
    padding: 6px;
}

.errors .select2-selection {
    border: 1px solid var(--error-fg);
}

```
--- END OF FILE: staticfiles\admin\css\autocomplete.css ---

--- START OF FILE: staticfiles\admin\css\base.css ---
```css
/*
    DJANGO Admin styles
*/

/* VARIABLE DEFINITIONS */
html[data-theme="light"],
:root {
    --primary: #79aec8;
    --secondary: #417690;
    --accent: #f5dd5d;
    --primary-fg: #fff;

    --body-fg: #333;
    --body-bg: #fff;
    --body-quiet-color: #666;
    --body-medium-color: #444;
    --body-loud-color: #000;

    --header-color: #ffc;
    --header-branding-color: var(--accent);
    --header-bg: var(--secondary);
    --header-link-color: var(--primary-fg);

    --breadcrumbs-fg: #c4dce8;
    --breadcrumbs-link-fg: var(--body-bg);
    --breadcrumbs-bg: #264b5d;

    --link-fg: #417893;
    --link-hover-color: #036;
    --link-selected-fg: var(--secondary);

    --hairline-color: #e8e8e8;
    --border-color: #ccc;

    --error-fg: #ba2121;

    --message-success-bg: #dfd;
    --message-warning-bg: #ffc;
    --message-error-bg: #ffefef;

    --darkened-bg: #f8f8f8; /* A bit darker than --body-bg */
    --selected-bg: #e4e4e4; /* E.g. selected table cells */
    --selected-row: #ffc;

    --button-fg: #fff;
    --button-bg: var(--secondary);
    --button-hover-bg: #205067;
    --default-button-bg: #205067;
    --default-button-hover-bg: var(--secondary);
    --close-button-bg: #747474;
    --close-button-hover-bg: #333;
    --delete-button-bg: #ba2121;
    --delete-button-hover-bg: #a41515;

    --object-tools-fg: var(--button-fg);
    --object-tools-bg: var(--close-button-bg);
    --object-tools-hover-bg: var(--close-button-hover-bg);

    --font-family-primary:
        "Segoe UI",
        system-ui,
        Roboto,
        "Helvetica Neue",
        Arial,
        sans-serif,
        "Apple Color Emoji",
        "Segoe UI Emoji",
        "Segoe UI Symbol",
        "Noto Color Emoji";
    --font-family-monospace:
        ui-monospace,
        Menlo,
        Monaco,
        "Cascadia Mono",
        "Segoe UI Mono",
        "Roboto Mono",
        "Oxygen Mono",
        "Ubuntu Monospace",
        "Source Code Pro",
        "Fira Mono",
        "Droid Sans Mono",
        "Courier New",
        monospace,
        "Apple Color Emoji",
        "Segoe UI Emoji",
        "Segoe UI Symbol",
        "Noto Color Emoji";

    color-scheme: light;
}

html, body {
    height: 100%;
}

body {
    margin: 0;
    padding: 0;
    font-size: 0.875rem;
    font-family: var(--font-family-primary);
    color: var(--body-fg);
    background: var(--body-bg);
}

/* LINKS */

a:link, a:visited {
    color: var(--link-fg);
    text-decoration: none;
    transition: color 0.15s, background 0.15s;
}

a:focus, a:hover {
    color: var(--link-hover-color);
}

a:focus {
    text-decoration: underline;
}

a img {
    border: none;
}

a.section:link, a.section:visited {
    color: var(--header-link-color);
    text-decoration: none;
}

a.section:focus, a.section:hover {
    text-decoration: underline;
}

/* GLOBAL DEFAULTS */

p, ol, ul, dl {
    margin: .2em 0 .8em 0;
}

p {
    padding: 0;
    line-height: 140%;
}

h1,h2,h3,h4,h5 {
    font-weight: bold;
}

h1 {
    margin: 0 0 20px;
    font-weight: 300;
    font-size: 1.25rem;
}

h2 {
    font-size: 1rem;
    margin: 1em 0 .5em 0;
}

h2.subhead {
    font-weight: normal;
    margin-top: 0;
}

h3 {
    font-size: 0.875rem;
    margin: .8em 0 .3em 0;
    color: var(--body-medium-color);
    font-weight: bold;
}

h4 {
    font-size: 0.75rem;
    margin: 1em 0 .8em 0;
    padding-bottom: 3px;
    color: var(--body-medium-color);
}

h5 {
    font-size: 0.625rem;
    margin: 1.5em 0 .5em 0;
    color: var(--body-quiet-color);
    text-transform: uppercase;
    letter-spacing: 1px;
}

ul > li {
    list-style-type: square;
    padding: 1px 0;
}

li ul {
    margin-bottom: 0;
}

li, dt, dd {
    font-size: 0.8125rem;
    line-height: 1.25rem;
}

dt {
    font-weight: bold;
    margin-top: 4px;
}

dd {
    margin-left: 0;
}

form {
    margin: 0;
    padding: 0;
}

fieldset {
    margin: 0;
    min-width: 0;
    padding: 0;
    border: none;
    border-top: 1px solid var(--hairline-color);
}

details summary {
    cursor: pointer;
}

blockquote {
    font-size: 0.6875rem;
    color: #777;
    margin-left: 2px;
    padding-left: 10px;
    border-left: 5px solid #ddd;
}

code, pre {
    font-family: var(--font-family-monospace);
    color: var(--body-quiet-color);
    font-size: 0.75rem;
    overflow-x: auto;
}

pre.literal-block {
    margin: 10px;
    background: var(--darkened-bg);
    padding: 6px 8px;
}

code strong {
    color: #930;
}

hr {
    clear: both;
    color: var(--hairline-color);
    background-color: var(--hairline-color);
    height: 1px;
    border: none;
    margin: 0;
    padding: 0;
    line-height: 1px;
}

/* TEXT STYLES & MODIFIERS */

.small {
    font-size: 0.6875rem;
}

.mini {
    font-size: 0.625rem;
}

.help, p.help, form p.help, div.help, form div.help, div.help li {
    font-size: 0.6875rem;
    color: var(--body-quiet-color);
}

div.help ul {
     margin-bottom: 0;
}

.help-tooltip {
    cursor: help;
}

p img, h1 img, h2 img, h3 img, h4 img, td img {
    vertical-align: middle;
}

.quiet, a.quiet:link, a.quiet:visited {
    color: var(--body-quiet-color);
    font-weight: normal;
}

.clear {
    clear: both;
}

.nowrap {
    white-space: nowrap;
}

.hidden {
    display: none !important;
}

/* TABLES */

table {
    border-collapse: collapse;
    border-color: var(--border-color);
}

td, th {
    font-size: 0.8125rem;
    line-height: 1rem;
    border-bottom: 1px solid var(--hairline-color);
    vertical-align: top;
    padding: 8px;
}

th {
    font-weight: 500;
    text-align: left;
}

thead th,
tfoot td {
    color: var(--body-quiet-color);
    padding: 5px 10px;
    font-size: 0.6875rem;
    background: var(--body-bg);
    border: none;
    border-top: 1px solid var(--hairline-color);
    border-bottom: 1px solid var(--hairline-color);
}

tfoot td {
    border-bottom: none;
    border-top: 1px solid var(--hairline-color);
}

thead th.required {
    font-weight: bold;
}

tr.alt {
    background: var(--darkened-bg);
}

tr:nth-child(odd), .row-form-errors {
    background: var(--body-bg);
}

tr:nth-child(even),
tr:nth-child(even) .errorlist,
tr:nth-child(odd) + .row-form-errors,
tr:nth-child(odd) + .row-form-errors .errorlist {
    background: var(--darkened-bg);
}

/* SORTABLE TABLES */

thead th {
    padding: 5px 10px;
    line-height: normal;
    text-transform: uppercase;
    background: var(--darkened-bg);
}

thead th a:link, thead th a:visited {
    color: var(--body-quiet-color);
}

thead th.sorted {
    background: var(--selected-bg);
}

thead th.sorted .text {
    padding-right: 42px;
}

table thead th .text span {
    padding: 8px 10px;
    display: block;
}

table thead th .text a {
    display: block;
    cursor: pointer;
    padding: 8px 10px;
}

table thead th .text a:focus, table thead th .text a:hover {
    background: var(--selected-bg);
}

thead th.sorted a.sortremove {
    visibility: hidden;
}

table thead th.sorted:hover a.sortremove {
    visibility: visible;
}

table thead th.sorted .sortoptions {
    display: block;
    padding: 9px 5px 0 5px;
    float: right;
    text-align: right;
}

table thead th.sorted .sortpriority {
    font-size: .8em;
    min-width: 12px;
    text-align: center;
    vertical-align: 3px;
    margin-left: 2px;
    margin-right: 2px;
}

table thead th.sorted .sortoptions a {
    position: relative;
    width: 14px;
    height: 14px;
    display: inline-block;
    background: url(../img/sorting-icons.svg) 0 0 no-repeat;
    background-size: 14px auto;
}

table thead th.sorted .sortoptions a.sortremove {
    background-position: 0 0;
}

table thead th.sorted .sortoptions a.sortremove:after {
    content: '\\';
    position: absolute;
    top: -6px;
    left: 3px;
    font-weight: 200;
    font-size: 1.125rem;
    color: var(--body-quiet-color);
}

table thead th.sorted .sortoptions a.sortremove:focus:after,
table thead th.sorted .sortoptions a.sortremove:hover:after {
    color: var(--link-fg);
}

table thead th.sorted .sortoptions a.sortremove:focus,
table thead th.sorted .sortoptions a.sortremove:hover {
    background-position: 0 -14px;
}

table thead th.sorted .sortoptions a.ascending {
    background-position: 0 -28px;
}

table thead th.sorted .sortoptions a.ascending:focus,
table thead th.sorted .sortoptions a.ascending:hover {
    background-position: 0 -42px;
}

table thead th.sorted .sortoptions a.descending {
    top: 1px;
    background-position: 0 -56px;
}

table thead th.sorted .sortoptions a.descending:focus,
table thead th.sorted .sortoptions a.descending:hover {
    background-position: 0 -70px;
}

/* FORM DEFAULTS */

input, textarea, select, .form-row p, form .button {
    margin: 2px 0;
    padding: 2px 3px;
    vertical-align: middle;
    font-family: var(--font-family-primary);
    font-weight: normal;
    font-size: 0.8125rem;
}
.form-row div.help {
    padding: 2px 3px;
}

textarea {
    vertical-align: top;
}

/*
Minifiers remove the default (text) "type" attribute from "input" HTML tags.
Add input:not([type]) to make the CSS stylesheet work the same.
*/
input:not([type]), input[type=text], input[type=password], input[type=email],
input[type=url], input[type=number], input[type=tel], textarea, select,
.vTextField {
    border: 1px solid var(--border-color);
    border-radius: 4px;
    padding: 5px 6px;
    margin-top: 0;
    color: var(--body-fg);
    background-color: var(--body-bg);
}

/*
Minifiers remove the default (text) "type" attribute from "input" HTML tags.
Add input:not([type]) to make the CSS stylesheet work the same.
*/
input:not([type]):focus, input[type=text]:focus, input[type=password]:focus,
input[type=email]:focus, input[type=url]:focus, input[type=number]:focus,
input[type=tel]:focus, textarea:focus, select:focus, .vTextField:focus {
    border-color: var(--body-quiet-color);
}

select {
    height: 1.875rem;
}

select[multiple] {
    /* Allow HTML size attribute to override the height in the rule above. */
    height: auto;
    min-height: 150px;
}

/* FORM BUTTONS */

.button, input[type=submit], input[type=button], .submit-row input, a.button {
    background: var(--button-bg);
    padding: 10px 15px;
    border: none;
    border-radius: 4px;
    color: var(--button-fg);
    cursor: pointer;
    transition: background 0.15s;
}

a.button {
    padding: 4px 5px;
}

.button:active, input[type=submit]:active, input[type=button]:active,
.button:focus, input[type=submit]:focus, input[type=button]:focus,
.button:hover, input[type=submit]:hover, input[type=button]:hover {
    background: var(--button-hover-bg);
}

.button[disabled], input[type=submit][disabled], input[type=button][disabled] {
    opacity: 0.4;
}

.button.default, input[type=submit].default, .submit-row input.default {
    border: none;
    font-weight: 400;
    background: var(--default-button-bg);
}

.button.default:active, input[type=submit].default:active,
.button.default:focus, input[type=submit].default:focus,
.button.default:hover, input[type=submit].default:hover {
    background: var(--default-button-hover-bg);
}

.button[disabled].default,
input[type=submit][disabled].default,
input[type=button][disabled].default {
    opacity: 0.4;
}


/* MODULES */

.module {
    border: none;
    margin-bottom: 30px;
    background: var(--body-bg);
}

.module p, .module ul, .module h3, .module h4, .module dl, .module pre {
    padding-left: 10px;
    padding-right: 10px;
}

.module blockquote {
    margin-left: 12px;
}

.module ul, .module ol {
    margin-left: 1.5em;
}

.module h3 {
    margin-top: .6em;
}

.module h2, .module caption, .inline-group h2 {
    margin: 0;
    padding: 8px;
    font-weight: 400;
    font-size: 0.8125rem;
    text-align: left;
    background: var(--header-bg);
    color: var(--header-link-color);
}

.module caption,
.inline-group h2 {
    font-size: 0.75rem;
    letter-spacing: 0.5px;
    text-transform: uppercase;
}

.module table {
    border-collapse: collapse;
}

/* MESSAGES & ERRORS */

ul.messagelist {
    padding: 0;
    margin: 0;
}

ul.messagelist li {
    display: block;
    font-weight: 400;
    font-size: 0.8125rem;
    padding: 10px 10px 10px 65px;
    margin: 0 0 10px 0;
    background: var(--message-success-bg) url(../img/icon-yes.svg) 40px 12px no-repeat;
    background-size: 16px auto;
    color: var(--body-fg);
    word-break: break-word;
}

ul.messagelist li.warning {
    background: var(--message-warning-bg) url(../img/icon-alert.svg) 40px 14px no-repeat;
    background-size: 14px auto;
}

ul.messagelist li.error {
    background: var(--message-error-bg) url(../img/icon-no.svg) 40px 12px no-repeat;
    background-size: 16px auto;
}

.errornote {
    font-size: 0.875rem;
    font-weight: 700;
    display: block;
    padding: 10px 12px;
    margin: 0 0 10px 0;
    color: var(--error-fg);
    border: 1px solid var(--error-fg);
    border-radius: 4px;
    background-color: var(--body-bg);
    background-position: 5px 12px;
    overflow-wrap: break-word;
}

ul.errorlist {
    margin: 0 0 4px;
    padding: 0;
    color: var(--error-fg);
    background: var(--body-bg);
}

ul.errorlist li {
    font-size: 0.8125rem;
    display: block;
    margin-bottom: 4px;
    overflow-wrap: break-word;
}

ul.errorlist li:first-child {
    margin-top: 0;
}

ul.errorlist li a {
    color: inherit;
    text-decoration: underline;
}

td ul.errorlist {
    margin: 0;
    padding: 0;
}

td ul.errorlist li {
    margin: 0;
}

.form-row.errors {
    margin: 0;
    border: none;
    border-bottom: 1px solid var(--hairline-color);
    background: none;
}

.form-row.errors ul.errorlist li {
    padding-left: 0;
}

.errors input, .errors select, .errors textarea,
td ul.errorlist + input, td ul.errorlist + select, td ul.errorlist + textarea {
    border: 1px solid var(--error-fg);
}

.description {
    font-size: 0.75rem;
    padding: 5px 0 0 12px;
}

/* BREADCRUMBS */

div.breadcrumbs {
    background: var(--breadcrumbs-bg);
    padding: 10px 40px;
    border: none;
    color: var(--breadcrumbs-fg);
    text-align: left;
}

div.breadcrumbs a {
    color: var(--breadcrumbs-link-fg);
}

div.breadcrumbs a:focus, div.breadcrumbs a:hover {
    color: var(--breadcrumbs-fg);
}

/* ACTION ICONS */

.viewlink, .inlineviewlink {
    padding-left: 16px;
    background: url(../img/icon-viewlink.svg) 0 1px no-repeat;
}

.hidelink {
    padding-left: 16px;
    background: url(../img/icon-hidelink.svg) 0 1px no-repeat;
}

.addlink {
    padding-left: 16px;
    background: url(../img/icon-addlink.svg) 0 1px no-repeat;
}

.changelink, .inlinechangelink {
    padding-left: 16px;
    background: url(../img/icon-changelink.svg) 0 1px no-repeat;
}

.deletelink {
    padding-left: 16px;
    background: url(../img/icon-deletelink.svg) 0 1px no-repeat;
}

a.deletelink:link, a.deletelink:visited {
    color: #CC3434; /* XXX Probably unused? */
}

a.deletelink:focus, a.deletelink:hover {
    color: #993333; /* XXX Probably unused? */
    text-decoration: none;
}

/* OBJECT TOOLS */

.object-tools {
    font-size: 0.625rem;
    font-weight: bold;
    padding-left: 0;
    float: right;
    position: relative;
    margin-top: -48px;
}

.object-tools li {
    display: block;
    float: left;
    margin-left: 5px;
    height: 1rem;
}

.object-tools a {
    border-radius: 15px;
}

.object-tools a:link, .object-tools a:visited {
    display: block;
    float: left;
    padding: 3px 12px;
    background: var(--object-tools-bg);
    color: var(--object-tools-fg);
    font-weight: 400;
    font-size: 0.6875rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.object-tools a:focus, .object-tools a:hover {
    background-color: var(--object-tools-hover-bg);
}

.object-tools a:focus{
    text-decoration: none;
}

.object-tools a.viewsitelink, .object-tools a.addlink {
    background-repeat: no-repeat;
    background-position: right 7px center;
    padding-right: 26px;
}

.object-tools a.viewsitelink {
    background-image: url(../img/tooltag-arrowright.svg);
}

.object-tools a.addlink {
    background-image: url(../img/tooltag-add.svg);
}

/* OBJECT HISTORY */

#change-history table {
    width: 100%;
}

#change-history table tbody th {
    width: 16em;
}

#change-history .paginator {
    color: var(--body-quiet-color);
    border-bottom: 1px solid var(--hairline-color);
    background: var(--body-bg);
    overflow: hidden;
}

/* PAGE STRUCTURE */

#container {
    position: relative;
    width: 100%;
    min-width: 980px;
    padding: 0;
    display: flex;
    flex-direction: column;
    height: 100%;
}

#container > .main {
    display: flex;
    flex: 1 0 auto;
}

.main > .content {
    flex:  1 0;
    max-width: 100%;
}

.skip-to-content-link {
    position: absolute;
    top: -999px;
    margin: 5px;
    padding: 5px;
    background: var(--body-bg);
    z-index: 1;
}

.skip-to-content-link:focus {
    left: 0px;
    top: 0px;
}

#content {
    padding: 20px 40px;
}

.dashboard #content {
    width: 600px;
}

#content-main {
    float: left;
    width: 100%;
}

#content-related {
    float: right;
    width: 260px;
    position: relative;
    margin-right: -300px;
}

@media (forced-colors: active) {
  #content-related {
      border: 1px solid;
  }
}

/* COLUMN TYPES */

.colMS {
    margin-right: 300px;
}

.colSM {
    margin-left: 300px;
}

.colSM #content-related {
    float: left;
    margin-right: 0;
    margin-left: -300px;
}

.colSM #content-main {
    float: right;
}

.popup .colM {
    width: auto;
}

/* HEADER */

#header {
    width: auto;
    height: auto;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px 40px;
    background: var(--header-bg);
    color: var(--header-color);
}

#header a:link, #header a:visited, #logout-form button {
    color: var(--header-link-color);
}

#header a:focus , #header a:hover {
    text-decoration: underline;
}

@media (forced-colors: active) {
  #header {
      border-bottom: 1px solid;
  }
}

#branding {
    display: flex;
}

#site-name {
    padding: 0;
    margin: 0;
    margin-inline-end: 20px;
    font-weight: 300;
    font-size: 1.5rem;
    color: var(--header-branding-color);
}

#site-name a:link, #site-name a:visited {
    color: var(--accent);
}

#branding h2 {
    padding: 0 10px;
    font-size: 0.875rem;
    margin: -8px 0 8px 0;
    font-weight: normal;
    color: var(--header-color);
}

#branding a:hover {
    text-decoration: none;
}

#logout-form {
    display: inline;
}

#logout-form button {
    background: none;
    border: 0;
    cursor: pointer;
    font-family: var(--font-family-primary);
}

#user-tools {
    float: right;
    margin: 0 0 0 20px;
    text-align: right;
}

#user-tools, #logout-form button{
    padding: 0;
    font-weight: 300;
    font-size: 0.6875rem;
    letter-spacing: 0.5px;
    text-transform: uppercase;
}

#user-tools a, #logout-form button {
    border-bottom: 1px solid rgba(255, 255, 255, 0.25);
}

#user-tools a:focus, #user-tools a:hover,
#logout-form button:active, #logout-form button:hover {
    text-decoration: none;
    border-bottom: 0;
}

#logout-form button:active, #logout-form button:hover {
    margin-bottom: 1px;
}

/* SIDEBAR */

#content-related {
    background: var(--darkened-bg);
}

#content-related .module {
    background: none;
}

#content-related h3 {
    color: var(--body-quiet-color);
    padding: 0 16px;
    margin: 0 0 16px;
}

#content-related h4 {
    font-size: 0.8125rem;
}

#content-related p {
    padding-left: 16px;
    padding-right: 16px;
}

#content-related .actionlist {
    padding: 0;
    margin: 16px;
}

#content-related .actionlist li {
    line-height: 1.2;
    margin-bottom: 10px;
    padding-left: 18px;
}

#content-related .module h2 {
    background: none;
    padding: 16px;
    margin-bottom: 16px;
    border-bottom: 1px solid var(--hairline-color);
    font-size: 1.125rem;
    color: var(--body-fg);
}

.delete-confirmation form input[type="submit"] {
    background: var(--delete-button-bg);
    border-radius: 4px;
    padding: 10px 15px;
    color: var(--button-fg);
}

.delete-confirmation form input[type="submit"]:active,
.delete-confirmation form input[type="submit"]:focus,
.delete-confirmation form input[type="submit"]:hover {
    background: var(--delete-button-hover-bg);
}

.delete-confirmation form .cancel-link {
    display: inline-block;
    vertical-align: middle;
    height: 0.9375rem;
    line-height: 0.9375rem;
    border-radius: 4px;
    padding: 10px 15px;
    color: var(--button-fg);
    background: var(--close-button-bg);
    margin: 0 0 0 10px;
}

.delete-confirmation form .cancel-link:active,
.delete-confirmation form .cancel-link:focus,
.delete-confirmation form .cancel-link:hover {
    background: var(--close-button-hover-bg);
}

/* POPUP */
.popup #content {
    padding: 20px;
}

.popup #container {
    min-width: 0;
}

.popup #header {
    padding: 10px 20px;
}

/* PAGINATOR */

.paginator {
    display: flex;
    align-items: center;
    gap: 4px;
    font-size: 0.8125rem;
    padding-top: 10px;
    padding-bottom: 10px;
    line-height: 22px;
    margin: 0;
    border-top: 1px solid var(--hairline-color);
    width: 100%;
    box-sizing: border-box;
}

.paginator a:link, .paginator a:visited {
    padding: 2px 6px;
    background: var(--button-bg);
    text-decoration: none;
    color: var(--button-fg);
}

.paginator a.showall {
    border: none;
    background: none;
    color: var(--link-fg);
}

.paginator a.showall:focus, .paginator a.showall:hover {
    background: none;
    color: var(--link-hover-color);
}

.paginator .end {
    margin-right: 6px;
}

.paginator .this-page {
    padding: 2px 6px;
    font-weight: bold;
    font-size: 0.8125rem;
    vertical-align: top;
}

.paginator a:focus, .paginator a:hover {
    color: white;
    background: var(--link-hover-color);
}

.paginator input {
    margin-left: auto;
}

.base-svgs {
    display: none;
}

.visually-hidden {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    overflow: hidden;
    clip: rect(0,0,0,0);
    white-space: nowrap;
    border: 0;
    color: var(--body-fg);
    background-color: var(--body-bg);
}

```
--- END OF FILE: staticfiles\admin\css\base.css ---

--- START OF FILE: staticfiles\admin\css\changelists.css ---
```css
/* CHANGELISTS */

#changelist {
    display: flex;
    align-items: flex-start;
    justify-content: space-between;
}

#changelist .changelist-form-container {
    flex: 1 1 auto;
    min-width: 0;
}

#changelist table {
    width: 100%;
}

.change-list .hiddenfields { display:none; }

.change-list .filtered table {
    border-right: none;
}

.change-list .filtered {
    min-height: 400px;
}

.change-list .filtered .results, .change-list .filtered .paginator,
.filtered #toolbar, .filtered div.xfull {
    width: auto;
}

.change-list .filtered table tbody th {
    padding-right: 1em;
}

#changelist-form .results {
    overflow-x: auto;
    width: 100%;
}

#changelist .toplinks {
    border-bottom: 1px solid var(--hairline-color);
}

#changelist .paginator {
    color: var(--body-quiet-color);
    border-bottom: 1px solid var(--hairline-color);
    background: var(--body-bg);
    overflow: hidden;
}

/* CHANGELIST TABLES */

#changelist table thead th {
    padding: 0;
    white-space: nowrap;
    vertical-align: middle;
}

#changelist table thead th.action-checkbox-column {
    width: 1.5em;
    text-align: center;
}

#changelist table tbody td.action-checkbox {
    text-align: center;
}

#changelist table tfoot {
    color: var(--body-quiet-color);
}

/* TOOLBAR */

#toolbar {
    padding: 8px 10px;
    margin-bottom: 15px;
    border-top: 1px solid var(--hairline-color);
    border-bottom: 1px solid var(--hairline-color);
    background: var(--darkened-bg);
    color: var(--body-quiet-color);
}

#toolbar form input {
    border-radius: 4px;
    font-size: 0.875rem;
    padding: 5px;
    color: var(--body-fg);
}

#toolbar #searchbar {
    height: 1.1875rem;
    border: 1px solid var(--border-color);
    padding: 2px 5px;
    margin: 0;
    vertical-align: top;
    font-size: 0.8125rem;
    max-width: 100%;
}

#toolbar #searchbar:focus {
    border-color: var(--body-quiet-color);
}

#toolbar form input[type="submit"] {
    border: 1px solid var(--border-color);
    font-size: 0.8125rem;
    padding: 4px 8px;
    margin: 0;
    vertical-align: middle;
    background: var(--body-bg);
    box-shadow: 0 -15px 20px -10px rgba(0, 0, 0, 0.15) inset;
    cursor: pointer;
    color: var(--body-fg);
}

#toolbar form input[type="submit"]:focus,
#toolbar form input[type="submit"]:hover {
    border-color: var(--body-quiet-color);
}

#changelist-search img {
    vertical-align: middle;
    margin-right: 4px;
}

#changelist-search .help {
    word-break: break-word;
}

/* FILTER COLUMN */

#changelist-filter {
    flex: 0 0 240px;
    order: 1;
    background: var(--darkened-bg);
    border-left: none;
    margin: 0 0 0 30px;
}

@media (forced-colors: active) {
  #changelist-filter {
      border: 1px solid;
  }
}

#changelist-filter h2 {
    font-size: 0.875rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    padding: 5px 15px;
    margin-bottom: 12px;
    border-bottom: none;
}

#changelist-filter h3,
#changelist-filter details summary {
    font-weight: 400;
    padding: 0 15px;
    margin-bottom: 10px;
}

#changelist-filter details summary > * {
    display: inline;
}

#changelist-filter details > summary {
    list-style-type: none;
}

#changelist-filter details > summary::-webkit-details-marker {
    display: none;
}

#changelist-filter details > summary::before {
    content: '→';
    font-weight: bold;
    color: var(--link-hover-color);
}

#changelist-filter details[open] > summary::before {
    content: '↓';
}

#changelist-filter ul {
    margin: 5px 0;
    padding: 0 15px 15px;
    border-bottom: 1px solid var(--hairline-color);
}

#changelist-filter ul:last-child {
    border-bottom: none;
}

#changelist-filter li {
    list-style-type: none;
    margin-left: 0;
    padding-left: 0;
}

#changelist-filter a {
    display: block;
    color: var(--body-quiet-color);
    word-break: break-word;
}

#changelist-filter li.selected {
    border-left: 5px solid var(--hairline-color);
    padding-left: 10px;
    margin-left: -15px;
}

#changelist-filter li.selected a {
    color: var(--link-selected-fg);
}

#changelist-filter a:focus, #changelist-filter a:hover,
#changelist-filter li.selected a:focus,
#changelist-filter li.selected a:hover {
    color: var(--link-hover-color);
}

#changelist-filter #changelist-filter-extra-actions {
    font-size: 0.8125rem;
    margin-bottom: 10px;
    border-bottom: 1px solid var(--hairline-color);
}

/* DATE DRILLDOWN */

.change-list .toplinks {
    display: flex;
    padding-bottom: 5px;
    flex-wrap: wrap;
    gap: 3px 17px;
    font-weight: bold;
}

.change-list .toplinks a {
    font-size: 0.8125rem;
}

.change-list .toplinks .date-back {
    color: var(--body-quiet-color);
}

.change-list .toplinks .date-back:focus,
.change-list .toplinks .date-back:hover {
    color: var(--link-hover-color);
}

/* ACTIONS */

.filtered .actions {
    border-right: none;
}

#changelist table input {
    margin: 0;
    vertical-align: baseline;
}

/* Once the :has() pseudo-class is supported by all browsers, the tr.selected
   selector and the JS adding the class can be removed. */
#changelist tbody tr.selected {
    background-color: var(--selected-row);
}

#changelist tbody tr:has(.action-select:checked) {
    background-color: var(--selected-row);
}

@media (forced-colors: active) {
    #changelist tbody tr.selected {
        background-color: SelectedItem;
    }
    #changelist tbody tr:has(.action-select:checked) {
        background-color: SelectedItem;
    }
}

#changelist .actions {
    padding: 10px;
    background: var(--body-bg);
    border-top: none;
    border-bottom: none;
    line-height: 1.5rem;
    color: var(--body-quiet-color);
    width: 100%;
}

#changelist .actions span.all,
#changelist .actions span.action-counter,
#changelist .actions span.clear,
#changelist .actions span.question {
    font-size: 0.8125rem;
    margin: 0 0.5em;
}

#changelist .actions:last-child {
    border-bottom: none;
}

#changelist .actions select {
    vertical-align: top;
    height: 1.5rem;
    color: var(--body-fg);
    border: 1px solid var(--border-color);
    border-radius: 4px;
    font-size: 0.875rem;
    padding: 0 0 0 4px;
    margin: 0;
    margin-left: 10px;
}

#changelist .actions select:focus {
    border-color: var(--body-quiet-color);
}

#changelist .actions label {
    display: inline-block;
    vertical-align: middle;
    font-size: 0.8125rem;
}

#changelist .actions .button {
    font-size: 0.8125rem;
    border: 1px solid var(--border-color);
    border-radius: 4px;
    background: var(--body-bg);
    box-shadow: 0 -15px 20px -10px rgba(0, 0, 0, 0.15) inset;
    cursor: pointer;
    height: 1.5rem;
    line-height: 1;
    padding: 4px 8px;
    margin: 0;
    color: var(--body-fg);
}

#changelist .actions .button:focus, #changelist .actions .button:hover {
    border-color: var(--body-quiet-color);
}

```
--- END OF FILE: staticfiles\admin\css\changelists.css ---

--- START OF FILE: staticfiles\admin\css\dark_mode.css ---
```css
@media (prefers-color-scheme: dark) {
    :root {
      --primary: #264b5d;
      --primary-fg: #f7f7f7;
  
      --body-fg: #eeeeee;
      --body-bg: #121212;
      --body-quiet-color: #d0d0d0;
      --body-medium-color: #e0e0e0;
      --body-loud-color: #ffffff;
  
      --breadcrumbs-link-fg: #e0e0e0;
      --breadcrumbs-bg: var(--primary);
  
      --link-fg: #81d4fa;
      --link-hover-color: #4ac1f7;
      --link-selected-fg: #6f94c6;
  
      --hairline-color: #272727;
      --border-color: #353535;
  
      --error-fg: #e35f5f;
      --message-success-bg: #006b1b;
      --message-warning-bg: #583305;
      --message-error-bg: #570808;
  
      --darkened-bg: #212121;
      --selected-bg: #1b1b1b;
      --selected-row: #00363a;
  
      --close-button-bg: #333333;
      --close-button-hover-bg: #666666;

      color-scheme: dark;
    }
  }


html[data-theme="dark"] {
    --primary: #264b5d;
    --primary-fg: #f7f7f7;

    --body-fg: #eeeeee;
    --body-bg: #121212;
    --body-quiet-color: #d0d0d0;
    --body-medium-color: #e0e0e0;
    --body-loud-color: #ffffff;

    --breadcrumbs-link-fg: #e0e0e0;
    --breadcrumbs-bg: var(--primary);

    --link-fg: #81d4fa;
    --link-hover-color: #4ac1f7;
    --link-selected-fg: #6f94c6;

    --hairline-color: #272727;
    --border-color: #353535;

    --error-fg: #e35f5f;
    --message-success-bg: #006b1b;
    --message-warning-bg: #583305;
    --message-error-bg: #570808;

    --darkened-bg: #212121;
    --selected-bg: #1b1b1b;
    --selected-row: #00363a;

    --close-button-bg: #333333;
    --close-button-hover-bg: #666666;

    color-scheme: dark;
}

/* THEME SWITCH */
.theme-toggle {
    cursor: pointer;
    border: none;
    padding: 0;
    background: transparent;
    vertical-align: middle;
    margin-inline-start: 5px;
    margin-top: -1px;
}

.theme-toggle svg {
    vertical-align: middle;
    height: 1.5rem;
    width: 1.5rem;
    display: none;
}

/*
Fully hide screen reader text so we only show the one matching the current
theme.
*/
.theme-toggle .visually-hidden {
    display: none;
}

html[data-theme="auto"] .theme-toggle .theme-label-when-auto {
    display: block;
}

html[data-theme="dark"] .theme-toggle .theme-label-when-dark {
    display: block;
}

html[data-theme="light"] .theme-toggle .theme-label-when-light {
    display: block;
}

/* ICONS */
.theme-toggle svg.theme-icon-when-auto,
.theme-toggle svg.theme-icon-when-dark,
.theme-toggle svg.theme-icon-when-light {
    fill: var(--header-link-color);
    color: var(--header-bg);
}

html[data-theme="auto"] .theme-toggle svg.theme-icon-when-auto {
    display: block;
}

html[data-theme="dark"] .theme-toggle svg.theme-icon-when-dark {
    display: block;
}

html[data-theme="light"] .theme-toggle svg.theme-icon-when-light {
    display: block;
}

```
--- END OF FILE: staticfiles\admin\css\dark_mode.css ---

--- START OF FILE: staticfiles\admin\css\dashboard.css ---
```css
/* DASHBOARD */
.dashboard td, .dashboard th {
    word-break: break-word;
}

.dashboard .module table th {
    width: 100%;
}

.dashboard .module table td {
    white-space: nowrap;
}

.dashboard .module table td a {
    display: block;
    padding-right: .6em;
}

/* RECENT ACTIONS MODULE */

.module ul.actionlist {
    margin-left: 0;
}

ul.actionlist li {
    list-style-type: none;
    overflow: hidden;
    text-overflow: ellipsis;
}

```
--- END OF FILE: staticfiles\admin\css\dashboard.css ---

--- START OF FILE: staticfiles\admin\css\forms.css ---
```css
@import url('widgets.css');

/* FORM ROWS */

.form-row {
    overflow: hidden;
    padding: 10px;
    font-size: 0.8125rem;
    border-bottom: 1px solid var(--hairline-color);
}

.form-row img, .form-row input {
    vertical-align: middle;
}

.form-row label input[type="checkbox"] {
    margin-top: 0;
    vertical-align: 0;
}

form .form-row p {
    padding-left: 0;
}

.flex-container {
    display: flex;
}

.form-multiline {
    flex-wrap: wrap;
}

.form-multiline > div {
    padding-bottom: 10px;
}

/* FORM LABELS */

label {
    font-weight: normal;
    color: var(--body-quiet-color);
    font-size: 0.8125rem;
}

.required label, label.required {
    font-weight: bold;
}

/* RADIO BUTTONS */

form div.radiolist div {
    padding-right: 7px;
}

form div.radiolist.inline div {
    display: inline-block;
}

form div.radiolist label {
    width: auto;
}

form div.radiolist input[type="radio"] {
    margin: -2px 4px 0 0;
    padding: 0;
}

form ul.inline {
    margin-left: 0;
    padding: 0;
}

form ul.inline li {
    float: left;
    padding-right: 7px;
}

/* FIELDSETS */

fieldset .fieldset-heading,
fieldset .inline-heading,
:not(.inline-related) .collapse summary {
    border: 1px solid var(--header-bg);
    margin: 0;
    padding: 8px;
    font-weight: 400;
    font-size: 0.8125rem;
    background: var(--header-bg);
    color: var(--header-link-color);
}

/* ALIGNED FIELDSETS */

.aligned label {
    display: block;
    padding: 4px 10px 0 0;
    min-width: 160px;
    width: 160px;
    word-wrap: break-word;
}

.aligned label:not(.vCheckboxLabel):after {
    content: '';
    display: inline-block;
    vertical-align: middle;
}

.aligned label + p, .aligned .checkbox-row + div.help, .aligned label + div.readonly {
    padding: 6px 0;
    margin-top: 0;
    margin-bottom: 0;
    margin-left: 0;
    overflow-wrap: break-word;
}

.aligned ul label {
    display: inline;
    float: none;
    width: auto;
}

.aligned .form-row input {
    margin-bottom: 0;
}

.colMS .aligned .vLargeTextField, .colMS .aligned .vXMLLargeTextField {
    width: 350px;
}

form .aligned ul {
    margin-left: 160px;
    padding-left: 10px;
}

form .aligned div.radiolist {
    display: inline-block;
    margin: 0;
    padding: 0;
}

form .aligned p.help,
form .aligned div.help {
    margin-top: 0;
    margin-left: 160px;
    padding-left: 10px;
}

form .aligned p.date div.help.timezonewarning,
form .aligned p.datetime div.help.timezonewarning,
form .aligned p.time div.help.timezonewarning {
    margin-left: 0;
    padding-left: 0;
    font-weight: normal;
}

form .aligned p.help:last-child,
form .aligned div.help:last-child {
    margin-bottom: 0;
    padding-bottom: 0;
}

form .aligned input + p.help,
form .aligned textarea + p.help,
form .aligned select + p.help,
form .aligned input + div.help,
form .aligned textarea + div.help,
form .aligned select + div.help {
    margin-left: 160px;
    padding-left: 10px;
}

form .aligned select option:checked {
    background-color: var(--selected-row);
}

form .aligned ul li {
    list-style: none;
}

form .aligned table p {
    margin-left: 0;
    padding-left: 0;
}

.aligned .vCheckboxLabel {
    padding: 1px 0 0 5px;
}

.aligned .vCheckboxLabel + p.help,
.aligned .vCheckboxLabel + div.help {
    margin-top: -4px;
}

.colM .aligned .vLargeTextField, .colM .aligned .vXMLLargeTextField {
    width: 610px;
}

fieldset .fieldBox {
    margin-right: 20px;
}

/* WIDE FIELDSETS */

.wide label {
    width: 200px;
}

form .wide p.help,
form .wide ul.errorlist,
form .wide div.help {
    padding-left: 50px;
}

form div.help ul {
    padding-left: 0;
    margin-left: 0;
}

.colM fieldset.wide .vLargeTextField, .colM fieldset.wide .vXMLLargeTextField {
    width: 450px;
}

/* COLLAPSIBLE FIELDSETS */

.collapse summary .fieldset-heading,
.collapse summary .inline-heading {
    background: transparent;
    border: none;
    color: currentColor;
    display: inline;
    margin: 0;
    padding: 0;
}

/* MONOSPACE TEXTAREAS */

fieldset.monospace textarea {
    font-family: var(--font-family-monospace);
}

/* SUBMIT ROW */

.submit-row {
    padding: 12px 14px 12px;
    margin: 0 0 20px;
    background: var(--darkened-bg);
    border: 1px solid var(--hairline-color);
    border-radius: 4px;
    overflow: hidden;
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
}

body.popup .submit-row {
    overflow: auto;
}

.submit-row input {
    height: 2.1875rem;
    line-height: 0.9375rem;
}

.submit-row input, .submit-row a {
    margin: 0;
}

.submit-row input.default {
    text-transform: uppercase;
}

.submit-row a.deletelink {
    margin-left: auto;
}

.submit-row a.deletelink {
    display: block;
    background: var(--delete-button-bg);
    border-radius: 4px;
    padding: 0.625rem 0.9375rem;
    height: 0.9375rem;
    line-height: 0.9375rem;
    color: var(--button-fg);
}

.submit-row a.closelink {
    display: inline-block;
    background: var(--close-button-bg);
    border-radius: 4px;
    padding: 10px 15px;
    height: 0.9375rem;
    line-height: 0.9375rem;
    color: var(--button-fg);
}

.submit-row a.deletelink:focus,
.submit-row a.deletelink:hover,
.submit-row a.deletelink:active {
    background: var(--delete-button-hover-bg);
    text-decoration: none;
}

.submit-row a.closelink:focus,
.submit-row a.closelink:hover,
.submit-row a.closelink:active {
    background: var(--close-button-hover-bg);
    text-decoration: none;
}

/* CUSTOM FORM FIELDS */

.vSelectMultipleField {
    vertical-align: top;
}

.vCheckboxField {
    border: none;
}

.vDateField, .vTimeField {
    margin-right: 2px;
    margin-bottom: 4px;
}

.vDateField {
    min-width: 6.85em;
}

.vTimeField {
    min-width: 4.7em;
}

.vURLField {
    width: 30em;
}

.vLargeTextField, .vXMLLargeTextField {
    width: 48em;
}

.flatpages-flatpage #id_content {
    height: 40.2em;
}

.module table .vPositiveSmallIntegerField {
    width: 2.2em;
}

.vIntegerField {
    width: 5em;
}

.vBigIntegerField {
    width: 10em;
}

.vForeignKeyRawIdAdminField {
    width: 5em;
}

.vTextField, .vUUIDField {
    width: 20em;
}

/* INLINES */

.inline-group {
    padding: 0;
    margin: 0 0 30px;
}

.inline-group thead th {
    padding: 8px 10px;
}

.inline-group .aligned label {
    width: 160px;
}

.inline-related {
    position: relative;
}

.inline-related h4,
.inline-related:not(.tabular) .collapse summary {
    margin: 0;
    color: var(--body-medium-color);
    padding: 5px;
    font-size: 0.8125rem;
    background: var(--darkened-bg);
    border: 1px solid var(--hairline-color);
    border-left-color: var(--darkened-bg);
    border-right-color: var(--darkened-bg);
}

.inline-related h3 span.delete {
    float: right;
}

.inline-related h3 span.delete label {
    margin-left: 2px;
    font-size: 0.6875rem;
}

.inline-related fieldset {
    margin: 0;
    background: var(--body-bg);
    border: none;
    width: 100%;
}

.inline-group .tabular fieldset.module {
    border: none;
}

.inline-related.tabular fieldset.module table {
    width: 100%;
    overflow-x: scroll;
}

.last-related fieldset {
    border: none;
}

.inline-group .tabular tr.has_original td {
    padding-top: 2em;
}

.inline-group .tabular tr td.original {
    padding: 2px 0 0 0;
    width: 0;
    _position: relative;
}

.inline-group .tabular th.original {
    width: 0px;
    padding: 0;
}

.inline-group .tabular td.original p {
    position: absolute;
    left: 0;
    height: 1.1em;
    padding: 2px 9px;
    overflow: hidden;
    font-size: 0.5625rem;
    font-weight: bold;
    color: var(--body-quiet-color);
    _width: 700px;
}

.inline-group div.add-row,
.inline-group .tabular tr.add-row td {
    color: var(--body-quiet-color);
    background: var(--darkened-bg);
    padding: 8px 10px;
    border-bottom: 1px solid var(--hairline-color);
}

.inline-group .tabular tr.add-row td {
    padding: 8px 10px;
    border-bottom: 1px solid var(--hairline-color);
}

.inline-group div.add-row a,
.inline-group .tabular tr.add-row td a {
    font-size: 0.75rem;
}

.empty-form {
    display: none;
}

/* RELATED FIELD ADD ONE / LOOKUP */

.related-lookup {
    margin-left: 5px;
    display: inline-block;
    vertical-align: middle;
    background-repeat: no-repeat;
    background-size: 14px;
}

.related-lookup {
    width: 1rem;
    height: 1rem;
    background-image: url(../img/search.svg);
}

form .related-widget-wrapper ul {
    display: inline-block;
    margin-left: 0;
    padding-left: 0;
}

.clearable-file-input input {
    margin-top: 0;
}

```
--- END OF FILE: staticfiles\admin\css\forms.css ---

--- START OF FILE: staticfiles\admin\css\login.css ---
```css
/* LOGIN FORM */

.login {
    background: var(--darkened-bg);
    height: auto;
}

.login #header {
    height: auto;
    padding: 15px 16px;
    justify-content: center;
}

.login #header h1 {
    font-size: 1.125rem;
    margin: 0;
}

.login #header h1 a {
    color: var(--header-link-color);
}

.login #content {
    padding: 20px;
}

.login #container {
    background: var(--body-bg);
    border: 1px solid var(--hairline-color);
    border-radius: 4px;
    overflow: hidden;
    width: 28em;
    min-width: 300px;
    margin: 100px auto;
    height: auto;
}

.login .form-row {
    padding: 4px 0;
}

.login .form-row label {
    display: block;
    line-height: 2em;
}

.login .form-row #id_username, .login .form-row #id_password {
    padding: 8px;
    width: 100%;
    box-sizing: border-box;
}

.login .submit-row {
    padding: 1em 0 0 0;
    margin: 0;
    text-align: center;
}

.login .password-reset-link {
    text-align: center;
}

```
--- END OF FILE: staticfiles\admin\css\login.css ---

--- START OF FILE: staticfiles\admin\css\nav_sidebar.css ---
```css
.sticky {
    position: sticky;
    top: 0;
    max-height: 100vh;
}

.toggle-nav-sidebar {
    z-index: 20;
    left: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    flex: 0 0 23px;
    width: 23px;
    border: 0;
    border-right: 1px solid var(--hairline-color);
    background-color: var(--body-bg);
    cursor: pointer;
    font-size: 1.25rem;
    color: var(--link-fg);
    padding: 0;
}

[dir="rtl"] .toggle-nav-sidebar {
    border-left: 1px solid var(--hairline-color);
    border-right: 0;
}

.toggle-nav-sidebar:hover,
.toggle-nav-sidebar:focus {
    background-color: var(--darkened-bg);
}

#nav-sidebar {
    z-index: 15;
    flex: 0 0 275px;
    left: -276px;
    margin-left: -276px;
    border-top: 1px solid transparent;
    border-right: 1px solid var(--hairline-color);
    background-color: var(--body-bg);
    overflow: auto;
}

[dir="rtl"] #nav-sidebar {
    border-left: 1px solid var(--hairline-color);
    border-right: 0;
    left: 0;
    margin-left: 0;
    right: -276px;
    margin-right: -276px;
}

.toggle-nav-sidebar::before {
    content: '\00BB';
}

.main.shifted .toggle-nav-sidebar::before {
    content: '\00AB';
}

.main > #nav-sidebar {
    visibility: hidden;
}

.main.shifted > #nav-sidebar {
    margin-left: 0;
    visibility: visible;
}

[dir="rtl"] .main.shifted > #nav-sidebar {
    margin-right: 0;
}

#nav-sidebar .module th {
    width: 100%;
    overflow-wrap: anywhere;
}

#nav-sidebar .module th,
#nav-sidebar .module caption {
    padding-left: 16px;
}

#nav-sidebar .module td {
    white-space: nowrap;
}

[dir="rtl"] #nav-sidebar .module th,
[dir="rtl"] #nav-sidebar .module caption {
    padding-left: 8px;
    padding-right: 16px;
}

#nav-sidebar .current-app .section:link,
#nav-sidebar .current-app .section:visited {
    color: var(--header-color);
    font-weight: bold;
}

#nav-sidebar .current-model {
    background: var(--selected-row);
}

@media (forced-colors: active) {
    #nav-sidebar .current-model {
        background-color: SelectedItem;
    }
}

.main > #nav-sidebar + .content {
    max-width: calc(100% - 23px);
}

.main.shifted > #nav-sidebar + .content {
    max-width: calc(100% - 299px);
}

@media (max-width: 767px) {
    #nav-sidebar, #toggle-nav-sidebar {
        display: none;
    }

    .main > #nav-sidebar + .content,
    .main.shifted > #nav-sidebar + .content {
        max-width: 100%;
    }
}

#nav-filter {
    width: 100%;
    box-sizing: border-box;
    padding: 2px 5px;
    margin: 5px 0;
    border: 1px solid var(--border-color);
    background-color: var(--darkened-bg);
    color: var(--body-fg);
}

#nav-filter:focus {
    border-color: var(--body-quiet-color);
}

#nav-filter.no-results {
    background: var(--message-error-bg);
}

#nav-sidebar table {
    width: 100%;
}

```
--- END OF FILE: staticfiles\admin\css\nav_sidebar.css ---

--- START OF FILE: staticfiles\admin\css\responsive.css ---
```css
/* Tablets */

input[type="submit"], button {
    -webkit-appearance: none;
    appearance: none;
}

@media (max-width: 1024px) {
    /* Basic */

    html {
        -webkit-text-size-adjust: 100%;
    }

    td, th {
        padding: 10px;
        font-size: 0.875rem;
    }

    .small {
        font-size: 0.75rem;
    }

    /* Layout */

    #container {
        min-width: 0;
    }

    #content {
        padding: 15px 20px 20px;
    }

    div.breadcrumbs {
        padding: 10px 30px;
    }

    /* Header */

    #header {
        flex-direction: column;
        padding: 15px 30px;
        justify-content: flex-start;
    }

    #site-name {
        margin: 0 0 8px;
        line-height: 1.2;
    }

    #user-tools {
        margin: 0;
        font-weight: 400;
        line-height: 1.85;
        text-align: left;
    }

    #user-tools a {
        display: inline-block;
        line-height: 1.4;
    }

    /* Dashboard */

    .dashboard #content {
        width: auto;
    }

    #content-related {
        margin-right: -290px;
    }

    .colSM #content-related {
        margin-left: -290px;
    }

    .colMS {
        margin-right: 290px;
    }

    .colSM {
        margin-left: 290px;
    }

    .dashboard .module table td a {
        padding-right: 0;
    }

    td .changelink, td .addlink {
        font-size: 0.8125rem;
    }

    /* Changelist */

    #toolbar {
        border: none;
        padding: 15px;
    }

    #changelist-search > div {
        display: flex;
        flex-wrap: nowrap;
        max-width: 480px;
    }

    #changelist-search label {
        line-height: 1.375rem;
    }

    #toolbar form #searchbar {
        flex: 1 0 auto;
        width: 0;
        height: 1.375rem;
        margin: 0 10px 0 6px;
    }

    #toolbar form input[type=submit] {
        flex: 0 1 auto;
    }

    #changelist-search .quiet {
        width: 0;
        flex: 1 0 auto;
        margin: 5px 0 0 25px;
    }

    #changelist .actions {
        display: flex;
        flex-wrap: wrap;
        padding: 15px 0;
    }

    #changelist .actions label {
        display: flex;
    }

    #changelist .actions select {
        background: var(--body-bg);
    }

    #changelist .actions .button {
        min-width: 48px;
        margin: 0 10px;
    }

    #changelist .actions span.all,
    #changelist .actions span.clear,
    #changelist .actions span.question,
    #changelist .actions span.action-counter {
        font-size: 0.6875rem;
        margin: 0 10px 0 0;
    }

    #changelist-filter {
        flex-basis: 200px;
    }

    .change-list .filtered .results,
    .change-list .filtered .paginator,
    .filtered #toolbar,
    .filtered .actions,

    #changelist .paginator {
        border-top-color: var(--hairline-color); /* XXX Is this used at all? */
    }

    #changelist .results + .paginator {
        border-top: none;
    }

    /* Forms */

    label {
        font-size: 1rem;
    }

    /*
    Minifiers remove the default (text) "type" attribute from "input" HTML
    tags. Add input:not([type]) to make the CSS stylesheet work the same.
    */
    .form-row input:not([type]),
    .form-row input[type=text],
    .form-row input[type=password],
    .form-row input[type=email],
    .form-row input[type=url],
    .form-row input[type=tel],
    .form-row input[type=number],
    .form-row textarea,
    .form-row select,
    .form-row .vTextField {
        box-sizing: border-box;
        margin: 0;
        padding: 6px 8px;
        min-height: 2.25rem;
        font-size: 1rem;
    }

    .form-row select {
        height: 2.25rem;
    }

    .form-row select[multiple] {
        height: auto;
        min-height: 0;
    }

    fieldset .fieldBox + .fieldBox {
        margin-top: 10px;
        padding-top: 10px;
        border-top: 1px solid var(--hairline-color);
    }

    textarea {
        max-width: 100%;
        max-height: 120px;
    }

    .aligned label {
        padding-top: 6px;
    }

    .aligned .related-lookup,
    .aligned .datetimeshortcuts,
    .aligned .related-lookup + strong {
        align-self: center;
        margin-left: 15px;
    }

    form .aligned div.radiolist {
        margin-left: 2px;
    }

    .submit-row {
        padding: 8px;
    }

    .submit-row a.deletelink {
        padding: 10px 7px;
    }

    .button, input[type=submit], input[type=button], .submit-row input, a.button {
        padding: 7px;
    }

    /* Selector */

    .selector {
        display: flex;
        width: 100%;
    }

    .selector .selector-filter {
        display: flex;
        align-items: center;
    }

    .selector .selector-filter input {
        width: 100%;
        min-height: 0;
        flex: 1 1;
    }

    .selector-available, .selector-chosen {
        width: auto;
        flex: 1 1;
        display: flex;
        flex-direction: column;
    }

    .selector select {
        width: 100%;
        flex: 1 0 auto;
        margin-bottom: 5px;
    }

    .selector-chooseall, .selector-clearall {
        align-self: center;
    }

    .stacked {
        flex-direction: column;
        max-width: 480px;
    }

    .stacked > * {
        flex: 0 1 auto;
    }

    .stacked select {
        margin-bottom: 0;
    }

    .stacked .selector-available, .stacked .selector-chosen {
        width: auto;
    }

    .stacked ul.selector-chooser {
        padding: 0 2px;
        transform: none;
    }

    .stacked .selector-chooser li {
        padding: 3px;
    }

    .help-tooltip, .selector .help-icon {
        display: none;
    }

    .datetime input {
        width: 50%;
        max-width: 120px;
    }

    .datetime span {
        font-size: 0.8125rem;
    }

    .datetime .timezonewarning {
        display: block;
        font-size: 0.6875rem;
        color: var(--body-quiet-color);
    }

    .datetimeshortcuts {
        color: var(--border-color); /* XXX Redundant, .datetime span also sets #ccc */
    }

    .form-row .datetime input.vDateField, .form-row .datetime input.vTimeField {
        width: 75%;
    }

    .inline-group {
        overflow: auto;
    }

    /* Messages */

    ul.messagelist li {
        padding-left: 55px;
        background-position: 30px 12px;
    }

    ul.messagelist li.error {
        background-position: 30px 12px;
    }

    ul.messagelist li.warning {
        background-position: 30px 14px;
    }

    /* Login */

    .login #header {
        padding: 15px 20px;
    }

    .login #site-name {
        margin: 0;
    }

    /* GIS */

    div.olMap {
        max-width: calc(100vw - 30px);
        max-height: 300px;
    }

    .olMap + .clear_features {
        display: block;
        margin-top: 10px;
    }

    /* Docs */

    .module table.xfull {
        width: 100%;
    }

    pre.literal-block {
        overflow: auto;
    }
}

/* Mobile */

@media (max-width: 767px) {
    /* Layout */

    #header, #content {
        padding: 15px;
    }

    div.breadcrumbs {
        padding: 10px 15px;
    }

    /* Dashboard */

    .colMS, .colSM {
        margin: 0;
    }

    #content-related, .colSM #content-related {
        width: 100%;
        margin: 0;
    }

    #content-related .module {
        margin-bottom: 0;
    }

    #content-related .module h2 {
        padding: 10px 15px;
        font-size: 1rem;
    }

    /* Changelist */

    #changelist {
        align-items: stretch;
        flex-direction: column;
    }

    #toolbar {
        padding: 10px;
    }

    #changelist-filter {
        margin-left: 0;
    }

    #changelist .actions label {
        flex: 1 1;
    }

    #changelist .actions select {
        flex: 1 0;
        width: 100%;
    }

    #changelist .actions span {
        flex: 1 0 100%;
    }

    #changelist-filter {
        position: static;
        width: auto;
        margin-top: 30px;
    }

    .object-tools {
        float: none;
        margin: 0 0 15px;
        padding: 0;
        overflow: hidden;
    }

    .object-tools li {
        height: auto;
        margin-left: 0;
    }

    .object-tools li + li {
        margin-left: 15px;
    }

    /* Forms */

    .form-row {
        padding: 15px 0;
    }

    .aligned .form-row,
    .aligned .form-row > div {
        max-width: 100vw;
    }

    .aligned .form-row > div {
        width: calc(100vw - 30px);
    }

    .flex-container {
        flex-flow: column;
    }

    .flex-container.checkbox-row {
        flex-flow: row;
    }

    textarea {
        max-width: none;
    }

    .vURLField {
        width: auto;
    }

    fieldset .fieldBox + .fieldBox {
        margin-top: 15px;
        padding-top: 15px;
    }

    .aligned label {
        width: 100%;
        min-width: auto;
        padding: 0 0 10px;
    }

    .aligned label:after {
        max-height: 0;
    }

    .aligned .form-row input,
    .aligned .form-row select,
    .aligned .form-row textarea {
        flex: 1 1 auto;
        max-width: 100%;
    }

    .aligned .checkbox-row input {
        flex: 0 1 auto;
        margin: 0;
    }

    .aligned .vCheckboxLabel {
        flex: 1 0;
        padding: 1px 0 0 5px;
    }

    .aligned label + p,
    .aligned label + div.help,
    .aligned label + div.readonly {
        padding: 0;
        margin-left: 0;
    }

    .aligned p.file-upload {
        font-size: 0.8125rem;
    }

    span.clearable-file-input {
        margin-left: 15px;
    }

    span.clearable-file-input label {
        font-size: 0.8125rem;
        padding-bottom: 0;
    }

    .aligned .timezonewarning {
        flex: 1 0 100%;
        margin-top: 5px;
    }

    form .aligned .form-row div.help {
        width: 100%;
        margin: 5px 0 0;
        padding: 0;
    }

    form .aligned ul,
    form .aligned ul.errorlist {
        margin-left: 0;
        padding-left: 0;
    }

    form .aligned div.radiolist {
        margin-top: 5px;
        margin-right: 15px;
        margin-bottom: -3px;
    }

    form .aligned div.radiolist:not(.inline) div + div {
        margin-top: 5px;
    }

    /* Related widget */

    .related-widget-wrapper {
        width: 100%;
        display: flex;
        align-items: flex-start;
    }

    .related-widget-wrapper .selector {
        order: 1;
        flex: 1 0 auto;
    }

    .related-widget-wrapper > a {
        order: 2;
    }

    .related-widget-wrapper .radiolist ~ a {
        align-self: flex-end;
    }

    .related-widget-wrapper > select ~ a {
        align-self: center;
    }

    /* Selector */

    .selector {
        flex-direction: column;
        gap: 10px 0;
    }

    .selector-available, .selector-chosen {
        flex: 1 1 auto;
    }

    .selector select {
        max-height: 96px;
    }

    .selector ul.selector-chooser {
        display: flex;
        width: 60px;
        height: 30px;
        padding: 0 2px;
        transform: none;
    }

    .selector ul.selector-chooser li {
        float: left;
    }

    .selector-remove {
        background-position: 0 0;
    }

    :enabled.selector-remove:focus, :enabled.selector-remove:hover {
        background-position: 0 -24px;
    }

    .selector-add  {
        background-position: 0 -48px;
    }

    :enabled.selector-add:focus, :enabled.selector-add:hover {
        background-position: 0 -72px;
    }

    /* Inlines */

    .inline-group[data-inline-type="stacked"] .inline-related {
        border: 1px solid var(--hairline-color);
        border-radius: 4px;
        margin-top: 15px;
        overflow: auto;
    }

    .inline-group[data-inline-type="stacked"] .inline-related > * {
        box-sizing: border-box;
    }

    .inline-group[data-inline-type="stacked"] .inline-related .module {
        padding: 0 10px;
    }

    .inline-group[data-inline-type="stacked"] .inline-related .module .form-row {
        border-top: 1px solid var(--hairline-color);
        border-bottom: none;
    }

    .inline-group[data-inline-type="stacked"] .inline-related .module .form-row:first-child {
        border-top: none;
    }

    .inline-group[data-inline-type="stacked"] .inline-related h3 {
        padding: 10px;
        border-top-width: 0;
        border-bottom-width: 2px;
        display: flex;
        flex-wrap: wrap;
        align-items: center;
    }

    .inline-group[data-inline-type="stacked"] .inline-related h3 .inline_label {
        margin-right: auto;
    }

    .inline-group[data-inline-type="stacked"] .inline-related h3 span.delete {
        float: none;
        flex: 1 1 100%;
        margin-top: 5px;
    }

    .inline-group[data-inline-type="stacked"] .aligned .form-row > div:not([class]) {
        width: 100%;
    }

    .inline-group[data-inline-type="stacked"] .aligned label {
        width: 100%;
    }

    .inline-group[data-inline-type="stacked"] div.add-row {
        margin-top: 15px;
        border: 1px solid var(--hairline-color);
        border-radius: 4px;
    }

    .inline-group div.add-row,
    .inline-group .tabular tr.add-row td {
        padding: 0;
    }

    .inline-group div.add-row a,
    .inline-group .tabular tr.add-row td a {
        display: block;
        padding: 8px 10px 8px 26px;
        background-position: 8px 9px;
    }

    /* Submit row */

    .submit-row {
        padding: 10px;
        margin: 0 0 15px;
        flex-direction: column;
        gap: 8px;
    }

    .submit-row input, .submit-row input.default, .submit-row a {
        text-align: center;
    }

    .submit-row a.closelink {
        padding: 10px 0;
        text-align: center;
    }

    .submit-row a.deletelink {
        margin: 0;
    }

    /* Messages */

    ul.messagelist li {
        padding-left: 40px;
        background-position: 15px 12px;
    }

    ul.messagelist li.error {
        background-position: 15px 12px;
    }

    ul.messagelist li.warning {
        background-position: 15px 14px;
    }

    /* Paginator */

    .paginator .this-page, .paginator a:link, .paginator a:visited {
        padding: 4px 10px;
    }

    /* Login */

    body.login {
        padding: 0 15px;
    }

    .login #container {
        width: auto;
        max-width: 480px;
        margin: 50px auto;
    }

    .login #header,
    .login #content {
        padding: 15px;
    }

    .login #content-main {
        float: none;
    }

    .login .form-row {
        padding: 0;
    }

    .login .form-row + .form-row {
        margin-top: 15px;
    }

    .login .form-row label {
        margin: 0 0 5px;
        line-height: 1.2;
    }

    .login .submit-row {
        padding: 15px 0 0;
    }

    .login br {
        display: none;
    }

    .login .submit-row input {
        margin: 0;
        text-transform: uppercase;
    }

    .errornote {
        margin: 0 0 20px;
        padding: 8px 12px;
        font-size: 0.8125rem;
    }

    /* Calendar and clock */

    .calendarbox, .clockbox {
        position: fixed !important;
        top: 50% !important;
        left: 50% !important;
        transform: translate(-50%, -50%);
        margin: 0;
        border: none;
        overflow: visible;
    }

    .calendarbox:before, .clockbox:before {
        content: '';
        position: fixed;
        top: 50%;
        left: 50%;
        width: 100vw;
        height: 100vh;
        background: rgba(0, 0, 0, 0.75);
        transform: translate(-50%, -50%);
    }

    .calendarbox > *, .clockbox > * {
        position: relative;
        z-index: 1;
    }

    .calendarbox > div:first-child {
        z-index: 2;
    }

    .calendarbox .calendar, .clockbox h2 {
        border-radius: 4px 4px 0 0;
        overflow: hidden;
    }

    .calendarbox .calendar-cancel, .clockbox .calendar-cancel {
        border-radius: 0 0 4px 4px;
        overflow: hidden;
    }

    .calendar-shortcuts {
        padding: 10px 0;
        font-size: 0.75rem;
        line-height: 0.75rem;
    }

    .calendar-shortcuts a {
        margin: 0 4px;
    }

    .timelist a {
        background: var(--body-bg);
        padding: 4px;
    }

    .calendar-cancel {
        padding: 8px 10px;
    }

    .clockbox h2 {
        padding: 8px 15px;
    }

    .calendar caption {
        padding: 10px;
    }

    .calendarbox .calendarnav-previous, .calendarbox .calendarnav-next {
        z-index: 1;
        top: 10px;
    }

    /* History */

    table#change-history tbody th, table#change-history tbody td {
        font-size: 0.8125rem;
        word-break: break-word;
    }

    table#change-history tbody th {
        width: auto;
    }

    /* Docs */

    table.model tbody th, table.model tbody td {
        font-size: 0.8125rem;
        word-break: break-word;
    }
}

```
--- END OF FILE: staticfiles\admin\css\responsive.css ---

--- START OF FILE: staticfiles\admin\css\responsive_rtl.css ---
```css
/* TABLETS */

@media (max-width: 1024px) {
    [dir="rtl"] .colMS {
        margin-right: 0;
    }

    [dir="rtl"] #user-tools {
        text-align: right;
    }

    [dir="rtl"] #changelist .actions label {
        padding-left: 10px;
        padding-right: 0;
    }

    [dir="rtl"] #changelist .actions select {
        margin-left: 0;
        margin-right: 15px;
    }

    [dir="rtl"] .change-list .filtered .results,
    [dir="rtl"] .change-list .filtered .paginator,
    [dir="rtl"] .filtered #toolbar,
    [dir="rtl"] .filtered div.xfull,
    [dir="rtl"] .filtered .actions,
    [dir="rtl"] #changelist-filter {
        margin-left: 0;
    }

    [dir="rtl"] .inline-group div.add-row a,
    [dir="rtl"] .inline-group .tabular tr.add-row td a {
        padding: 8px 26px 8px 10px;
        background-position: calc(100% - 8px) 9px;
    }

    [dir="rtl"] .object-tools li {
        float: right;
    }

    [dir="rtl"] .object-tools li + li {
        margin-left: 0;
        margin-right: 15px;
    }

    [dir="rtl"] .dashboard .module table td a {
        padding-left: 0;
        padding-right: 16px;
    }
}

/* MOBILE */

@media (max-width: 767px) {
    [dir="rtl"] .aligned .related-lookup,
    [dir="rtl"] .aligned .datetimeshortcuts {
        margin-left: 0;
        margin-right: 15px;
    }

    [dir="rtl"] .aligned ul,
    [dir="rtl"] form .aligned ul.errorlist {
        margin-right: 0;
    }

    [dir="rtl"] #changelist-filter {
        margin-left: 0;
        margin-right: 0;
    }
    [dir="rtl"] .aligned .vCheckboxLabel {
        padding: 1px 5px 0 0;
    }

    [dir="rtl"] .selector-remove {
        background-position: 0 0;
    }

    [dir="rtl"] :enabled.selector-remove:focus, :enabled.selector-remove:hover {
        background-position: 0 -24px;
    }

    [dir="rtl"] .selector-add  {
        background-position: 0 -48px;
    }

    [dir="rtl"] :enabled.selector-add:focus, :enabled.selector-add:hover {
        background-position: 0 -72px;
    }
}

```
--- END OF FILE: staticfiles\admin\css\responsive_rtl.css ---

--- START OF FILE: staticfiles\admin\css\rtl.css ---
```css
/* GLOBAL */

th {
    text-align: right;
}

.module h2, .module caption {
    text-align: right;
}

.module ul, .module ol {
    margin-left: 0;
    margin-right: 1.5em;
}

.viewlink, .addlink, .changelink, .hidelink {
    padding-left: 0;
    padding-right: 16px;
    background-position: 100% 1px;
}

.deletelink {
    padding-left: 0;
    padding-right: 16px;
    background-position: 100% 1px;
}

.object-tools {
    float: left;
}

thead th:first-child,
tfoot td:first-child {
    border-left: none;
}

/* LAYOUT */

#user-tools {
    right: auto;
    left: 0;
    text-align: left;
}

div.breadcrumbs {
    text-align: right;
}

#content-main {
    float: right;
}

#content-related {
    float: left;
    margin-left: -300px;
    margin-right: auto;
}

.colMS {
    margin-left: 300px;
    margin-right: 0;
}

/* SORTABLE TABLES */

table thead th.sorted .sortoptions {
   float: left;
}

thead th.sorted .text {
    padding-right: 0;
    padding-left: 42px;
}

/* dashboard styles */

.dashboard .module table td a {
    padding-left: .6em;
    padding-right: 16px;
}

/* changelists styles */

.change-list .filtered table {
    border-left: none;
    border-right: 0px none;
}

#changelist-filter {
    border-left: none;
    border-right: none;
    margin-left: 0;
    margin-right: 30px;
}

#changelist-filter li.selected {
    border-left: none;
    padding-left: 10px;
    margin-left: 0;
    border-right: 5px solid var(--hairline-color);
    padding-right: 10px;
    margin-right: -15px;
}

#changelist table tbody td:first-child, #changelist table tbody th:first-child {
    border-right: none;
    border-left: none;
}

.paginator .end {
    margin-left: 6px;
    margin-right: 0;
}

.paginator input {
    margin-left: 0;
    margin-right: auto;
}

/* FORMS */

.aligned label {
    padding: 0 0 3px 1em;
}

.submit-row a.deletelink {
    margin-left: 0;
    margin-right: auto;
}

.vDateField, .vTimeField {
    margin-left: 2px;
}

.aligned .form-row input {
    margin-left: 5px;
}

form .aligned ul {
    margin-right: 163px;
    padding-right: 10px;
    margin-left: 0;
    padding-left: 0;
}

form ul.inline li {
    float: right;
    padding-right: 0;
    padding-left: 7px;
}

form .aligned p.help,
form .aligned div.help {
    margin-left: 0;
    margin-right: 160px;
    padding-right: 10px;
}

form div.help ul,
form .aligned .checkbox-row + .help,
form .aligned p.date div.help.timezonewarning,
form .aligned p.datetime div.help.timezonewarning,
form .aligned p.time div.help.timezonewarning {
    margin-right: 0;
    padding-right: 0;
}

form .wide p.help,
form .wide ul.errorlist,
form .wide div.help {
    padding-left: 0;
    padding-right: 50px;
}

.submit-row {
    text-align: right;
}

fieldset .fieldBox {
    margin-left: 20px;
    margin-right: 0;
}

.errorlist li {
    background-position: 100% 12px;
    padding: 0;
}

.errornote {
    background-position: 100% 12px;
    padding: 10px 12px;
}

/* WIDGETS */

.calendarnav-previous {
    top: 0;
    left: auto;
    right: 10px;
    background: url(../img/calendar-icons.svg) 0 -15px no-repeat;
}

.calendarnav-next {
    top: 0;
    right: auto;
    left: 10px;
    background: url(../img/calendar-icons.svg) 0 0 no-repeat;
}

.calendar caption, .calendarbox h2 {
    text-align: center;
}

.selector {
    float: right;
}

.selector .selector-filter {
    text-align: right;
}

.selector-add {
    background: url(../img/selector-icons.svg) 0 -96px no-repeat;
    background-size: 24px auto;
}

:enabled.selector-add:focus, :enabled.selector-add:hover {
    background-position: 0 -120px;
}

.selector-remove {
    background: url(../img/selector-icons.svg) 0 -144px no-repeat;
    background-size: 24px auto;
}

:enabled.selector-remove:focus, :enabled.selector-remove:hover {
    background-position: 0 -168px;
}

.selector-chooseall {
    background: url(../img/selector-icons.svg) right -128px no-repeat;
}

:enabled.selector-chooseall:focus, :enabled.selector-chooseall:hover {
    background-position: 100% -144px;
}

.selector-clearall {
    background: url(../img/selector-icons.svg) 0 -160px no-repeat;
}

:enabled.selector-clearall:focus, :enabled.selector-clearall:hover {
    background-position: 0 -176px;
}

.inline-deletelink {
    float: left;
}

form .form-row p.datetime {
    overflow: hidden;
}

.related-widget-wrapper {
    float: right;
}

/* MISC */

.inline-related h2, .inline-group h2 {
    text-align: right
}

.inline-related h3 span.delete {
    padding-right: 20px;
    padding-left: inherit;
    left: 10px;
    right: inherit;
    float:left;
}

.inline-related h3 span.delete label {
    margin-left: inherit;
    margin-right: 2px;
}

.inline-group .tabular td.original p {
    right: 0;
}

.selector .selector-chooser {
    margin: 0;
}

```
--- END OF FILE: staticfiles\admin\css\rtl.css ---

--- START OF FILE: staticfiles\admin\css\unusable_password_field.css ---
```css
/* Hide warnings fields if usable password is selected */
form:has(#id_usable_password input[value="true"]:checked) .messagelist {
    display: none;
}

/* Hide password fields if unusable password is selected */
form:has(#id_usable_password input[value="false"]:checked) .field-password1,
form:has(#id_usable_password input[value="false"]:checked) .field-password2 {
    display: none;
}

/* Select appropriate submit button */
form:has(#id_usable_password input[value="true"]:checked) input[type="submit"].unset-password {
    display: none;
}

form:has(#id_usable_password input[value="false"]:checked) input[type="submit"].set-password {
    display: none;
}

```
--- END OF FILE: staticfiles\admin\css\unusable_password_field.css ---

--- START OF FILE: staticfiles\admin\css\widgets.css ---
```css
/* SELECTOR (FILTER INTERFACE) */

.selector {
    display: flex;
    flex: 1;
    gap: 0 10px;
}

.selector select {
    height: 17.2em;
    flex: 1 0 auto;
    overflow: scroll;
    width: 100%;
}

.selector-available, .selector-chosen {
    display: flex;
    flex-direction: column;
    flex: 1 1;
}

.selector-available-title, .selector-chosen-title {
    border: 1px solid var(--border-color);
    border-radius: 4px 4px 0 0;
}

.selector .helptext {
    font-size: 0.6875rem;
}

.selector-chosen .list-footer-display {
    border: 1px solid var(--border-color);
    border-top: none;
    border-radius: 0 0 4px 4px;
    margin: 0 0 10px;
    padding: 8px;
    text-align: center;
    background: var(--primary);
    color: var(--header-link-color);
    cursor: pointer;
}
.selector-chosen .list-footer-display__clear {
    color: var(--breadcrumbs-fg);
}

.selector-chosen-title {
    background: var(--secondary);
    color: var(--header-link-color);
    padding: 8px;
}

.aligned .selector-chosen-title label {
    color: var(--header-link-color);
    width: 100%;
}

.selector-available-title {
    background: var(--darkened-bg);
    color: var(--body-quiet-color);
    padding: 8px;
}

.aligned .selector-available-title label {
    width: 100%;
}

.selector .selector-filter {
    border: 1px solid var(--border-color);
    border-width: 0 1px;
    padding: 8px;
    color: var(--body-quiet-color);
    font-size: 0.625rem;
    margin: 0;
    text-align: left;
    display: flex;
    gap: 8px;
}

.selector .selector-filter label,
.inline-group .aligned .selector .selector-filter label {
    float: left;
    margin: 7px 0 0;
    width: 18px;
    height: 18px;
    padding: 0;
    overflow: hidden;
    line-height: 1;
    min-width: auto;
}

.selector-filter input {
    flex-grow: 1;
}

.selector ul.selector-chooser {
    align-self: center;
    width: 30px;
    background-color: var(--selected-bg);
    border-radius: 10px;
    margin: 0;
    padding: 0;
    transform: translateY(-17px);
}

.selector-chooser li {
    margin: 0;
    padding: 3px;
    list-style-type: none;
}

.selector select {
    padding: 0 10px;
    margin: 0 0 10px;
    border-radius: 0 0 4px 4px;
}
.selector .selector-chosen--with-filtered select {
    margin: 0;
    border-radius: 0;
    height: 14em;
}

.selector .selector-chosen:not(.selector-chosen--with-filtered) .list-footer-display {
    display: none;
}

.selector-add, .selector-remove {
    width: 24px;
    height: 24px;
    display: block;
    text-indent: -3000px;
    overflow: hidden;
    cursor: default;
    opacity: 0.55;
    border: none;
}

:enabled.selector-add, :enabled.selector-remove {
    opacity: 1;
}

:enabled.selector-add:hover, :enabled.selector-remove:hover {
    cursor: pointer;
}

.selector-add {
    background: url(../img/selector-icons.svg) 0 -144px no-repeat;
    background-size: 24px auto;
}

:enabled.selector-add:focus, :enabled.selector-add:hover {
    background-position: 0 -168px;
}

.selector-remove {
    background: url(../img/selector-icons.svg) 0 -96px no-repeat;
    background-size: 24px auto;
}

:enabled.selector-remove:focus, :enabled.selector-remove:hover {
    background-position: 0 -120px;
}

.selector-chooseall, .selector-clearall {
    display: inline-block;
    height: 16px;
    text-align: left;
    margin: 0 auto;
    overflow: hidden;
    font-weight: bold;
    line-height: 16px;
    color: var(--body-quiet-color);
    text-decoration: none;
    opacity: 0.55;
    border: none;
}

:enabled.selector-chooseall:focus, :enabled.selector-clearall:focus,
:enabled.selector-chooseall:hover, :enabled.selector-clearall:hover {
    color: var(--link-fg);
}

:enabled.selector-chooseall, :enabled.selector-clearall {
    opacity: 1;
}

:enabled.selector-chooseall:hover, :enabled.selector-clearall:hover {
    cursor: pointer;
}

.selector-chooseall {
    padding: 0 18px 0 0;
    background: url(../img/selector-icons.svg) right -160px no-repeat;
    cursor: default;
}

:enabled.selector-chooseall:focus, :enabled.selector-chooseall:hover {
    background-position: 100% -176px;
}

.selector-clearall {
    padding: 0 0 0 18px;
    background: url(../img/selector-icons.svg) 0 -128px no-repeat;
    cursor: default;
}

:enabled.selector-clearall:focus, :enabled.selector-clearall:hover {
    background-position: 0 -144px;
}

/* STACKED SELECTORS */

.stacked {
    float: left;
    width: 490px;
    display: block;
}

.stacked select {
    width: 480px;
    height: 10.1em;
}

.stacked .selector-available, .stacked .selector-chosen {
    width: 480px;
}

.stacked .selector-available {
    margin-bottom: 0;
}

.stacked .selector-available input {
    width: 422px;
}

.stacked ul.selector-chooser {
    display: flex;
    height: 30px;
    width: 64px;
    margin: 0 0 10px 40%;
    background-color: #eee;
    border-radius: 10px;
    transform: none;
}

.stacked .selector-chooser li {
    float: left;
    padding: 3px 3px 3px 5px;
}

.stacked .selector-chooseall, .stacked .selector-clearall {
    display: none;
}

.stacked .selector-add {
    background: url(../img/selector-icons.svg) 0 -48px no-repeat;
    background-size: 24px auto;
    cursor: default;
}

.stacked :enabled.selector-add {
    background-position: 0 -48px;
    cursor: pointer;
}

.stacked :enabled.selector-add:focus, .stacked :enabled.selector-add:hover {
    background-position: 0 -72px;
    cursor: pointer;
}

.stacked .selector-remove {
    background: url(../img/selector-icons.svg) 0 0 no-repeat;
    background-size: 24px auto;
    cursor: default;
}

.stacked :enabled.selector-remove {
    background-position: 0 0px;
    cursor: pointer;
}

.stacked :enabled.selector-remove:focus, .stacked :enabled.selector-remove:hover {
    background-position: 0 -24px;
    cursor: pointer;
}

.selector .help-icon {
    background: url(../img/icon-unknown.svg) 0 0 no-repeat;
    display: inline-block;
    vertical-align: middle;
    margin: -2px 0 0 2px;
    width: 13px;
    height: 13px;
}

.selector .selector-chosen .help-icon {
    background: url(../img/icon-unknown-alt.svg) 0 0 no-repeat;
}

.selector .search-label-icon {
    background: url(../img/search.svg) 0 0 no-repeat;
    display: inline-block;
    height: 1.125rem;
    width: 1.125rem;
}

/* DATE AND TIME */

p.datetime {
    line-height: 20px;
    margin: 0;
    padding: 0;
    color: var(--body-quiet-color);
    font-weight: bold;
}

.datetime span {
    white-space: nowrap;
    font-weight: normal;
    font-size: 0.6875rem;
    color: var(--body-quiet-color);
}

.datetime input, .form-row .datetime input.vDateField, .form-row .datetime input.vTimeField {
    margin-left: 5px;
    margin-bottom: 4px;
}

table p.datetime {
    font-size: 0.6875rem;
    margin-left: 0;
    padding-left: 0;
}

.datetimeshortcuts .clock-icon, .datetimeshortcuts .date-icon {
    position: relative;
    display: inline-block;
    vertical-align: middle;
    height: 24px;
    width: 24px;
    overflow: hidden;
}

.datetimeshortcuts .clock-icon {
    background: url(../img/icon-clock.svg) 0 0 no-repeat;
    background-size: 24px auto;
}

.datetimeshortcuts a:focus .clock-icon,
.datetimeshortcuts a:hover .clock-icon {
    background-position: 0 -24px;
}

.datetimeshortcuts .date-icon {
    background: url(../img/icon-calendar.svg) 0 0 no-repeat;
    background-size: 24px auto;
    top: -1px;
}

.datetimeshortcuts a:focus .date-icon,
.datetimeshortcuts a:hover .date-icon {
    background-position: 0 -24px;
}

.timezonewarning {
    font-size: 0.6875rem;
    color: var(--body-quiet-color);
}

/* URL */

p.url {
    line-height: 20px;
    margin: 0;
    padding: 0;
    color: var(--body-quiet-color);
    font-size: 0.6875rem;
    font-weight: bold;
}

.url a {
    font-weight: normal;
}

/* FILE UPLOADS */

p.file-upload {
    line-height: 20px;
    margin: 0;
    padding: 0;
    color: var(--body-quiet-color);
    font-size: 0.6875rem;
    font-weight: bold;
}

.file-upload a {
    font-weight: normal;
}

.file-upload .deletelink {
    margin-left: 5px;
}

span.clearable-file-input label {
    color: var(--body-fg);
    font-size: 0.6875rem;
    display: inline;
    float: none;
}

/* CALENDARS & CLOCKS */

.calendarbox, .clockbox {
    margin: 5px auto;
    font-size: 0.75rem;
    width: 19em;
    text-align: center;
    background: var(--body-bg);
    color: var(--body-fg);
    border: 1px solid var(--hairline-color);
    border-radius: 4px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);
    overflow: hidden;
    position: relative;
}

.clockbox {
    width: auto;
}

.calendar {
    margin: 0;
    padding: 0;
}

.calendar table {
    margin: 0;
    padding: 0;
    border-collapse: collapse;
    background: white;
    width: 100%;
}

.calendar caption, .calendarbox h2 {
    margin: 0;
    text-align: center;
    border-top: none;
    font-weight: 700;
    font-size: 0.75rem;
    color: #333;
    background: var(--accent);
}

.calendar th {
    padding: 8px 5px;
    background: var(--darkened-bg);
    border-bottom: 1px solid var(--border-color);
    font-weight: 400;
    font-size: 0.75rem;
    text-align: center;
    color: var(--body-quiet-color);
}

.calendar td {
    font-weight: 400;
    font-size: 0.75rem;
    text-align: center;
    padding: 0;
    border-top: 1px solid var(--hairline-color);
    border-bottom: none;
}

.calendar td.selected a {
    background: var(--secondary);
    color: var(--button-fg);
}

.calendar td.nonday {
    background: var(--darkened-bg);
}

.calendar td.today a {
    font-weight: 700;
}

.calendar td a, .timelist a {
    display: block;
    font-weight: 400;
    padding: 6px;
    text-decoration: none;
    color: var(--body-quiet-color);
}

.calendar td a:focus, .timelist a:focus,
.calendar td a:hover, .timelist a:hover {
    background: var(--primary);
    color: white;
}

.calendar td a:active, .timelist a:active {
    background: var(--header-bg);
    color: white;
}

.calendarnav {
    font-size: 0.625rem;
    text-align: center;
    color: #ccc;
    margin: 0;
    padding: 1px 3px;
}

.calendarnav a:link, #calendarnav a:visited,
#calendarnav a:focus, #calendarnav a:hover {
    color: var(--body-quiet-color);
}

.calendar-shortcuts {
    background: var(--body-bg);
    color: var(--body-quiet-color);
    font-size: 0.6875rem;
    line-height: 0.6875rem;
    border-top: 1px solid var(--hairline-color);
    padding: 8px 0;
}

.calendarbox .calendarnav-previous, .calendarbox .calendarnav-next {
    display: block;
    position: absolute;
    top: 8px;
    width: 15px;
    height: 15px;
    text-indent: -9999px;
    padding: 0;
}

.calendarnav-previous {
    left: 10px;
    background: url(../img/calendar-icons.svg) 0 0 no-repeat;
}

.calendarnav-next {
    right: 10px;
    background: url(../img/calendar-icons.svg) 0 -15px no-repeat;
}

.calendar-cancel {
    margin: 0;
    padding: 4px 0;
    font-size: 0.75rem;
    background: var(--close-button-bg);
    border-top: 1px solid var(--border-color);
    color: var(--button-fg);
}

.calendar-cancel:focus, .calendar-cancel:hover {
    background: var(--close-button-hover-bg);
}

.calendar-cancel a {
    color: var(--button-fg);
    display: block;
}

ul.timelist, .timelist li {
    list-style-type: none;
    margin: 0;
    padding: 0;
}

.timelist a {
    padding: 2px;
}

/* EDIT INLINE */

.inline-deletelink {
    float: right;
    text-indent: -9999px;
    background: url(../img/inline-delete.svg) 0 0 no-repeat;
    width: 1.5rem;
    height: 1.5rem;
    border: 0px none;
    margin-bottom: .25rem;
}

.inline-deletelink:focus, .inline-deletelink:hover {
    cursor: pointer;
}

/* RELATED WIDGET WRAPPER */
.related-widget-wrapper {
    display: flex;
    gap: 0 10px;
    flex-grow: 1;
    flex-wrap: wrap;
    margin-bottom: 5px;
}

.related-widget-wrapper-link {
    opacity: .6;
    filter: grayscale(1);
}

.related-widget-wrapper-link:link {
    opacity: 1;
    filter: grayscale(0);
}

/* GIS MAPS */
.dj_map {
    width: 600px;
    height: 400px;
}

```
--- END OF FILE: staticfiles\admin\css\widgets.css ---

--- START OF FILE: staticfiles\admin\js\admin\DateTimeShortcuts.js ---
```js
/*global Calendar, findPosX, findPosY, get_format, gettext, gettext_noop, interpolate, ngettext, quickElement*/
// Inserts shortcut buttons after all of the following:
//     <input type="text" class="vDateField">
//     <input type="text" class="vTimeField">
'use strict';
{
    const DateTimeShortcuts = {
        calendars: [],
        calendarInputs: [],
        clockInputs: [],
        clockHours: {
            default_: [
                [gettext_noop('Now'), -1],
                [gettext_noop('Midnight'), 0],
                [gettext_noop('6 a.m.'), 6],
                [gettext_noop('Noon'), 12],
                [gettext_noop('6 p.m.'), 18]
            ]
        },
        dismissClockFunc: [],
        dismissCalendarFunc: [],
        calendarDivName1: 'calendarbox', // name of calendar <div> that gets toggled
        calendarDivName2: 'calendarin', // name of <div> that contains calendar
        calendarLinkName: 'calendarlink', // name of the link that is used to toggle
        clockDivName: 'clockbox', // name of clock <div> that gets toggled
        clockLinkName: 'clocklink', // name of the link that is used to toggle
        shortCutsClass: 'datetimeshortcuts', // class of the clock and cal shortcuts
        timezoneWarningClass: 'timezonewarning', // class of the warning for timezone mismatch
        timezoneOffset: 0,
        init: function() {
            const serverOffset = document.body.dataset.adminUtcOffset;
            if (serverOffset) {
                const localOffset = new Date().getTimezoneOffset() * -60;
                DateTimeShortcuts.timezoneOffset = localOffset - serverOffset;
            }

            for (const inp of document.getElementsByTagName('input')) {
                if (inp.type === 'text' && inp.classList.contains('vTimeField')) {
                    DateTimeShortcuts.addClock(inp);
                    DateTimeShortcuts.addTimezoneWarning(inp);
                }
                else if (inp.type === 'text' && inp.classList.contains('vDateField')) {
                    DateTimeShortcuts.addCalendar(inp);
                    DateTimeShortcuts.addTimezoneWarning(inp);
                }
            }
        },
        // Return the current time while accounting for the server timezone.
        now: function() {
            const serverOffset = document.body.dataset.adminUtcOffset;
            if (serverOffset) {
                const localNow = new Date();
                const localOffset = localNow.getTimezoneOffset() * -60;
                localNow.setTime(localNow.getTime() + 1000 * (serverOffset - localOffset));
                return localNow;
            } else {
                return new Date();
            }
        },
        // Add a warning when the time zone in the browser and backend do not match.
        addTimezoneWarning: function(inp) {
            const warningClass = DateTimeShortcuts.timezoneWarningClass;
            let timezoneOffset = DateTimeShortcuts.timezoneOffset / 3600;

            // Only warn if there is a time zone mismatch.
            if (!timezoneOffset) {
                return;
            }

            // Check if warning is already there.
            if (inp.parentNode.querySelectorAll('.' + warningClass).length) {
                return;
            }

            let message;
            if (timezoneOffset > 0) {
                message = ngettext(
                    'Note: You are %s hour ahead of server time.',
                    'Note: You are %s hours ahead of server time.',
                    timezoneOffset
                );
            }
            else {
                timezoneOffset *= -1;
                message = ngettext(
                    'Note: You are %s hour behind server time.',
                    'Note: You are %s hours behind server time.',
                    timezoneOffset
                );
            }
            message = interpolate(message, [timezoneOffset]);

            const warning = document.createElement('div');
            warning.classList.add('help', warningClass);
            warning.textContent = message;
            inp.parentNode.appendChild(warning);
        },
        // Add clock widget to a given field
        addClock: function(inp) {
            const num = DateTimeShortcuts.clockInputs.length;
            DateTimeShortcuts.clockInputs[num] = inp;
            DateTimeShortcuts.dismissClockFunc[num] = function() { DateTimeShortcuts.dismissClock(num); return true; };

            // Shortcut links (clock icon and "Now" link)
            const shortcuts_span = document.createElement('span');
            shortcuts_span.className = DateTimeShortcuts.shortCutsClass;
            inp.parentNode.insertBefore(shortcuts_span, inp.nextSibling);
            const now_link = document.createElement('a');
            now_link.href = "#";
            now_link.textContent = gettext('Now');
            now_link.addEventListener('click', function(e) {
                e.preventDefault();
                DateTimeShortcuts.handleClockQuicklink(num, -1);
            });
            const clock_link = document.createElement('a');
            clock_link.href = '#';
            clock_link.id = DateTimeShortcuts.clockLinkName + num;
            clock_link.addEventListener('click', function(e) {
                e.preventDefault();
                // avoid triggering the document click handler to dismiss the clock
                e.stopPropagation();
                DateTimeShortcuts.openClock(num);
            });

            quickElement(
                'span', clock_link, '',
                'class', 'clock-icon',
                'title', gettext('Choose a Time')
            );
            shortcuts_span.appendChild(document.createTextNode('\u00A0'));
            shortcuts_span.appendChild(now_link);
            shortcuts_span.appendChild(document.createTextNode('\u00A0|\u00A0'));
            shortcuts_span.appendChild(clock_link);

            // Create clock link div
            //
            // Markup looks like:
            // <div id="clockbox1" class="clockbox module">
            //     <h2>Choose a time</h2>
            //     <ul class="timelist">
            //         <li><a href="#">Now</a></li>
            //         <li><a href="#">Midnight</a></li>
            //         <li><a href="#">6 a.m.</a></li>
            //         <li><a href="#">Noon</a></li>
            //         <li><a href="#">6 p.m.</a></li>
            //     </ul>
            //     <p class="calendar-cancel"><a href="#">Cancel</a></p>
            // </div>

            const clock_box = document.createElement('div');
            clock_box.style.display = 'none';
            clock_box.style.position = 'absolute';
            clock_box.className = 'clockbox module';
            clock_box.id = DateTimeShortcuts.clockDivName + num;
            document.body.appendChild(clock_box);
            clock_box.addEventListener('click', function(e) { e.stopPropagation(); });

            quickElement('h2', clock_box, gettext('Choose a time'));
            const time_list = quickElement('ul', clock_box);
            time_list.className = 'timelist';
            // The list of choices can be overridden in JavaScript like this:
            // DateTimeShortcuts.clockHours.name = [['3 a.m.', 3]];
            // where name is the name attribute of the <input>.
            const name = typeof DateTimeShortcuts.clockHours[inp.name] === 'undefined' ? 'default_' : inp.name;
            DateTimeShortcuts.clockHours[name].forEach(function(element) {
                const time_link = quickElement('a', quickElement('li', time_list), gettext(element[0]), 'href', '#');
                time_link.addEventListener('click', function(e) {
                    e.preventDefault();
                    DateTimeShortcuts.handleClockQuicklink(num, element[1]);
                });
            });

            const cancel_p = quickElement('p', clock_box);
            cancel_p.className = 'calendar-cancel';
            const cancel_link = quickElement('a', cancel_p, gettext('Cancel'), 'href', '#');
            cancel_link.addEventListener('click', function(e) {
                e.preventDefault();
                DateTimeShortcuts.dismissClock(num);
            });

            document.addEventListener('keyup', function(event) {
                if (event.which === 27) {
                    // ESC key closes popup
                    DateTimeShortcuts.dismissClock(num);
                    event.preventDefault();
                }
            });
        },
        openClock: function(num) {
            const clock_box = document.getElementById(DateTimeShortcuts.clockDivName + num);
            const clock_link = document.getElementById(DateTimeShortcuts.clockLinkName + num);

            // Recalculate the clockbox position
            // is it left-to-right or right-to-left layout ?
            if (window.getComputedStyle(document.body).direction !== 'rtl') {
                clock_box.style.left = findPosX(clock_link) + 17 + 'px';
            }
            else {
                // since style's width is in em, it'd be tough to calculate
                // px value of it. let's use an estimated px for now
                clock_box.style.left = findPosX(clock_link) - 110 + 'px';
            }
            clock_box.style.top = Math.max(0, findPosY(clock_link) - 30) + 'px';

            // Show the clock box
            clock_box.style.display = 'block';
            document.addEventListener('click', DateTimeShortcuts.dismissClockFunc[num]);
        },
        dismissClock: function(num) {
            document.getElementById(DateTimeShortcuts.clockDivName + num).style.display = 'none';
            document.removeEventListener('click', DateTimeShortcuts.dismissClockFunc[num]);
        },
        handleClockQuicklink: function(num, val) {
            let d;
            if (val === -1) {
                d = DateTimeShortcuts.now();
            }
            else {
                d = new Date(1970, 1, 1, val, 0, 0, 0);
            }
            DateTimeShortcuts.clockInputs[num].value = d.strftime(get_format('TIME_INPUT_FORMATS')[0]);
            DateTimeShortcuts.clockInputs[num].focus();
            DateTimeShortcuts.dismissClock(num);
        },
        // Add calendar widget to a given field.
        addCalendar: function(inp) {
            const num = DateTimeShortcuts.calendars.length;

            DateTimeShortcuts.calendarInputs[num] = inp;
            DateTimeShortcuts.dismissCalendarFunc[num] = function() { DateTimeShortcuts.dismissCalendar(num); return true; };

            // Shortcut links (calendar icon and "Today" link)
            const shortcuts_span = document.createElement('span');
            shortcuts_span.className = DateTimeShortcuts.shortCutsClass;
            inp.parentNode.insertBefore(shortcuts_span, inp.nextSibling);
            const today_link = document.createElement('a');
            today_link.href = '#';
            today_link.appendChild(document.createTextNode(gettext('Today')));
            today_link.addEventListener('click', function(e) {
                e.preventDefault();
                DateTimeShortcuts.handleCalendarQuickLink(num, 0);
            });
            const cal_link = document.createElement('a');
            cal_link.href = '#';
            cal_link.id = DateTimeShortcuts.calendarLinkName + num;
            cal_link.addEventListener('click', function(e) {
                e.preventDefault();
                // avoid triggering the document click handler to dismiss the calendar
                e.stopPropagation();
                DateTimeShortcuts.openCalendar(num);
            });
            quickElement(
                'span', cal_link, '',
                'class', 'date-icon',
                'title', gettext('Choose a Date')
            );
            shortcuts_span.appendChild(document.createTextNode('\u00A0'));
            shortcuts_span.appendChild(today_link);
            shortcuts_span.appendChild(document.createTextNode('\u00A0|\u00A0'));
            shortcuts_span.appendChild(cal_link);

            // Create calendarbox div.
            //
            // Markup looks like:
            //
            // <div id="calendarbox3" class="calendarbox module">
            //     <h2>
            //           <a href="#" class="link-previous">&lsaquo;</a>
            //           <a href="#" class="link-next">&rsaquo;</a> February 2003
            //     </h2>
            //     <div class="calendar" id="calendarin3">
            //         <!-- (cal) -->
            //     </div>
            //     <div class="calendar-shortcuts">
            //          <a href="#">Yesterday</a> | <a href="#">Today</a> | <a href="#">Tomorrow</a>
            //     </div>
            //     <p class="calendar-cancel"><a href="#">Cancel</a></p>
            // </div>
            const cal_box = document.createElement('div');
            cal_box.style.display = 'none';
            cal_box.style.position = 'absolute';
            cal_box.className = 'calendarbox module';
            cal_box.id = DateTimeShortcuts.calendarDivName1 + num;
            document.body.appendChild(cal_box);
            cal_box.addEventListener('click', function(e) { e.stopPropagation(); });

            // next-prev links
            const cal_nav = quickElement('div', cal_box);
            const cal_nav_prev = quickElement('a', cal_nav, '<', 'href', '#');
            cal_nav_prev.className = 'calendarnav-previous';
            cal_nav_prev.addEventListener('click', function(e) {
                e.preventDefault();
                DateTimeShortcuts.drawPrev(num);
            });

            const cal_nav_next = quickElement('a', cal_nav, '>', 'href', '#');
            cal_nav_next.className = 'calendarnav-next';
            cal_nav_next.addEventListener('click', function(e) {
                e.preventDefault();
                DateTimeShortcuts.drawNext(num);
            });

            // main box
            const cal_main = quickElement('div', cal_box, '', 'id', DateTimeShortcuts.calendarDivName2 + num);
            cal_main.className = 'calendar';
            DateTimeShortcuts.calendars[num] = new Calendar(DateTimeShortcuts.calendarDivName2 + num, DateTimeShortcuts.handleCalendarCallback(num));
            DateTimeShortcuts.calendars[num].drawCurrent();

            // calendar shortcuts
            const shortcuts = quickElement('div', cal_box);
            shortcuts.className = 'calendar-shortcuts';
            let day_link = quickElement('a', shortcuts, gettext('Yesterday'), 'href', '#');
            day_link.addEventListener('click', function(e) {
                e.preventDefault();
                DateTimeShortcuts.handleCalendarQuickLink(num, -1);
            });
            shortcuts.appendChild(document.createTextNode('\u00A0|\u00A0'));
            day_link = quickElement('a', shortcuts, gettext('Today'), 'href', '#');
            day_link.addEventListener('click', function(e) {
                e.preventDefault();
                DateTimeShortcuts.handleCalendarQuickLink(num, 0);
            });
            shortcuts.appendChild(document.createTextNode('\u00A0|\u00A0'));
            day_link = quickElement('a', shortcuts, gettext('Tomorrow'), 'href', '#');
            day_link.addEventListener('click', function(e) {
                e.preventDefault();
                DateTimeShortcuts.handleCalendarQuickLink(num, +1);
            });

            // cancel bar
            const cancel_p = quickElement('p', cal_box);
            cancel_p.className = 'calendar-cancel';
            const cancel_link = quickElement('a', cancel_p, gettext('Cancel'), 'href', '#');
            cancel_link.addEventListener('click', function(e) {
                e.preventDefault();
                DateTimeShortcuts.dismissCalendar(num);
            });
            document.addEventListener('keyup', function(event) {
                if (event.which === 27) {
                    // ESC key closes popup
                    DateTimeShortcuts.dismissCalendar(num);
                    event.preventDefault();
                }
            });
        },
        openCalendar: function(num) {
            const cal_box = document.getElementById(DateTimeShortcuts.calendarDivName1 + num);
            const cal_link = document.getElementById(DateTimeShortcuts.calendarLinkName + num);
            const inp = DateTimeShortcuts.calendarInputs[num];

            // Determine if the current value in the input has a valid date.
            // If so, draw the calendar with that date's year and month.
            if (inp.value) {
                const format = get_format('DATE_INPUT_FORMATS')[0];
                const selected = inp.value.strptime(format);
                const year = selected.getUTCFullYear();
                const month = selected.getUTCMonth() + 1;
                const re = /\d{4}/;
                if (re.test(year.toString()) && month >= 1 && month <= 12) {
                    DateTimeShortcuts.calendars[num].drawDate(month, year, selected);
                }
            }

            // Recalculate the clockbox position
            // is it left-to-right or right-to-left layout ?
            if (window.getComputedStyle(document.body).direction !== 'rtl') {
                cal_box.style.left = findPosX(cal_link) + 17 + 'px';
            }
            else {
                // since style's width is in em, it'd be tough to calculate
                // px value of it. let's use an estimated px for now
                cal_box.style.left = findPosX(cal_link) - 180 + 'px';
            }
            cal_box.style.top = Math.max(0, findPosY(cal_link) - 75) + 'px';

            cal_box.style.display = 'block';
            document.addEventListener('click', DateTimeShortcuts.dismissCalendarFunc[num]);
        },
        dismissCalendar: function(num) {
            document.getElementById(DateTimeShortcuts.calendarDivName1 + num).style.display = 'none';
            document.removeEventListener('click', DateTimeShortcuts.dismissCalendarFunc[num]);
        },
        drawPrev: function(num) {
            DateTimeShortcuts.calendars[num].drawPreviousMonth();
        },
        drawNext: function(num) {
            DateTimeShortcuts.calendars[num].drawNextMonth();
        },
        handleCalendarCallback: function(num) {
            const format = get_format('DATE_INPUT_FORMATS')[0];
            return function(y, m, d) {
                DateTimeShortcuts.calendarInputs[num].value = new Date(y, m - 1, d).strftime(format);
                DateTimeShortcuts.calendarInputs[num].focus();
                document.getElementById(DateTimeShortcuts.calendarDivName1 + num).style.display = 'none';
            };
        },
        handleCalendarQuickLink: function(num, offset) {
            const d = DateTimeShortcuts.now();
            d.setDate(d.getDate() + offset);
            DateTimeShortcuts.calendarInputs[num].value = d.strftime(get_format('DATE_INPUT_FORMATS')[0]);
            DateTimeShortcuts.calendarInputs[num].focus();
            DateTimeShortcuts.dismissCalendar(num);
        }
    };

    window.addEventListener('load', DateTimeShortcuts.init);
    window.DateTimeShortcuts = DateTimeShortcuts;
}

```
--- END OF FILE: staticfiles\admin\js\admin\DateTimeShortcuts.js ---

--- START OF FILE: staticfiles\admin\js\admin\RelatedObjectLookups.js ---
```js
/*global SelectBox, interpolate*/
// Handles related-objects functionality: lookup link for raw_id_fields
// and Add Another links.
'use strict';
{
    const $ = django.jQuery;
    let popupIndex = 0;
    const relatedWindows = [];

    function dismissChildPopups() {
        relatedWindows.forEach(function(win) {
            if(!win.closed) {
                win.dismissChildPopups();
                win.close();    
            }
        });
    }

    function setPopupIndex() {
        if(document.getElementsByName("_popup").length > 0) {
            const index = window.name.lastIndexOf("__") + 2;
            popupIndex = parseInt(window.name.substring(index));   
        } else {
            popupIndex = 0;
        }
    }

    function addPopupIndex(name) {
        return name + "__" + (popupIndex + 1);
    }

    function removePopupIndex(name) {
        return name.replace(new RegExp("__" + (popupIndex + 1) + "$"), '');
    }

    function showAdminPopup(triggeringLink, name_regexp, add_popup) {
        const name = addPopupIndex(triggeringLink.id.replace(name_regexp, ''));
        const href = new URL(triggeringLink.href);
        if (add_popup) {
            href.searchParams.set('_popup', 1);
        }
        const win = window.open(href, name, 'height=500,width=800,resizable=yes,scrollbars=yes');
        relatedWindows.push(win);
        win.focus();
        return false;
    }

    function showRelatedObjectLookupPopup(triggeringLink) {
        return showAdminPopup(triggeringLink, /^lookup_/, true);
    }

    function dismissRelatedLookupPopup(win, chosenId) {
        const name = removePopupIndex(win.name);
        const elem = document.getElementById(name);
        if (elem.classList.contains('vManyToManyRawIdAdminField') && elem.value) {
            elem.value += ',' + chosenId;
        } else {
            elem.value = chosenId;
        }
        $(elem).trigger('change');
        const index = relatedWindows.indexOf(win);
        if (index > -1) {
            relatedWindows.splice(index, 1);
        }
        win.close();
    }

    function showRelatedObjectPopup(triggeringLink) {
        return showAdminPopup(triggeringLink, /^(change|add|delete)_/, false);
    }

    function updateRelatedObjectLinks(triggeringLink) {
        const $this = $(triggeringLink);
        const siblings = $this.nextAll('.view-related, .change-related, .delete-related');
        if (!siblings.length) {
            return;
        }
        const value = $this.val();
        if (value) {
            siblings.each(function() {
                const elm = $(this);
                elm.attr('href', elm.attr('data-href-template').replace('__fk__', value));
                elm.removeAttr('aria-disabled');
            });
        } else {
            siblings.removeAttr('href');
            siblings.attr('aria-disabled', true);
        }
    }

    function updateRelatedSelectsOptions(currentSelect, win, objId, newRepr, newId, skipIds = []) {
        // After create/edit a model from the options next to the current
        // select (+ or :pencil:) update ForeignKey PK of the rest of selects
        // in the page.

        const path = win.location.pathname;
        // Extract the model from the popup url '.../<model>/add/' or
        // '.../<model>/<id>/change/' depending the action (add or change).
        const modelName = path.split('/')[path.split('/').length - (objId ? 4 : 3)];
        // Select elements with a specific model reference and context of "available-source".
        const selectsRelated = document.querySelectorAll(`[data-model-ref="${modelName}"] [data-context="available-source"]`);

        selectsRelated.forEach(function(select) {
            if (currentSelect === select || skipIds && skipIds.includes(select.id)) {
                return;
            }

            let option = select.querySelector(`option[value="${objId}"]`);

            if (!option) {
                option = new Option(newRepr, newId);
                select.options.add(option);
                // Update SelectBox cache for related fields.
                if (window.SelectBox !== undefined && !SelectBox.cache[currentSelect.id]) {
                    SelectBox.add_to_cache(select.id, option);
                    SelectBox.redisplay(select.id);
                }
                return;
            }

            option.textContent = newRepr;
            option.value = newId;
        });
    }

    function dismissAddRelatedObjectPopup(win, newId, newRepr) {
        const name = removePopupIndex(win.name);
        const elem = document.getElementById(name);
        if (elem) {
            const elemName = elem.nodeName.toUpperCase();
            if (elemName === 'SELECT') {
                elem.options[elem.options.length] = new Option(newRepr, newId, true, true);
                updateRelatedSelectsOptions(elem, win, null, newRepr, newId);
            } else if (elemName === 'INPUT') {
                if (elem.classList.contains('vManyToManyRawIdAdminField') && elem.value) {
                    elem.value += ',' + newId;
                } else {
                    elem.value = newId;
                }
            }
            // Trigger a change event to update related links if required.
            $(elem).trigger('change');
        } else {
            const toId = name + "_to";
            const toElem = document.getElementById(toId);
            const o = new Option(newRepr, newId);
            SelectBox.add_to_cache(toId, o);
            SelectBox.redisplay(toId);
            if (toElem && toElem.nodeName.toUpperCase() === 'SELECT') {
                const skipIds = [name + "_from"];
                updateRelatedSelectsOptions(toElem, win, null, newRepr, newId, skipIds);
            }
        }
        const index = relatedWindows.indexOf(win);
        if (index > -1) {
            relatedWindows.splice(index, 1);
        }
        win.close();
    }

    function dismissChangeRelatedObjectPopup(win, objId, newRepr, newId) {
        const id = removePopupIndex(win.name.replace(/^edit_/, ''));
        const selectsSelector = interpolate('#%s, #%s_from, #%s_to', [id, id, id]);
        const selects = $(selectsSelector);
        selects.find('option').each(function() {
            if (this.value === objId) {
                this.textContent = newRepr;
                this.value = newId;
            }
        }).trigger('change');
        updateRelatedSelectsOptions(selects[0], win, objId, newRepr, newId);
        selects.next().find('.select2-selection__rendered').each(function() {
            // The element can have a clear button as a child.
            // Use the lastChild to modify only the displayed value.
            this.lastChild.textContent = newRepr;
            this.title = newRepr;
        });
        const index = relatedWindows.indexOf(win);
        if (index > -1) {
            relatedWindows.splice(index, 1);
        }
        win.close();
    }

    function dismissDeleteRelatedObjectPopup(win, objId) {
        const id = removePopupIndex(win.name.replace(/^delete_/, ''));
        const selectsSelector = interpolate('#%s, #%s_from, #%s_to', [id, id, id]);
        const selects = $(selectsSelector);
        selects.find('option').each(function() {
            if (this.value === objId) {
                $(this).remove();
            }
        }).trigger('change');
        const index = relatedWindows.indexOf(win);
        if (index > -1) {
            relatedWindows.splice(index, 1);
        }
        win.close();
    }

    window.showRelatedObjectLookupPopup = showRelatedObjectLookupPopup;
    window.dismissRelatedLookupPopup = dismissRelatedLookupPopup;
    window.showRelatedObjectPopup = showRelatedObjectPopup;
    window.updateRelatedObjectLinks = updateRelatedObjectLinks;
    window.dismissAddRelatedObjectPopup = dismissAddRelatedObjectPopup;
    window.dismissChangeRelatedObjectPopup = dismissChangeRelatedObjectPopup;
    window.dismissDeleteRelatedObjectPopup = dismissDeleteRelatedObjectPopup;
    window.dismissChildPopups = dismissChildPopups;
    window.relatedWindows = relatedWindows;

    // Kept for backward compatibility
    window.showAddAnotherPopup = showRelatedObjectPopup;
    window.dismissAddAnotherPopup = dismissAddRelatedObjectPopup;

    window.addEventListener('unload', function(evt) {
        window.dismissChildPopups();
    });

    $(document).ready(function() {
        setPopupIndex();
        $("a[data-popup-opener]").on('click', function(event) {
            event.preventDefault();
            opener.dismissRelatedLookupPopup(window, $(this).data("popup-opener"));
        });
        $('body').on('click', '.related-widget-wrapper-link[data-popup="yes"]', function(e) {
            e.preventDefault();
            if (this.href) {
                const event = $.Event('django:show-related', {href: this.href});
                $(this).trigger(event);
                if (!event.isDefaultPrevented()) {
                    showRelatedObjectPopup(this);
                }
            }
        });
        $('body').on('change', '.related-widget-wrapper select', function(e) {
            const event = $.Event('django:update-related');
            $(this).trigger(event);
            if (!event.isDefaultPrevented()) {
                updateRelatedObjectLinks(this);
            }
        });
        $('.related-widget-wrapper select').trigger('change');
        $('body').on('click', '.related-lookup', function(e) {
            e.preventDefault();
            const event = $.Event('django:lookup-related');
            $(this).trigger(event);
            if (!event.isDefaultPrevented()) {
                showRelatedObjectLookupPopup(this);
            }
        });
    });
}

```
--- END OF FILE: staticfiles\admin\js\admin\RelatedObjectLookups.js ---

--- START OF FILE: staticfiles\admin\js\SelectBox.js ---
```js
'use strict';
{
    const SelectBox = {
        cache: {},
        init: function(id) {
            const box = document.getElementById(id);
            SelectBox.cache[id] = [];
            const cache = SelectBox.cache[id];
            for (const node of box.options) {
                cache.push({value: node.value, text: node.text, displayed: 1});
            }
        },
        redisplay: function(id) {
            // Repopulate HTML select box from cache
            const box = document.getElementById(id);
            const scroll_value_from_top = box.scrollTop;
            box.innerHTML = '';
            for (const node of SelectBox.cache[id]) {
                if (node.displayed) {
                    const new_option = new Option(node.text, node.value, false, false);
                    // Shows a tooltip when hovering over the option
                    new_option.title = node.text;
                    box.appendChild(new_option);
                }
            }
            box.scrollTop = scroll_value_from_top;
        },
        filter: function(id, text) {
            // Redisplay the HTML select box, displaying only the choices containing ALL
            // the words in text. (It's an AND search.)
            const tokens = text.toLowerCase().split(/\s+/);
            for (const node of SelectBox.cache[id]) {
                node.displayed = 1;
                const node_text = node.text.toLowerCase();
                for (const token of tokens) {
                    if (!node_text.includes(token)) {
                        node.displayed = 0;
                        break; // Once the first token isn't found we're done
                    }
                }
            }
            SelectBox.redisplay(id);
        },
        get_hidden_node_count(id) {
            const cache = SelectBox.cache[id] || [];
            return cache.filter(node => node.displayed === 0).length;
        },
        delete_from_cache: function(id, value) {
            let delete_index = null;
            const cache = SelectBox.cache[id];
            for (const [i, node] of cache.entries()) {
                if (node.value === value) {
                    delete_index = i;
                    break;
                }
            }
            cache.splice(delete_index, 1);
        },
        add_to_cache: function(id, option) {
            SelectBox.cache[id].push({value: option.value, text: option.text, displayed: 1});
        },
        cache_contains: function(id, value) {
            // Check if an item is contained in the cache
            for (const node of SelectBox.cache[id]) {
                if (node.value === value) {
                    return true;
                }
            }
            return false;
        },
        move: function(from, to) {
            const from_box = document.getElementById(from);
            for (const option of from_box.options) {
                const option_value = option.value;
                if (option.selected && SelectBox.cache_contains(from, option_value)) {
                    SelectBox.add_to_cache(to, {value: option_value, text: option.text, displayed: 1});
                    SelectBox.delete_from_cache(from, option_value);
                }
            }
            SelectBox.redisplay(from);
            SelectBox.redisplay(to);
        },
        move_all: function(from, to) {
            const from_box = document.getElementById(from);
            for (const option of from_box.options) {
                const option_value = option.value;
                if (SelectBox.cache_contains(from, option_value)) {
                    SelectBox.add_to_cache(to, {value: option_value, text: option.text, displayed: 1});
                    SelectBox.delete_from_cache(from, option_value);
                }
            }
            SelectBox.redisplay(from);
            SelectBox.redisplay(to);
        },
        sort: function(id) {
            SelectBox.cache[id].sort(function(a, b) {
                a = a.text.toLowerCase();
                b = b.text.toLowerCase();
                if (a > b) {
                    return 1;
                }
                if (a < b) {
                    return -1;
                }
                return 0;
            } );
        },
        select_all: function(id) {
            const box = document.getElementById(id);
            for (const option of box.options) {
                option.selected = true;
            }
        }
    };
    window.SelectBox = SelectBox;
}

```
--- END OF FILE: staticfiles\admin\js\SelectBox.js ---

--- START OF FILE: staticfiles\admin\js\SelectFilter2.js ---
```js
/*global SelectBox, gettext, ngettext, interpolate, quickElement, SelectFilter*/
/*
SelectFilter2 - Turns a multiple-select box into a filter interface.

Requires core.js and SelectBox.js.
*/
'use strict';
{
    window.SelectFilter = {
        init: function(field_id, field_name, is_stacked) {
            if (field_id.match(/__prefix__/)) {
                // Don't initialize on empty forms.
                return;
            }
            const from_box = document.getElementById(field_id);
            from_box.id += '_from'; // change its ID
            from_box.className = 'filtered';
            from_box.setAttribute('aria-labelledby', field_id + '_from_title');

            for (const p of from_box.parentNode.getElementsByTagName('p')) {
                if (p.classList.contains("info")) {
                    // Remove <p class="info">, because it just gets in the way.
                    from_box.parentNode.removeChild(p);
                } else if (p.classList.contains("help")) {
                    // Move help text up to the top so it isn't below the select
                    // boxes or wrapped off on the side to the right of the add
                    // button:
                    from_box.parentNode.insertBefore(p, from_box.parentNode.firstChild);
                }
            }

            // <div class="selector"> or <div class="selector stacked">
            const selector_div = quickElement('div', from_box.parentNode);
            // Make sure the selector div is at the beginning so that the
            // add link would be displayed to the right of the widget.
            from_box.parentNode.prepend(selector_div);
            selector_div.className = is_stacked ? 'selector stacked' : 'selector';

            // <div class="selector-available">
            const selector_available = quickElement('div', selector_div);
            selector_available.className = 'selector-available';
            const selector_available_title = quickElement('div', selector_available);
            selector_available_title.id = field_id + '_from_title';
            selector_available_title.className = 'selector-available-title';
            quickElement('label', selector_available_title, interpolate(gettext('Available %s') + ' ', [field_name]), 'for', field_id + '_from');
            quickElement(
                'p',
                selector_available_title,
                interpolate(gettext('Choose %s by selecting them and then select the "Choose" arrow button.'), [field_name]),
                'class', 'helptext'
            );

            const filter_p = quickElement('p', selector_available, '', 'id', field_id + '_filter');
            filter_p.className = 'selector-filter';

            const search_filter_label = quickElement('label', filter_p, '', 'for', field_id + '_input');

            quickElement(
                'span', search_filter_label, '',
                'class', 'help-tooltip search-label-icon',
                'aria-label', interpolate(gettext("Type into this box to filter down the list of available %s."), [field_name])
            );

            filter_p.appendChild(document.createTextNode(' '));

            const filter_input = quickElement('input', filter_p, '', 'type', 'text', 'placeholder', gettext("Filter"));
            filter_input.id = field_id + '_input';

            selector_available.appendChild(from_box);
            const choose_all = quickElement(
                'button',
                selector_available,
                interpolate(gettext('Choose all %s'), [field_name]),
                'id', field_id + '_add_all',
                'class', 'selector-chooseall'
            );

            // <ul class="selector-chooser">
            const selector_chooser = quickElement('ul', selector_div);
            selector_chooser.className = 'selector-chooser';
            const add_button = quickElement(
                'button',
                quickElement('li', selector_chooser),
                interpolate(gettext('Choose selected %s'), [field_name]),
                'id', field_id + '_add',
                'class', 'selector-add'
            );
            const remove_button = quickElement(
                'button',
                quickElement('li', selector_chooser),
                interpolate(gettext('Remove selected %s'), [field_name]),
                'id', field_id + '_remove',
                'class', 'selector-remove'
            );

            // <div class="selector-chosen">
            const selector_chosen = quickElement('div', selector_div, '', 'id', field_id + '_selector_chosen');
            selector_chosen.className = 'selector-chosen';
            const selector_chosen_title = quickElement('div', selector_chosen);
            selector_chosen_title.className = 'selector-chosen-title';
            selector_chosen_title.id = field_id + '_to_title';
            quickElement('label', selector_chosen_title, interpolate(gettext('Chosen %s') + ' ', [field_name]), 'for', field_id + '_to');
            quickElement(
                'p',
                selector_chosen_title,
                interpolate(gettext('Remove %s by selecting them and then select the "Remove" arrow button.'), [field_name]),
                'class', 'helptext'
            );
            
            const filter_selected_p = quickElement('p', selector_chosen, '', 'id', field_id + '_filter_selected');
            filter_selected_p.className = 'selector-filter';

            const search_filter_selected_label = quickElement('label', filter_selected_p, '', 'for', field_id + '_selected_input');

            quickElement(
                'span', search_filter_selected_label, '',
                'class', 'help-tooltip search-label-icon',
                'aria-label', interpolate(gettext("Type into this box to filter down the list of selected %s."), [field_name])
            );

            filter_selected_p.appendChild(document.createTextNode(' '));

            const filter_selected_input = quickElement('input', filter_selected_p, '', 'type', 'text', 'placeholder', gettext("Filter"));
            filter_selected_input.id = field_id + '_selected_input';

            quickElement(
                'select',
                selector_chosen,
                '',
                'id', field_id + '_to',
                'multiple', '',
                'size', from_box.size,
                'name', from_box.name,
                'aria-labelledby', field_id + '_to_title',
                'class', 'filtered'
            );
            const warning_footer = quickElement('div', selector_chosen, '', 'class', 'list-footer-display');
            quickElement('span', warning_footer, '', 'id', field_id + '_list-footer-display-text');
            quickElement('span', warning_footer, ' ' + gettext('(click to clear)'), 'class', 'list-footer-display__clear');
            const clear_all = quickElement(
                'button',
                selector_chosen,
                interpolate(gettext('Remove all %s'), [field_name]),
                'id', field_id + '_remove_all',
                'class', 'selector-clearall'
            );

            from_box.name = from_box.name + '_old';

            // Set up the JavaScript event handlers for the select box filter interface
            const move_selection = function(e, elem, move_func, from, to) {
                if (!elem.hasAttribute('disabled')) {
                    move_func(from, to);
                    SelectFilter.refresh_icons(field_id);
                    SelectFilter.refresh_filtered_selects(field_id);
                    SelectFilter.refresh_filtered_warning(field_id);
                }
                e.preventDefault();
            };
            choose_all.addEventListener('click', function(e) {
                move_selection(e, this, SelectBox.move_all, field_id + '_from', field_id + '_to');
            });
            add_button.addEventListener('click', function(e) {
                move_selection(e, this, SelectBox.move, field_id + '_from', field_id + '_to');
            });
            remove_button.addEventListener('click', function(e) {
                move_selection(e, this, SelectBox.move, field_id + '_to', field_id + '_from');
            });
            clear_all.addEventListener('click', function(e) {
                move_selection(e, this, SelectBox.move_all, field_id + '_to', field_id + '_from');
            });
            warning_footer.addEventListener('click', function(e) {
                filter_selected_input.value = '';
                SelectBox.filter(field_id + '_to', '');
                SelectFilter.refresh_filtered_warning(field_id);
                SelectFilter.refresh_icons(field_id);
            });
            filter_input.addEventListener('keypress', function(e) {
                SelectFilter.filter_key_press(e, field_id, '_from', '_to');
            });
            filter_input.addEventListener('keyup', function(e) {
                SelectFilter.filter_key_up(e, field_id, '_from');
            });
            filter_input.addEventListener('keydown', function(e) {
                SelectFilter.filter_key_down(e, field_id, '_from', '_to');
            });
            filter_selected_input.addEventListener('keypress', function(e) {
                SelectFilter.filter_key_press(e, field_id, '_to', '_from');
            });
            filter_selected_input.addEventListener('keyup', function(e) {
                SelectFilter.filter_key_up(e, field_id, '_to', '_selected_input');
            });
            filter_selected_input.addEventListener('keydown', function(e) {
                SelectFilter.filter_key_down(e, field_id, '_to', '_from');
            });
            selector_div.addEventListener('change', function(e) {
                if (e.target.tagName === 'SELECT') {
                    SelectFilter.refresh_icons(field_id);
                }
            });
            selector_div.addEventListener('dblclick', function(e) {
                if (e.target.tagName === 'OPTION') {
                    if (e.target.closest('select').id === field_id + '_to') {
                        SelectBox.move(field_id + '_to', field_id + '_from');
                    } else {
                        SelectBox.move(field_id + '_from', field_id + '_to');
                    }
                    SelectFilter.refresh_icons(field_id);
                }
            });
            from_box.closest('form').addEventListener('submit', function() {
                SelectBox.filter(field_id + '_to', '');
                SelectBox.select_all(field_id + '_to');
            });
            SelectBox.init(field_id + '_from');
            SelectBox.init(field_id + '_to');
            // Move selected from_box options to to_box
            SelectBox.move(field_id + '_from', field_id + '_to');

            // Initial icon refresh
            SelectFilter.refresh_icons(field_id);
        },
        any_selected: function(field) {
            // Temporarily add the required attribute and check validity.
            field.required = true;
            const any_selected = field.checkValidity();
            field.required = false;
            return any_selected;
        },
        refresh_filtered_warning: function(field_id) {
            const count = SelectBox.get_hidden_node_count(field_id + '_to');
            const selector = document.getElementById(field_id + '_selector_chosen');
            const warning = document.getElementById(field_id + '_list-footer-display-text');
            selector.className = selector.className.replace('selector-chosen--with-filtered', '');
            warning.textContent = interpolate(ngettext(
                '%s selected option not visible',
                '%s selected options not visible',
                count
            ), [count]);
            if(count > 0) {
                selector.className += ' selector-chosen--with-filtered';
            }
        },
        refresh_filtered_selects: function(field_id) {
            SelectBox.filter(field_id + '_from', document.getElementById(field_id + "_input").value);
            SelectBox.filter(field_id + '_to', document.getElementById(field_id + "_selected_input").value);
        },
        refresh_icons: function(field_id) {
            const from = document.getElementById(field_id + '_from');
            const to = document.getElementById(field_id + '_to');
            // Disabled if no items are selected.
            document.getElementById(field_id + '_add').disabled = !SelectFilter.any_selected(from);
            document.getElementById(field_id + '_remove').disabled = !SelectFilter.any_selected(to);
            // Disabled if the corresponding box is empty.
            document.getElementById(field_id + '_add_all').disabled = !from.querySelector('option');
            document.getElementById(field_id + '_remove_all').disabled = !to.querySelector('option');
        },
        filter_key_press: function(event, field_id, source, target) {
            const source_box = document.getElementById(field_id + source);
            // don't submit form if user pressed Enter
            if ((event.which && event.which === 13) || (event.keyCode && event.keyCode === 13)) {
                source_box.selectedIndex = 0;
                SelectBox.move(field_id + source, field_id + target);
                source_box.selectedIndex = 0;
                event.preventDefault();
            }
        },
        filter_key_up: function(event, field_id, source, filter_input) {
            const input = filter_input || '_input';
            const source_box = document.getElementById(field_id + source);
            const temp = source_box.selectedIndex;
            SelectBox.filter(field_id + source, document.getElementById(field_id + input).value);
            source_box.selectedIndex = temp;
            SelectFilter.refresh_filtered_warning(field_id);
            SelectFilter.refresh_icons(field_id);
        },
        filter_key_down: function(event, field_id, source, target) {
            const source_box = document.getElementById(field_id + source);
            // right key (39) or left key (37)
            const direction = source === '_from' ? 39 : 37;
            // right arrow -- move across
            if ((event.which && event.which === direction) || (event.keyCode && event.keyCode === direction)) {
                const old_index = source_box.selectedIndex;
                SelectBox.move(field_id + source, field_id + target);
                SelectFilter.refresh_filtered_selects(field_id);
                SelectFilter.refresh_filtered_warning(field_id);
                source_box.selectedIndex = (old_index === source_box.length) ? source_box.length - 1 : old_index;
                return;
            }
            // down arrow -- wrap around
            if ((event.which && event.which === 40) || (event.keyCode && event.keyCode === 40)) {
                source_box.selectedIndex = (source_box.length === source_box.selectedIndex + 1) ? 0 : source_box.selectedIndex + 1;
            }
            // up arrow -- wrap around
            if ((event.which && event.which === 38) || (event.keyCode && event.keyCode === 38)) {
                source_box.selectedIndex = (source_box.selectedIndex === 0) ? source_box.length - 1 : source_box.selectedIndex - 1;
            }
        }
    };

    window.addEventListener('load', function(e) {
        document.querySelectorAll('select.selectfilter, select.selectfilterstacked').forEach(function(el) {
            const data = el.dataset;
            SelectFilter.init(el.id, data.fieldName, parseInt(data.isStacked, 10));
        });
    });
}

```
--- END OF FILE: staticfiles\admin\js\SelectFilter2.js ---

--- START OF FILE: staticfiles\admin\js\actions.js ---
```js
/*global gettext, interpolate, ngettext, Actions*/
'use strict';
{
    function show(selector) {
        document.querySelectorAll(selector).forEach(function(el) {
            el.classList.remove('hidden');
        });
    }

    function hide(selector) {
        document.querySelectorAll(selector).forEach(function(el) {
            el.classList.add('hidden');
        });
    }

    function showQuestion(options) {
        hide(options.acrossClears);
        show(options.acrossQuestions);
        hide(options.allContainer);
    }

    function showClear(options) {
        show(options.acrossClears);
        hide(options.acrossQuestions);
        document.querySelector(options.actionContainer).classList.remove(options.selectedClass);
        show(options.allContainer);
        hide(options.counterContainer);
    }

    function reset(options) {
        hide(options.acrossClears);
        hide(options.acrossQuestions);
        hide(options.allContainer);
        show(options.counterContainer);
    }

    function clearAcross(options) {
        reset(options);
        const acrossInputs = document.querySelectorAll(options.acrossInput);
        acrossInputs.forEach(function(acrossInput) {
            acrossInput.value = 0;
        });
        document.querySelector(options.actionContainer).classList.remove(options.selectedClass);
    }

    function checker(actionCheckboxes, options, checked) {
        if (checked) {
            showQuestion(options);
        } else {
            reset(options);
        }
        actionCheckboxes.forEach(function(el) {
            el.checked = checked;
            el.closest('tr').classList.toggle(options.selectedClass, checked);
        });
    }

    function updateCounter(actionCheckboxes, options) {
        const sel = Array.from(actionCheckboxes).filter(function(el) {
            return el.checked;
        }).length;
        const counter = document.querySelector(options.counterContainer);
        // data-actions-icnt is defined in the generated HTML
        // and contains the total amount of objects in the queryset
        const actions_icnt = Number(counter.dataset.actionsIcnt);
        counter.textContent = interpolate(
            ngettext('%(sel)s of %(cnt)s selected', '%(sel)s of %(cnt)s selected', sel), {
                sel: sel,
                cnt: actions_icnt
            }, true);
        const allToggle = document.getElementById(options.allToggleId);
        allToggle.checked = sel === actionCheckboxes.length;
        if (allToggle.checked) {
            showQuestion(options);
        } else {
            clearAcross(options);
        }
    }

    const defaults = {
        actionContainer: "div.actions",
        counterContainer: "span.action-counter",
        allContainer: "div.actions span.all",
        acrossInput: "div.actions input.select-across",
        acrossQuestions: "div.actions span.question",
        acrossClears: "div.actions span.clear",
        allToggleId: "action-toggle",
        selectedClass: "selected"
    };

    window.Actions = function(actionCheckboxes, options) {
        options = Object.assign({}, defaults, options);
        let list_editable_changed = false;
        let lastChecked = null;
        let shiftPressed = false;

        document.addEventListener('keydown', (event) => {
            shiftPressed = event.shiftKey;
        });

        document.addEventListener('keyup', (event) => {
            shiftPressed = event.shiftKey;
        });

        document.getElementById(options.allToggleId).addEventListener('click', function(event) {
            checker(actionCheckboxes, options, this.checked);
            updateCounter(actionCheckboxes, options);
        });

        document.querySelectorAll(options.acrossQuestions + " a").forEach(function(el) {
            el.addEventListener('click', function(event) {
                event.preventDefault();
                const acrossInputs = document.querySelectorAll(options.acrossInput);
                acrossInputs.forEach(function(acrossInput) {
                    acrossInput.value = 1;
                });
                showClear(options);
            });
        });

        document.querySelectorAll(options.acrossClears + " a").forEach(function(el) {
            el.addEventListener('click', function(event) {
                event.preventDefault();
                document.getElementById(options.allToggleId).checked = false;
                clearAcross(options);
                checker(actionCheckboxes, options, false);
                updateCounter(actionCheckboxes, options);
            });
        });

        function affectedCheckboxes(target, withModifier) {
            const multiSelect = (lastChecked && withModifier && lastChecked !== target);
            if (!multiSelect) {
                return [target];
            }
            const checkboxes = Array.from(actionCheckboxes);
            const targetIndex = checkboxes.findIndex(el => el === target);
            const lastCheckedIndex = checkboxes.findIndex(el => el === lastChecked);
            const startIndex = Math.min(targetIndex, lastCheckedIndex);
            const endIndex = Math.max(targetIndex, lastCheckedIndex);
            const filtered = checkboxes.filter((el, index) => (startIndex <= index) && (index <= endIndex));
            return filtered;
        };

        Array.from(document.getElementById('result_list').tBodies).forEach(function(el) {
            el.addEventListener('change', function(event) {
                const target = event.target;
                if (target.classList.contains('action-select')) {
                    const checkboxes = affectedCheckboxes(target, shiftPressed);
                    checker(checkboxes, options, target.checked);
                    updateCounter(actionCheckboxes, options);
                    lastChecked = target;
                } else {
                    list_editable_changed = true;
                }
            });
        });

        document.querySelector('#changelist-form button[name=index]').addEventListener('click', function(event) {
            if (list_editable_changed) {
                const confirmed = confirm(gettext("You have unsaved changes on individual editable fields. If you run an action, your unsaved changes will be lost."));
                if (!confirmed) {
                    event.preventDefault();
                }
            }
        });

        const el = document.querySelector('#changelist-form input[name=_save]');
        // The button does not exist if no fields are editable.
        if (el) {
            el.addEventListener('click', function(event) {
                if (document.querySelector('[name=action]').value) {
                    const text = list_editable_changed
                        ? gettext("You have selected an action, but you haven’t saved your changes to individual fields yet. Please click OK to save. You’ll need to re-run the action.")
                        : gettext("You have selected an action, and you haven’t made any changes on individual fields. You’re probably looking for the Go button rather than the Save button.");
                    if (!confirm(text)) {
                        event.preventDefault();
                    }
                }
            });
        }
        // Sync counter when navigating to the page, such as through the back
        // button.
        window.addEventListener('pageshow', (event) => updateCounter(actionCheckboxes, options));
    };

    // Call function fn when the DOM is loaded and ready. If it is already
    // loaded, call the function now.
    // http://youmightnotneedjquery.com/#ready
    function ready(fn) {
        if (document.readyState !== 'loading') {
            fn();
        } else {
            document.addEventListener('DOMContentLoaded', fn);
        }
    }

    ready(function() {
        const actionsEls = document.querySelectorAll('tr input.action-select');
        if (actionsEls.length > 0) {
            Actions(actionsEls);
        }
    });
}

```
--- END OF FILE: staticfiles\admin\js\actions.js ---

--- START OF FILE: staticfiles\admin\js\autocomplete.js ---
```js
'use strict';
{
    const $ = django.jQuery;

    $.fn.djangoAdminSelect2 = function() {
        $.each(this, function(i, element) {
            $(element).select2({
                ajax: {
                    data: (params) => {
                        return {
                            term: params.term,
                            page: params.page,
                            app_label: element.dataset.appLabel,
                            model_name: element.dataset.modelName,
                            field_name: element.dataset.fieldName
                        };
                    }
                }
            });
        });
        return this;
    };

    $(function() {
        // Initialize all autocomplete widgets except the one in the template
        // form used when a new formset is added.
        $('.admin-autocomplete').not('[name*=__prefix__]').djangoAdminSelect2();
    });

    document.addEventListener('formset:added', (event) => {
        $(event.target).find('.admin-autocomplete').djangoAdminSelect2();
    });
}

```
--- END OF FILE: staticfiles\admin\js\autocomplete.js ---

--- START OF FILE: staticfiles\admin\js\calendar.js ---
```js
/*global gettext, pgettext, get_format, quickElement, removeChildren*/
/*
calendar.js - Calendar functions by Adrian Holovaty
depends on core.js for utility functions like removeChildren or quickElement
*/
'use strict';
{
    // CalendarNamespace -- Provides a collection of HTML calendar-related helper functions
    const CalendarNamespace = {
        monthsOfYear: [
            gettext('January'),
            gettext('February'),
            gettext('March'),
            gettext('April'),
            gettext('May'),
            gettext('June'),
            gettext('July'),
            gettext('August'),
            gettext('September'),
            gettext('October'),
            gettext('November'),
            gettext('December')
        ],
        monthsOfYearAbbrev: [
            pgettext('abbrev. month January', 'Jan'),
            pgettext('abbrev. month February', 'Feb'),
            pgettext('abbrev. month March', 'Mar'),
            pgettext('abbrev. month April', 'Apr'),
            pgettext('abbrev. month May', 'May'),
            pgettext('abbrev. month June', 'Jun'),
            pgettext('abbrev. month July', 'Jul'),
            pgettext('abbrev. month August', 'Aug'),
            pgettext('abbrev. month September', 'Sep'),
            pgettext('abbrev. month October', 'Oct'),
            pgettext('abbrev. month November', 'Nov'),
            pgettext('abbrev. month December', 'Dec')
        ],
        daysOfWeek: [
            gettext('Sunday'),
            gettext('Monday'),
            gettext('Tuesday'),
            gettext('Wednesday'),
            gettext('Thursday'),
            gettext('Friday'),
            gettext('Saturday')
        ],
        daysOfWeekAbbrev: [
            pgettext('abbrev. day Sunday', 'Sun'),
            pgettext('abbrev. day Monday', 'Mon'),
            pgettext('abbrev. day Tuesday', 'Tue'),
            pgettext('abbrev. day Wednesday', 'Wed'),
            pgettext('abbrev. day Thursday', 'Thur'),
            pgettext('abbrev. day Friday', 'Fri'),
            pgettext('abbrev. day Saturday', 'Sat')
        ],
        daysOfWeekInitial: [
            pgettext('one letter Sunday', 'S'),
            pgettext('one letter Monday', 'M'),
            pgettext('one letter Tuesday', 'T'),
            pgettext('one letter Wednesday', 'W'),
            pgettext('one letter Thursday', 'T'),
            pgettext('one letter Friday', 'F'),
            pgettext('one letter Saturday', 'S')
        ],
        firstDayOfWeek: parseInt(get_format('FIRST_DAY_OF_WEEK')),
        isLeapYear: function(year) {
            return (((year % 4) === 0) && ((year % 100) !== 0 ) || ((year % 400) === 0));
        },
        getDaysInMonth: function(month, year) {
            let days;
            if (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) {
                days = 31;
            }
            else if (month === 4 || month === 6 || month === 9 || month === 11) {
                days = 30;
            }
            else if (month === 2 && CalendarNamespace.isLeapYear(year)) {
                days = 29;
            }
            else {
                days = 28;
            }
            return days;
        },
        draw: function(month, year, div_id, callback, selected) { // month = 1-12, year = 1-9999
            const today = new Date();
            const todayDay = today.getDate();
            const todayMonth = today.getMonth() + 1;
            const todayYear = today.getFullYear();
            let todayClass = '';

            // Use UTC functions here because the date field does not contain time
            // and using the UTC function variants prevent the local time offset
            // from altering the date, specifically the day field.  For example:
            //
            // ```
            // var x = new Date('2013-10-02');
            // var day = x.getDate();
            // ```
            //
            // The day variable above will be 1 instead of 2 in, say, US Pacific time
            // zone.
            let isSelectedMonth = false;
            if (typeof selected !== 'undefined') {
                isSelectedMonth = (selected.getUTCFullYear() === year && (selected.getUTCMonth() + 1) === month);
            }

            month = parseInt(month);
            year = parseInt(year);
            const calDiv = document.getElementById(div_id);
            removeChildren(calDiv);
            const calTable = document.createElement('table');
            quickElement('caption', calTable, CalendarNamespace.monthsOfYear[month - 1] + ' ' + year);
            const tableBody = quickElement('tbody', calTable);

            // Draw days-of-week header
            let tableRow = quickElement('tr', tableBody);
            for (let i = 0; i < 7; i++) {
                quickElement('th', tableRow, CalendarNamespace.daysOfWeekInitial[(i + CalendarNamespace.firstDayOfWeek) % 7]);
            }

            const startingPos = new Date(year, month - 1, 1 - CalendarNamespace.firstDayOfWeek).getDay();
            const days = CalendarNamespace.getDaysInMonth(month, year);

            let nonDayCell;

            // Draw blanks before first of month
            tableRow = quickElement('tr', tableBody);
            for (let i = 0; i < startingPos; i++) {
                nonDayCell = quickElement('td', tableRow, ' ');
                nonDayCell.className = "nonday";
            }

            function calendarMonth(y, m) {
                function onClick(e) {
                    e.preventDefault();
                    callback(y, m, this.textContent);
                }
                return onClick;
            }

            // Draw days of month
            let currentDay = 1;
            for (let i = startingPos; currentDay <= days; i++) {
                if (i % 7 === 0 && currentDay !== 1) {
                    tableRow = quickElement('tr', tableBody);
                }
                if ((currentDay === todayDay) && (month === todayMonth) && (year === todayYear)) {
                    todayClass = 'today';
                } else {
                    todayClass = '';
                }

                // use UTC function; see above for explanation.
                if (isSelectedMonth && currentDay === selected.getUTCDate()) {
                    if (todayClass !== '') {
                        todayClass += " ";
                    }
                    todayClass += "selected";
                }

                const cell = quickElement('td', tableRow, '', 'class', todayClass);
                const link = quickElement('a', cell, currentDay, 'href', '#');
                link.addEventListener('click', calendarMonth(year, month));
                currentDay++;
            }

            // Draw blanks after end of month (optional, but makes for valid code)
            while (tableRow.childNodes.length < 7) {
                nonDayCell = quickElement('td', tableRow, ' ');
                nonDayCell.className = "nonday";
            }

            calDiv.appendChild(calTable);
        }
    };

    // Calendar -- A calendar instance
    function Calendar(div_id, callback, selected) {
        // div_id (string) is the ID of the element in which the calendar will
        //     be displayed
        // callback (string) is the name of a JavaScript function that will be
        //     called with the parameters (year, month, day) when a day in the
        //     calendar is clicked
        this.div_id = div_id;
        this.callback = callback;
        this.today = new Date();
        this.currentMonth = this.today.getMonth() + 1;
        this.currentYear = this.today.getFullYear();
        if (typeof selected !== 'undefined') {
            this.selected = selected;
        }
    }
    Calendar.prototype = {
        drawCurrent: function() {
            CalendarNamespace.draw(this.currentMonth, this.currentYear, this.div_id, this.callback, this.selected);
        },
        drawDate: function(month, year, selected) {
            this.currentMonth = month;
            this.currentYear = year;

            if(selected) {
                this.selected = selected;
            }

            this.drawCurrent();
        },
        drawPreviousMonth: function() {
            if (this.currentMonth === 1) {
                this.currentMonth = 12;
                this.currentYear--;
            }
            else {
                this.currentMonth--;
            }
            this.drawCurrent();
        },
        drawNextMonth: function() {
            if (this.currentMonth === 12) {
                this.currentMonth = 1;
                this.currentYear++;
            }
            else {
                this.currentMonth++;
            }
            this.drawCurrent();
        },
        drawPreviousYear: function() {
            this.currentYear--;
            this.drawCurrent();
        },
        drawNextYear: function() {
            this.currentYear++;
            this.drawCurrent();
        }
    };
    window.Calendar = Calendar;
    window.CalendarNamespace = CalendarNamespace;
}

```
--- END OF FILE: staticfiles\admin\js\calendar.js ---

--- START OF FILE: staticfiles\admin\js\cancel.js ---
```js
'use strict';
{
    // Call function fn when the DOM is loaded and ready. If it is already
    // loaded, call the function now.
    // http://youmightnotneedjquery.com/#ready
    function ready(fn) {
        if (document.readyState !== 'loading') {
            fn();
        } else {
            document.addEventListener('DOMContentLoaded', fn);
        }
    }

    ready(function() {
        function handleClick(event) {
            event.preventDefault();
            const params = new URLSearchParams(window.location.search);
            if (params.has('_popup')) {
                window.close(); // Close the popup.
            } else {
                window.history.back(); // Otherwise, go back.
            }
        }

        document.querySelectorAll('.cancel-link').forEach(function(el) {
            el.addEventListener('click', handleClick);
        });
    });
}

```
--- END OF FILE: staticfiles\admin\js\cancel.js ---

--- START OF FILE: staticfiles\admin\js\change_form.js ---
```js
'use strict';
{
    const inputTags = ['BUTTON', 'INPUT', 'SELECT', 'TEXTAREA'];
    const modelName = document.getElementById('django-admin-form-add-constants').dataset.modelName;
    if (modelName) {
        const form = document.getElementById(modelName + '_form');
        for (const element of form.elements) {
            // HTMLElement.offsetParent returns null when the element is not
            // rendered.
            if (inputTags.includes(element.tagName) && !element.disabled && element.offsetParent) {
                element.focus();
                break;
            }
        }
    }
}

```
--- END OF FILE: staticfiles\admin\js\change_form.js ---

--- START OF FILE: staticfiles\admin\js\core.js ---
```js
// Core JavaScript helper functions
'use strict';

// quickElement(tagType, parentReference [, textInChildNode, attribute, attributeValue ...]);
function quickElement() {
    const obj = document.createElement(arguments[0]);
    if (arguments[2]) {
        const textNode = document.createTextNode(arguments[2]);
        obj.appendChild(textNode);
    }
    const len = arguments.length;
    for (let i = 3; i < len; i += 2) {
        obj.setAttribute(arguments[i], arguments[i + 1]);
    }
    arguments[1].appendChild(obj);
    return obj;
}

// "a" is reference to an object
function removeChildren(a) {
    while (a.hasChildNodes()) {
        a.removeChild(a.lastChild);
    }
}

// ----------------------------------------------------------------------------
// Find-position functions by PPK
// See https://www.quirksmode.org/js/findpos.html
// ----------------------------------------------------------------------------
function findPosX(obj) {
    let curleft = 0;
    if (obj.offsetParent) {
        while (obj.offsetParent) {
            curleft += obj.offsetLeft - obj.scrollLeft;
            obj = obj.offsetParent;
        }
    } else if (obj.x) {
        curleft += obj.x;
    }
    return curleft;
}

function findPosY(obj) {
    let curtop = 0;
    if (obj.offsetParent) {
        while (obj.offsetParent) {
            curtop += obj.offsetTop - obj.scrollTop;
            obj = obj.offsetParent;
        }
    } else if (obj.y) {
        curtop += obj.y;
    }
    return curtop;
}

//-----------------------------------------------------------------------------
// Date object extensions
// ----------------------------------------------------------------------------
{
    Date.prototype.getTwelveHours = function() {
        return this.getHours() % 12 || 12;
    };

    Date.prototype.getTwoDigitMonth = function() {
        return (this.getMonth() < 9) ? '0' + (this.getMonth() + 1) : (this.getMonth() + 1);
    };

    Date.prototype.getTwoDigitDate = function() {
        return (this.getDate() < 10) ? '0' + this.getDate() : this.getDate();
    };

    Date.prototype.getTwoDigitTwelveHour = function() {
        return (this.getTwelveHours() < 10) ? '0' + this.getTwelveHours() : this.getTwelveHours();
    };

    Date.prototype.getTwoDigitHour = function() {
        return (this.getHours() < 10) ? '0' + this.getHours() : this.getHours();
    };

    Date.prototype.getTwoDigitMinute = function() {
        return (this.getMinutes() < 10) ? '0' + this.getMinutes() : this.getMinutes();
    };

    Date.prototype.getTwoDigitSecond = function() {
        return (this.getSeconds() < 10) ? '0' + this.getSeconds() : this.getSeconds();
    };

    Date.prototype.getAbbrevDayName = function() {
        return typeof window.CalendarNamespace === "undefined"
            ? '0' + this.getDay()
            : window.CalendarNamespace.daysOfWeekAbbrev[this.getDay()];
    };

    Date.prototype.getFullDayName = function() {
        return typeof window.CalendarNamespace === "undefined"
            ? '0' + this.getDay()
            : window.CalendarNamespace.daysOfWeek[this.getDay()];
    };

    Date.prototype.getAbbrevMonthName = function() {
        return typeof window.CalendarNamespace === "undefined"
            ? this.getTwoDigitMonth()
            : window.CalendarNamespace.monthsOfYearAbbrev[this.getMonth()];
    };

    Date.prototype.getFullMonthName = function() {
        return typeof window.CalendarNamespace === "undefined"
            ? this.getTwoDigitMonth()
            : window.CalendarNamespace.monthsOfYear[this.getMonth()];
    };

    Date.prototype.strftime = function(format) {
        const fields = {
            a: this.getAbbrevDayName(),
            A: this.getFullDayName(),
            b: this.getAbbrevMonthName(),
            B: this.getFullMonthName(),
            c: this.toString(),
            d: this.getTwoDigitDate(),
            H: this.getTwoDigitHour(),
            I: this.getTwoDigitTwelveHour(),
            m: this.getTwoDigitMonth(),
            M: this.getTwoDigitMinute(),
            p: (this.getHours() >= 12) ? 'PM' : 'AM',
            S: this.getTwoDigitSecond(),
            w: '0' + this.getDay(),
            x: this.toLocaleDateString(),
            X: this.toLocaleTimeString(),
            y: ('' + this.getFullYear()).substr(2, 4),
            Y: '' + this.getFullYear(),
            '%': '%'
        };
        let result = '', i = 0;
        while (i < format.length) {
            if (format.charAt(i) === '%') {
                result += fields[format.charAt(i + 1)];
                ++i;
            }
            else {
                result += format.charAt(i);
            }
            ++i;
        }
        return result;
    };

    // ----------------------------------------------------------------------------
    // String object extensions
    // ----------------------------------------------------------------------------
    String.prototype.strptime = function(format) {
        const split_format = format.split(/[.\-/]/);
        const date = this.split(/[.\-/]/);
        let i = 0;
        let day, month, year;
        while (i < split_format.length) {
            switch (split_format[i]) {
            case "%d":
                day = date[i];
                break;
            case "%m":
                month = date[i] - 1;
                break;
            case "%Y":
                year = date[i];
                break;
            case "%y":
                // A %y value in the range of [00, 68] is in the current
                // century, while [69, 99] is in the previous century,
                // according to the Open Group Specification.
                if (parseInt(date[i], 10) >= 69) {
                    year = date[i];
                } else {
                    year = (new Date(Date.UTC(date[i], 0))).getUTCFullYear() + 100;
                }
                break;
            }
            ++i;
        }
        // Create Date object from UTC since the parsed value is supposed to be
        // in UTC, not local time. Also, the calendar uses UTC functions for
        // date extraction.
        return new Date(Date.UTC(year, month, day));
    };
}

```
--- END OF FILE: staticfiles\admin\js\core.js ---

--- START OF FILE: staticfiles\admin\js\filters.js ---
```js
/**
 * Persist changelist filters state (collapsed/expanded).
 */
'use strict';
{
    // Init filters.
    let filters = JSON.parse(sessionStorage.getItem('django.admin.filtersState'));

    if (!filters) {
        filters = {};
    }

    Object.entries(filters).forEach(([key, value]) => {
        const detailElement = document.querySelector(`[data-filter-title='${CSS.escape(key)}']`);

        // Check if the filter is present, it could be from other view.
        if (detailElement) {
            value ? detailElement.setAttribute('open', '') : detailElement.removeAttribute('open');
        }
    });

    // Save filter state when clicks.
    const details = document.querySelectorAll('details');
    details.forEach(detail => {
        detail.addEventListener('toggle', event => {
            filters[`${event.target.dataset.filterTitle}`] = detail.open;
            sessionStorage.setItem('django.admin.filtersState', JSON.stringify(filters));
        });
    });
}

```
--- END OF FILE: staticfiles\admin\js\filters.js ---

--- START OF FILE: staticfiles\admin\js\inlines.js ---
```js
/*global DateTimeShortcuts, SelectFilter*/
/**
 * Django admin inlines
 *
 * Based on jQuery Formset 1.1
 * @author Stanislaus Madueke (stan DOT madueke AT gmail DOT com)
 * @requires jQuery 1.2.6 or later
 *
 * Copyright (c) 2009, Stanislaus Madueke
 * All rights reserved.
 *
 * Spiced up with Code from Zain Memon's GSoC project 2009
 * and modified for Django by Jannis Leidel, Travis Swicegood and Julien Phalip.
 *
 * Licensed under the New BSD License
 * See: https://opensource.org/licenses/bsd-license.php
 */
'use strict';
{
    const $ = django.jQuery;
    $.fn.formset = function(opts) {
        const options = $.extend({}, $.fn.formset.defaults, opts);
        const $this = $(this);
        const $parent = $this.parent();
        const updateElementIndex = function(el, prefix, ndx) {
            const id_regex = new RegExp("(" + prefix + "-(\\d+|__prefix__))");
            const replacement = prefix + "-" + ndx;
            if ($(el).prop("for")) {
                $(el).prop("for", $(el).prop("for").replace(id_regex, replacement));
            }
            if (el.id) {
                el.id = el.id.replace(id_regex, replacement);
            }
            if (el.name) {
                el.name = el.name.replace(id_regex, replacement);
            }
        };
        const totalForms = $("#id_" + options.prefix + "-TOTAL_FORMS").prop("autocomplete", "off");
        let nextIndex = parseInt(totalForms.val(), 10);
        const maxForms = $("#id_" + options.prefix + "-MAX_NUM_FORMS").prop("autocomplete", "off");
        const minForms = $("#id_" + options.prefix + "-MIN_NUM_FORMS").prop("autocomplete", "off");
        let addButton;

        /**
         * The "Add another MyModel" button below the inline forms.
         */
        const addInlineAddButton = function() {
            if (addButton === null) {
                if ($this.prop("tagName") === "TR") {
                    // If forms are laid out as table rows, insert the
                    // "add" button in a new table row:
                    const numCols = $this.eq(-1).children().length;
                    $parent.append('<tr class="' + options.addCssClass + '"><td colspan="' + numCols + '"><a role="button" class="addlink" href="#">' + options.addText + "</a></tr>");
                    addButton = $parent.find("tr:last a");
                } else {
                    // Otherwise, insert it immediately after the last form:
                    $this.filter(":last").after('<div class="' + options.addCssClass + '"><a role="button" class="addlink" href="#">' + options.addText + "</a></div>");
                    addButton = $this.filter(":last").next().find("a");
                }
            }
            addButton.on('click', addInlineClickHandler);
        };

        const addInlineClickHandler = function(e) {
            e.preventDefault();
            const template = $("#" + options.prefix + "-empty");
            const row = template.clone(true);
            row.removeClass(options.emptyCssClass)
                .addClass(options.formCssClass)
                .attr("id", options.prefix + "-" + nextIndex);
            addInlineDeleteButton(row);
            row.find("*").each(function() {
                updateElementIndex(this, options.prefix, totalForms.val());
            });
            // Insert the new form when it has been fully edited.
            row.insertBefore($(template));
            // Update number of total forms.
            $(totalForms).val(parseInt(totalForms.val(), 10) + 1);
            nextIndex += 1;
            // Hide the add button if there's a limit and it's been reached.
            if ((maxForms.val() !== '') && (maxForms.val() - totalForms.val()) <= 0) {
                addButton.parent().hide();
            }
            // Show the remove buttons if there are more than min_num.
            toggleDeleteButtonVisibility(row.closest('.inline-group'));

            // Pass the new form to the post-add callback, if provided.
            if (options.added) {
                options.added(row);
            }
            row.get(0).dispatchEvent(new CustomEvent("formset:added", {
                bubbles: true,
                detail: {
                    formsetName: options.prefix
                }
            }));
        };

        /**
         * The "X" button that is part of every unsaved inline.
         * (When saved, it is replaced with a "Delete" checkbox.)
         */
        const addInlineDeleteButton = function(row) {
            if (row.is("tr")) {
                // If the forms are laid out in table rows, insert
                // the remove button into the last table cell:
                row.children(":last").append('<div><a role="button" class="' + options.deleteCssClass + '" href="#">' + options.deleteText + "</a></div>");
            } else if (row.is("ul") || row.is("ol")) {
                // If they're laid out as an ordered/unordered list,
                // insert an <li> after the last list item:
                row.append('<li><a role="button" class="' + options.deleteCssClass + '" href="#">' + options.deleteText + "</a></li>");
            } else {
                // Otherwise, just insert the remove button as the
                // last child element of the form's container:
                row.children(":first").append('<span><a role="button" class="' + options.deleteCssClass + '" href="#">' + options.deleteText + "</a></span>");
            }
            // Add delete handler for each row.
            row.find("a." + options.deleteCssClass).on('click', inlineDeleteHandler.bind(this));
        };

        const inlineDeleteHandler = function(e1) {
            e1.preventDefault();
            const deleteButton = $(e1.target);
            const row = deleteButton.closest('.' + options.formCssClass);
            const inlineGroup = row.closest('.inline-group');
            // Remove the parent form containing this button,
            // and also remove the relevant row with non-field errors:
            const prevRow = row.prev();
            if (prevRow.length && prevRow.hasClass('row-form-errors')) {
                prevRow.remove();
            }
            row.remove();
            nextIndex -= 1;
            // Pass the deleted form to the post-delete callback, if provided.
            if (options.removed) {
                options.removed(row);
            }
            document.dispatchEvent(new CustomEvent("formset:removed", {
                detail: {
                    formsetName: options.prefix
                }
            }));
            // Update the TOTAL_FORMS form count.
            const forms = $("." + options.formCssClass);
            $("#id_" + options.prefix + "-TOTAL_FORMS").val(forms.length);
            // Show add button again once below maximum number.
            if ((maxForms.val() === '') || (maxForms.val() - forms.length) > 0) {
                addButton.parent().show();
            }
            // Hide the remove buttons if at min_num.
            toggleDeleteButtonVisibility(inlineGroup);
            // Also, update names and ids for all remaining form controls so
            // they remain in sequence:
            let i, formCount;
            const updateElementCallback = function() {
                updateElementIndex(this, options.prefix, i);
            };
            for (i = 0, formCount = forms.length; i < formCount; i++) {
                updateElementIndex($(forms).get(i), options.prefix, i);
                $(forms.get(i)).find("*").each(updateElementCallback);
            }
        };

        const toggleDeleteButtonVisibility = function(inlineGroup) {
            if ((minForms.val() !== '') && (minForms.val() - totalForms.val()) >= 0) {
                inlineGroup.find('.inline-deletelink').hide();
            } else {
                inlineGroup.find('.inline-deletelink').show();
            }
        };

        $this.each(function(i) {
            $(this).not("." + options.emptyCssClass).addClass(options.formCssClass);
        });

        // Create the delete buttons for all unsaved inlines:
        $this.filter('.' + options.formCssClass + ':not(.has_original):not(.' + options.emptyCssClass + ')').each(function() {
            addInlineDeleteButton($(this));
        });
        toggleDeleteButtonVisibility($this);

        // Create the add button, initially hidden.
        addButton = options.addButton;
        addInlineAddButton();

        // Show the add button if allowed to add more items.
        // Note that max_num = None translates to a blank string.
        const showAddButton = maxForms.val() === '' || (maxForms.val() - totalForms.val()) > 0;
        if ($this.length && showAddButton) {
            addButton.parent().show();
        } else {
            addButton.parent().hide();
        }

        return this;
    };

    /* Setup plugin defaults */
    $.fn.formset.defaults = {
        prefix: "form", // The form prefix for your django formset
        addText: "add another", // Text for the add link
        deleteText: "remove", // Text for the delete link
        addCssClass: "add-row", // CSS class applied to the add link
        deleteCssClass: "delete-row", // CSS class applied to the delete link
        emptyCssClass: "empty-row", // CSS class applied to the empty row
        formCssClass: "dynamic-form", // CSS class applied to each form in a formset
        added: null, // Function called each time a new form is added
        removed: null, // Function called each time a form is deleted
        addButton: null // Existing add button to use
    };


    // Tabular inlines ---------------------------------------------------------
    $.fn.tabularFormset = function(selector, options) {
        const $rows = $(this);

        const reinitDateTimeShortCuts = function() {
            // Reinitialize the calendar and clock widgets by force
            if (typeof DateTimeShortcuts !== "undefined") {
                $(".datetimeshortcuts").remove();
                DateTimeShortcuts.init();
            }
        };

        const updateSelectFilter = function() {
            // If any SelectFilter widgets are a part of the new form,
            // instantiate a new SelectFilter instance for it.
            if (typeof SelectFilter !== 'undefined') {
                $('.selectfilter').each(function(index, value) {
                    SelectFilter.init(value.id, this.dataset.fieldName, false);
                });
                $('.selectfilterstacked').each(function(index, value) {
                    SelectFilter.init(value.id, this.dataset.fieldName, true);
                });
            }
        };

        const initPrepopulatedFields = function(row) {
            row.find('.prepopulated_field').each(function() {
                const field = $(this),
                    input = field.find('input, select, textarea'),
                    dependency_list = input.data('dependency_list') || [],
                    dependencies = [];
                $.each(dependency_list, function(i, field_name) {
                    dependencies.push('#' + row.find('.field-' + field_name).find('input, select, textarea').attr('id'));
                });
                if (dependencies.length) {
                    input.prepopulate(dependencies, input.attr('maxlength'));
                }
            });
        };

        $rows.formset({
            prefix: options.prefix,
            addText: options.addText,
            formCssClass: "dynamic-" + options.prefix,
            deleteCssClass: "inline-deletelink",
            deleteText: options.deleteText,
            emptyCssClass: "empty-form",
            added: function(row) {
                initPrepopulatedFields(row);
                reinitDateTimeShortCuts();
                updateSelectFilter();
            },
            addButton: options.addButton
        });

        return $rows;
    };

    // Stacked inlines ---------------------------------------------------------
    $.fn.stackedFormset = function(selector, options) {
        const $rows = $(this);
        const updateInlineLabel = function(row) {
            $(selector).find(".inline_label").each(function(i) {
                const count = i + 1;
                $(this).html($(this).html().replace(/(#\d+)/g, "#" + count));
            });
        };

        const reinitDateTimeShortCuts = function() {
            // Reinitialize the calendar and clock widgets by force, yuck.
            if (typeof DateTimeShortcuts !== "undefined") {
                $(".datetimeshortcuts").remove();
                DateTimeShortcuts.init();
            }
        };

        const updateSelectFilter = function() {
            // If any SelectFilter widgets were added, instantiate a new instance.
            if (typeof SelectFilter !== "undefined") {
                $(".selectfilter").each(function(index, value) {
                    SelectFilter.init(value.id, this.dataset.fieldName, false);
                });
                $(".selectfilterstacked").each(function(index, value) {
                    SelectFilter.init(value.id, this.dataset.fieldName, true);
                });
            }
        };

        const initPrepopulatedFields = function(row) {
            row.find('.prepopulated_field').each(function() {
                const field = $(this),
                    input = field.find('input, select, textarea'),
                    dependency_list = input.data('dependency_list') || [],
                    dependencies = [];
                $.each(dependency_list, function(i, field_name) {
                    // Dependency in a fieldset.
                    let field_element = row.find('.form-row .field-' + field_name);
                    // Dependency without a fieldset.
                    if (!field_element.length) {
                        field_element = row.find('.form-row.field-' + field_name);
                    }
                    dependencies.push('#' + field_element.find('input, select, textarea').attr('id'));
                });
                if (dependencies.length) {
                    input.prepopulate(dependencies, input.attr('maxlength'));
                }
            });
        };

        $rows.formset({
            prefix: options.prefix,
            addText: options.addText,
            formCssClass: "dynamic-" + options.prefix,
            deleteCssClass: "inline-deletelink",
            deleteText: options.deleteText,
            emptyCssClass: "empty-form",
            removed: updateInlineLabel,
            added: function(row) {
                initPrepopulatedFields(row);
                reinitDateTimeShortCuts();
                updateSelectFilter();
                updateInlineLabel(row);
            },
            addButton: options.addButton
        });

        return $rows;
    };

    $(document).ready(function() {
        $(".js-inline-admin-formset").each(function() {
            const data = $(this).data(),
                inlineOptions = data.inlineFormset;
            let selector;
            switch(data.inlineType) {
            case "stacked":
                selector = inlineOptions.name + "-group .inline-related";
                $(selector).stackedFormset(selector, inlineOptions.options);
                break;
            case "tabular":
                selector = inlineOptions.name + "-group .tabular.inline-related tbody:first > tr.form-row";
                $(selector).tabularFormset(selector, inlineOptions.options);
                break;
            }
        });
    });
}

```
--- END OF FILE: staticfiles\admin\js\inlines.js ---

--- START OF FILE: staticfiles\admin\js\jquery.init.js ---
```js
/*global jQuery:false*/
'use strict';
/* Puts the included jQuery into our own namespace using noConflict and passing
 * it 'true'. This ensures that the included jQuery doesn't pollute the global
 * namespace (i.e. this preserves pre-existing values for both window.$ and
 * window.jQuery).
 */
window.django = {jQuery: jQuery.noConflict(true)};

```
--- END OF FILE: staticfiles\admin\js\jquery.init.js ---

--- START OF FILE: staticfiles\admin\js\nav_sidebar.js ---
```js
'use strict';
{
    const toggleNavSidebar = document.getElementById('toggle-nav-sidebar');
    if (toggleNavSidebar !== null) {
        const navSidebar = document.getElementById('nav-sidebar');
        const main = document.getElementById('main');
        let navSidebarIsOpen = localStorage.getItem('django.admin.navSidebarIsOpen');
        if (navSidebarIsOpen === null) {
            navSidebarIsOpen = 'true';
        }
        main.classList.toggle('shifted', navSidebarIsOpen === 'true');
        navSidebar.setAttribute('aria-expanded', navSidebarIsOpen);

        toggleNavSidebar.addEventListener('click', function() {
            if (navSidebarIsOpen === 'true') {
                navSidebarIsOpen = 'false';
            } else {
                navSidebarIsOpen = 'true';
            }
            localStorage.setItem('django.admin.navSidebarIsOpen', navSidebarIsOpen);
            main.classList.toggle('shifted');
            navSidebar.setAttribute('aria-expanded', navSidebarIsOpen);
        });
    }

    function initSidebarQuickFilter() {
        const options = [];
        const navSidebar = document.getElementById('nav-sidebar');
        if (!navSidebar) {
            return;
        }
        navSidebar.querySelectorAll('th[scope=row] a').forEach((container) => {
            options.push({title: container.innerHTML, node: container});
        });

        function checkValue(event) {
            let filterValue = event.target.value;
            if (filterValue) {
                filterValue = filterValue.toLowerCase();
            }
            if (event.key === 'Escape') {
                filterValue = '';
                event.target.value = ''; // clear input
            }
            let matches = false;
            for (const o of options) {
                let displayValue = '';
                if (filterValue) {
                    if (o.title.toLowerCase().indexOf(filterValue) === -1) {
                        displayValue = 'none';
                    } else {
                        matches = true;
                    }
                }
                // show/hide parent <TR>
                o.node.parentNode.parentNode.style.display = displayValue;
            }
            if (!filterValue || matches) {
                event.target.classList.remove('no-results');
            } else {
                event.target.classList.add('no-results');
            }
            sessionStorage.setItem('django.admin.navSidebarFilterValue', filterValue);
        }

        const nav = document.getElementById('nav-filter');
        nav.addEventListener('change', checkValue, false);
        nav.addEventListener('input', checkValue, false);
        nav.addEventListener('keyup', checkValue, false);

        const storedValue = sessionStorage.getItem('django.admin.navSidebarFilterValue');
        if (storedValue) {
            nav.value = storedValue;
            checkValue({target: nav, key: ''});
        }
    }
    window.initSidebarQuickFilter = initSidebarQuickFilter;
    initSidebarQuickFilter();
}

```
--- END OF FILE: staticfiles\admin\js\nav_sidebar.js ---

--- START OF FILE: staticfiles\admin\js\popup_response.js ---
```js
'use strict';
{
    const initData = JSON.parse(document.getElementById('django-admin-popup-response-constants').dataset.popupResponse);
    switch(initData.action) {
    case 'change':
        opener.dismissChangeRelatedObjectPopup(window, initData.value, initData.obj, initData.new_value);
        break;
    case 'delete':
        opener.dismissDeleteRelatedObjectPopup(window, initData.value);
        break;
    default:
        opener.dismissAddRelatedObjectPopup(window, initData.value, initData.obj);
        break;
    }
}

```
--- END OF FILE: staticfiles\admin\js\popup_response.js ---

--- START OF FILE: staticfiles\admin\js\prepopulate.js ---
```js
/*global URLify*/
'use strict';
{
    const $ = django.jQuery;
    $.fn.prepopulate = function(dependencies, maxLength, allowUnicode) {
        /*
            Depends on urlify.js
            Populates a selected field with the values of the dependent fields,
            URLifies and shortens the string.
            dependencies - array of dependent fields ids
            maxLength - maximum length of the URLify'd string
            allowUnicode - Unicode support of the URLify'd string
        */
        return this.each(function() {
            const prepopulatedField = $(this);

            const populate = function() {
                // Bail if the field's value has been changed by the user
                if (prepopulatedField.data('_changed')) {
                    return;
                }

                const values = [];
                $.each(dependencies, function(i, field) {
                    field = $(field);
                    if (field.val().length > 0) {
                        values.push(field.val());
                    }
                });
                prepopulatedField.val(URLify(values.join(' '), maxLength, allowUnicode));
            };

            prepopulatedField.data('_changed', false);
            prepopulatedField.on('change', function() {
                prepopulatedField.data('_changed', true);
            });

            if (!prepopulatedField.val()) {
                $(dependencies.join(',')).on('keyup change focus', populate);
            }
        });
    };
}

```
--- END OF FILE: staticfiles\admin\js\prepopulate.js ---

--- START OF FILE: staticfiles\admin\js\prepopulate_init.js ---
```js
'use strict';
{
    const $ = django.jQuery;
    const fields = $('#django-admin-prepopulated-fields-constants').data('prepopulatedFields');
    $.each(fields, function(index, field) {
        $(
            '.empty-form .form-row .field-' + field.name +
            ', .empty-form.form-row .field-' + field.name +
            ', .empty-form .form-row.field-' + field.name
        ).addClass('prepopulated_field');
        $(field.id).data('dependency_list', field.dependency_list).prepopulate(
            field.dependency_ids, field.maxLength, field.allowUnicode
        );
    });
}

```
--- END OF FILE: staticfiles\admin\js\prepopulate_init.js ---

--- START OF FILE: staticfiles\admin\js\theme.js ---
```js
'use strict';
{
    function setTheme(mode) {
        if (mode !== "light" && mode !== "dark" && mode !== "auto") {
            console.error(`Got invalid theme mode: ${mode}. Resetting to auto.`);
            mode = "auto";
        }
        document.documentElement.dataset.theme = mode;
        localStorage.setItem("theme", mode);
    }

    function cycleTheme() {
        const currentTheme = localStorage.getItem("theme") || "auto";
        const prefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches;

        if (prefersDark) {
            // Auto (dark) -> Light -> Dark
            if (currentTheme === "auto") {
                setTheme("light");
            } else if (currentTheme === "light") {
                setTheme("dark");
            } else {
                setTheme("auto");
            }
        } else {
            // Auto (light) -> Dark -> Light
            if (currentTheme === "auto") {
                setTheme("dark");
            } else if (currentTheme === "dark") {
                setTheme("light");
            } else {
                setTheme("auto");
            }
        }
    }

    function initTheme() {
        // set theme defined in localStorage if there is one, or fallback to auto mode
        const currentTheme = localStorage.getItem("theme");
        currentTheme ? setTheme(currentTheme) : setTheme("auto");
    }

    window.addEventListener('load', function(_) {
        const buttons = document.getElementsByClassName("theme-toggle");
        Array.from(buttons).forEach((btn) => {
            btn.addEventListener("click", cycleTheme);
        });
    });

    initTheme();
}

```
--- END OF FILE: staticfiles\admin\js\theme.js ---

--- START OF FILE: staticfiles\admin\js\unusable_password_field.js ---
```js
"use strict";
// Fallback JS for browsers which do not support :has selector used in
// admin/css/unusable_password_fields.css
// Remove file once all supported browsers support :has selector
try {
    // If browser does not support :has selector this will raise an error
    document.querySelector("form:has(input)");
} catch (error) {
    console.log("Defaulting to javascript for usable password form management: " + error);
    // JS replacement for unsupported :has selector
    document.querySelectorAll('input[name="usable_password"]').forEach(option => {
        option.addEventListener('change', function() {
            const usablePassword = (this.value === "true" ? this.checked : !this.checked);
            const submit1 = document.querySelector('input[type="submit"].set-password');
            const submit2 = document.querySelector('input[type="submit"].unset-password');
            const messages = document.querySelector('#id_unusable_warning');
            document.getElementById('id_password1').closest('.form-row').hidden = !usablePassword;
            document.getElementById('id_password2').closest('.form-row').hidden = !usablePassword;
            if (messages) {
                messages.hidden = usablePassword;
            }
            if (submit1 && submit2) {
                submit1.hidden = !usablePassword;
                submit2.hidden = usablePassword;
            }
        });
        option.dispatchEvent(new Event('change'));
    });
}

```
--- END OF FILE: staticfiles\admin\js\unusable_password_field.js ---

--- START OF FILE: staticfiles\admin\js\urlify.js ---
```js
/*global XRegExp*/
'use strict';
{
    const LATIN_MAP = {
        'À': 'A', 'Á': 'A', 'Â': 'A', 'Ã': 'A', 'Ä': 'A', 'Å': 'A', 'Æ': 'AE',
        'Ç': 'C', 'È': 'E', 'É': 'E', 'Ê': 'E', 'Ë': 'E', 'Ì': 'I', 'Í': 'I',
        'Î': 'I', 'Ï': 'I', 'Ð': 'D', 'Ñ': 'N', 'Ò': 'O', 'Ó': 'O', 'Ô': 'O',
        'Õ': 'O', 'Ö': 'O', 'Ő': 'O', 'Ø': 'O', 'Ù': 'U', 'Ú': 'U', 'Û': 'U',
        'Ü': 'U', 'Ű': 'U', 'Ý': 'Y', 'Þ': 'TH', 'Ÿ': 'Y', 'ß': 'ss', 'à': 'a',
        'á': 'a', 'â': 'a', 'ã': 'a', 'ä': 'a', 'å': 'a', 'æ': 'ae', 'ç': 'c',
        'è': 'e', 'é': 'e', 'ê': 'e', 'ë': 'e', 'ì': 'i', 'í': 'i', 'î': 'i',
        'ï': 'i', 'ð': 'd', 'ñ': 'n', 'ò': 'o', 'ó': 'o', 'ô': 'o', 'õ': 'o',
        'ö': 'o', 'ő': 'o', 'ø': 'o', 'ù': 'u', 'ú': 'u', 'û': 'u', 'ü': 'u',
        'ű': 'u', 'ý': 'y', 'þ': 'th', 'ÿ': 'y'
    };
    const LATIN_SYMBOLS_MAP = {
        '©': '(c)'
    };
    const GREEK_MAP = {
        'α': 'a', 'β': 'b', 'γ': 'g', 'δ': 'd', 'ε': 'e', 'ζ': 'z', 'η': 'h',
        'θ': '8', 'ι': 'i', 'κ': 'k', 'λ': 'l', 'μ': 'm', 'ν': 'n', 'ξ': '3',
        'ο': 'o', 'π': 'p', 'ρ': 'r', 'σ': 's', 'τ': 't', 'υ': 'y', 'φ': 'f',
        'χ': 'x', 'ψ': 'ps', 'ω': 'w', 'ά': 'a', 'έ': 'e', 'ί': 'i', 'ό': 'o',
        'ύ': 'y', 'ή': 'h', 'ώ': 'w', 'ς': 's', 'ϊ': 'i', 'ΰ': 'y', 'ϋ': 'y',
        'ΐ': 'i', 'Α': 'A', 'Β': 'B', 'Γ': 'G', 'Δ': 'D', 'Ε': 'E', 'Ζ': 'Z',
        'Η': 'H', 'Θ': '8', 'Ι': 'I', 'Κ': 'K', 'Λ': 'L', 'Μ': 'M', 'Ν': 'N',
        'Ξ': '3', 'Ο': 'O', 'Π': 'P', 'Ρ': 'R', 'Σ': 'S', 'Τ': 'T', 'Υ': 'Y',
        'Φ': 'F', 'Χ': 'X', 'Ψ': 'PS', 'Ω': 'W', 'Ά': 'A', 'Έ': 'E', 'Ί': 'I',
        'Ό': 'O', 'Ύ': 'Y', 'Ή': 'H', 'Ώ': 'W', 'Ϊ': 'I', 'Ϋ': 'Y'
    };
    const TURKISH_MAP = {
        'ş': 's', 'Ş': 'S', 'ı': 'i', 'İ': 'I', 'ç': 'c', 'Ç': 'C', 'ü': 'u',
        'Ü': 'U', 'ö': 'o', 'Ö': 'O', 'ğ': 'g', 'Ğ': 'G'
    };
    const ROMANIAN_MAP = {
        'ă': 'a', 'î': 'i', 'ș': 's', 'ț': 't', 'â': 'a',
        'Ă': 'A', 'Î': 'I', 'Ș': 'S', 'Ț': 'T', 'Â': 'A'
    };
    const RUSSIAN_MAP = {
        'а': 'a', 'б': 'b', 'в': 'v', 'г': 'g', 'д': 'd', 'е': 'e', 'ё': 'yo',
        'ж': 'zh', 'з': 'z', 'и': 'i', 'й': 'j', 'к': 'k', 'л': 'l', 'м': 'm',
        'н': 'n', 'о': 'o', 'п': 'p', 'р': 'r', 'с': 's', 'т': 't', 'у': 'u',
        'ф': 'f', 'х': 'h', 'ц': 'c', 'ч': 'ch', 'ш': 'sh', 'щ': 'sh', 'ъ': '',
        'ы': 'y', 'ь': '', 'э': 'e', 'ю': 'yu', 'я': 'ya',
        'А': 'A', 'Б': 'B', 'В': 'V', 'Г': 'G', 'Д': 'D', 'Е': 'E', 'Ё': 'Yo',
        'Ж': 'Zh', 'З': 'Z', 'И': 'I', 'Й': 'J', 'К': 'K', 'Л': 'L', 'М': 'M',
        'Н': 'N', 'О': 'O', 'П': 'P', 'Р': 'R', 'С': 'S', 'Т': 'T', 'У': 'U',
        'Ф': 'F', 'Х': 'H', 'Ц': 'C', 'Ч': 'Ch', 'Ш': 'Sh', 'Щ': 'Sh', 'Ъ': '',
        'Ы': 'Y', 'Ь': '', 'Э': 'E', 'Ю': 'Yu', 'Я': 'Ya'
    };
    const UKRAINIAN_MAP = {
        'Є': 'Ye', 'І': 'I', 'Ї': 'Yi', 'Ґ': 'G', 'є': 'ye', 'і': 'i',
        'ї': 'yi', 'ґ': 'g'
    };
    const CZECH_MAP = {
        'č': 'c', 'ď': 'd', 'ě': 'e', 'ň': 'n', 'ř': 'r', 'š': 's', 'ť': 't',
        'ů': 'u', 'ž': 'z', 'Č': 'C', 'Ď': 'D', 'Ě': 'E', 'Ň': 'N', 'Ř': 'R',
        'Š': 'S', 'Ť': 'T', 'Ů': 'U', 'Ž': 'Z'
    };
    const SLOVAK_MAP = {
        'á': 'a', 'ä': 'a', 'č': 'c', 'ď': 'd', 'é': 'e', 'í': 'i', 'ľ': 'l',
        'ĺ': 'l', 'ň': 'n', 'ó': 'o', 'ô': 'o', 'ŕ': 'r', 'š': 's', 'ť': 't',
        'ú': 'u', 'ý': 'y', 'ž': 'z',
        'Á': 'a', 'Ä': 'A', 'Č': 'C', 'Ď': 'D', 'É': 'E', 'Í': 'I', 'Ľ': 'L',
        'Ĺ': 'L', 'Ň': 'N', 'Ó': 'O', 'Ô': 'O', 'Ŕ': 'R', 'Š': 'S', 'Ť': 'T',
        'Ú': 'U', 'Ý': 'Y', 'Ž': 'Z'
    };
    const POLISH_MAP = {
        'ą': 'a', 'ć': 'c', 'ę': 'e', 'ł': 'l', 'ń': 'n', 'ó': 'o', 'ś': 's',
        'ź': 'z', 'ż': 'z',
        'Ą': 'A', 'Ć': 'C', 'Ę': 'E', 'Ł': 'L', 'Ń': 'N', 'Ó': 'O', 'Ś': 'S',
        'Ź': 'Z', 'Ż': 'Z'
    };
    const LATVIAN_MAP = {
        'ā': 'a', 'č': 'c', 'ē': 'e', 'ģ': 'g', 'ī': 'i', 'ķ': 'k', 'ļ': 'l',
        'ņ': 'n', 'š': 's', 'ū': 'u', 'ž': 'z',
        'Ā': 'A', 'Č': 'C', 'Ē': 'E', 'Ģ': 'G', 'Ī': 'I', 'Ķ': 'K', 'Ļ': 'L',
        'Ņ': 'N', 'Š': 'S', 'Ū': 'U', 'Ž': 'Z'
    };
    const ARABIC_MAP = {
        'أ': 'a', 'ب': 'b', 'ت': 't', 'ث': 'th', 'ج': 'g', 'ح': 'h', 'خ': 'kh', 'د': 'd',
        'ذ': 'th', 'ر': 'r', 'ز': 'z', 'س': 's', 'ش': 'sh', 'ص': 's', 'ض': 'd', 'ط': 't',
        'ظ': 'th', 'ع': 'aa', 'غ': 'gh', 'ف': 'f', 'ق': 'k', 'ك': 'k', 'ل': 'l', 'م': 'm',
        'ن': 'n', 'ه': 'h', 'و': 'o', 'ي': 'y'
    };
    const LITHUANIAN_MAP = {
        'ą': 'a', 'č': 'c', 'ę': 'e', 'ė': 'e', 'į': 'i', 'š': 's', 'ų': 'u',
        'ū': 'u', 'ž': 'z',
        'Ą': 'A', 'Č': 'C', 'Ę': 'E', 'Ė': 'E', 'Į': 'I', 'Š': 'S', 'Ų': 'U',
        'Ū': 'U', 'Ž': 'Z'
    };
    const SERBIAN_MAP = {
        'ђ': 'dj', 'ј': 'j', 'љ': 'lj', 'њ': 'nj', 'ћ': 'c', 'џ': 'dz',
        'đ': 'dj', 'Ђ': 'Dj', 'Ј': 'j', 'Љ': 'Lj', 'Њ': 'Nj', 'Ћ': 'C',
        'Џ': 'Dz', 'Đ': 'Dj'
    };
    const AZERBAIJANI_MAP = {
        'ç': 'c', 'ə': 'e', 'ğ': 'g', 'ı': 'i', 'ö': 'o', 'ş': 's', 'ü': 'u',
        'Ç': 'C', 'Ə': 'E', 'Ğ': 'G', 'İ': 'I', 'Ö': 'O', 'Ş': 'S', 'Ü': 'U'
    };
    const GEORGIAN_MAP = {
        'ა': 'a', 'ბ': 'b', 'გ': 'g', 'დ': 'd', 'ე': 'e', 'ვ': 'v', 'ზ': 'z',
        'თ': 't', 'ი': 'i', 'კ': 'k', 'ლ': 'l', 'მ': 'm', 'ნ': 'n', 'ო': 'o',
        'პ': 'p', 'ჟ': 'j', 'რ': 'r', 'ს': 's', 'ტ': 't', 'უ': 'u', 'ფ': 'f',
        'ქ': 'q', 'ღ': 'g', 'ყ': 'y', 'შ': 'sh', 'ჩ': 'ch', 'ც': 'c', 'ძ': 'dz',
        'წ': 'w', 'ჭ': 'ch', 'ხ': 'x', 'ჯ': 'j', 'ჰ': 'h'
    };

    const ALL_DOWNCODE_MAPS = [
        LATIN_MAP,
        LATIN_SYMBOLS_MAP,
        GREEK_MAP,
        TURKISH_MAP,
        ROMANIAN_MAP,
        RUSSIAN_MAP,
        UKRAINIAN_MAP,
        CZECH_MAP,
        SLOVAK_MAP,
        POLISH_MAP,
        LATVIAN_MAP,
        ARABIC_MAP,
        LITHUANIAN_MAP,
        SERBIAN_MAP,
        AZERBAIJANI_MAP,
        GEORGIAN_MAP
    ];

    const Downcoder = {
        'Initialize': function() {
            if (Downcoder.map) { // already made
                return;
            }
            Downcoder.map = {};
            for (const lookup of ALL_DOWNCODE_MAPS) {
                Object.assign(Downcoder.map, lookup);
            }
            Downcoder.regex = new RegExp(Object.keys(Downcoder.map).join('|'), 'g');
        }
    };

    function downcode(slug) {
        Downcoder.Initialize();
        return slug.replace(Downcoder.regex, function(m) {
            return Downcoder.map[m];
        });
    }


    function URLify(s, num_chars, allowUnicode) {
        // changes, e.g., "Petty theft" to "petty-theft"
        if (!allowUnicode) {
            s = downcode(s);
        }
        s = s.toLowerCase(); // convert to lowercase
        // if downcode doesn't hit, the char will be stripped here
        if (allowUnicode) {
            // Keep Unicode letters including both lowercase and uppercase
            // characters, whitespace, and dash; remove other characters.
            s = XRegExp.replace(s, XRegExp('[^-_\\p{L}\\p{N}\\s]', 'g'), '');
        } else {
            s = s.replace(/[^-\w\s]/g, ''); // remove unneeded chars
        }
        s = s.replace(/^\s+|\s+$/g, ''); // trim leading/trailing spaces
        s = s.replace(/[-\s]+/g, '-'); // convert spaces to hyphens
        s = s.substring(0, num_chars); // trim to first num_chars chars
        return s.replace(/-+$/g, ''); // trim any trailing hyphens
    }
    window.URLify = URLify;
}

```
--- END OF FILE: staticfiles\admin\js\urlify.js ---

--- START OF FILE: staticfiles\main\css\style.css ---
```css
@font-face {
    font-family: 'SUNDAY';
    
    src: url('../fonts/Sunday-Regular.otf') format('opentype'),
         url('../fonts/Sunday-Regular.ttf') format('truetype');
    font-weight: normal;
    font-style: normal;
    font-display: swap;
}
@font-face {
    font-family: 'FortuneC';
    /* Это правило было некорректным, запрашивался несуществующий шрифт.
       Теперь здесь корректное объявление курсива */
    src: url('../fonts/fortunec_italic.otf') format('opentype'); 
    font-weight: normal;
    font-style: italic;
    font-display: swap;
}
@font-face {
    font-family: 'FortuneC';
    src: url('../fonts/fortunec_bold.otf') format('opentype');
    font-weight: bold;
    font-style: normal;
    font-display: swap;
}
@font-face {
    font-family: 'FortuneC';
    src: url('../fonts/fortunec_bolditalic.otf') format('opentype');
    font-weight: bold;
    font-style: italic;
    font-display: swap;
}


:root {
    --font-sunday: 'SUNDAY', 'Montserrat', sans-serif;       
    --font-fortunec: 'FortuneC', 'Open Sans', sans-serif; 
    --color-white: #FFFFFF;         
    --color-green-accent: #44A56B;   
    --color-green-bg: #1E5C37;      
    --color-green-dark-bg: #14301F; 
    --color-black-bg: #010101;      
    --color-pink-accent: #D90C6B;
    --color-green-accent-rgb: 68, 165, 107;
    --fs-main-slogan: 3.125rem;      
    --fs-about-text: 1.9375rem;       
    --fs-section-title: 2.8125rem;    
    --fs-subsection-title: 1.9375rem; 
    --fs-body: 1.3125rem;             
    --fs-button: 1.3125rem;           
    
    
    --header-padding-normal: 0.8rem;
    --logo-height-normal: 45px;
    --nav-font-size-normal: 1.2rem; 
    
    
    --header-padding-hover: 1.2rem;   
    --logo-height-hover: 80px;        
    --nav-font-size-hover: 1.3125rem; 

    --header-transition-duration: 0.4s; 
}

*, *::before, *::after { box-sizing: border-box; margin: 0; padding: 0; }
html { font-size: 16px; scroll-behavior: smooth; }
body {
    font-family: var(--font-fortunec); font-size: var(--fs-body); font-weight: normal; 
    line-height: 1.6; color: var(--color-white); background-color: var(--color-black-bg);
    -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale;
}
main {
    transition: padding-top var(--header-transition-duration) ease-in-out;
    position: relative; 
    z-index: 1;
    background-color: transparent; 
}
h1, h2, h3, h4, h5, h6 { font-family: var(--font-sunday); font-weight: normal; line-height: 1.2; color: var(--color-white); }
h2 { font-size: var(--fs-section-title); text-transform: uppercase; text-align: center; margin-bottom: 4rem; }
a { color: inherit; text-decoration: none; }
img, video { max-width: 100%; height: auto; display: block; }
ul { list-style: none; }
.container { width: 90%; max-width: 1300px; margin-left: auto; margin-right: auto; padding-left: 15px; padding-right: 15px; }

#animated-background-container {
    position: fixed;
    top: 0; left: 0;
    width: 100%; height: 100%;
    z-index: -10; 
    overflow: hidden; 
    pointer-events: none; 
}
#background-pattern {
    position: absolute;
    top: -10%; left: -10%;
    width: 120%; height: 120%;
    background-repeat: repeat;
    z-index: -2; 
}
.background-object {
    position: absolute;
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center;
}

@keyframes floatAnimation {
    0% { transform: translateY(0px) rotate(0deg); }
    25% { transform: translateY(-20px) rotate(5deg); }
    50% { transform: translateY(0px) rotate(0deg); }
    75% { transform: translateY(20px) rotate(-5deg); }
    100% { transform: translateY(0px) rotate(0deg); }
}


#site-header { 
    padding: var(--header-padding-hover) 0;
    position: fixed; top: 0; left: 0; width: 100%;
    z-index: 1000; background-color: transparent;
    transition: padding var(--header-transition-duration) ease-in-out, background-color var(--header-transition-duration) ease-in-out;
}

#site-header.header-active {
    background-color: var(--color-black-bg);
}

.header-container { display: flex; align-items: center; justify-content: space-between; position: relative;}

#site-header .logo img { 
    height: var(--logo-height-hover);
    transition: height var(--header-transition-duration) ease-in-out; 
}
.main-nav {
    flex-grow: 1; 
    padding: 0 4rem;
}
#site-header .main-nav ul { 
    display: flex;
    flex-wrap: wrap; 
    justify-content: flex-start;
    gap: 0.5rem 3rem; 
    padding: 0;
    transition: opacity var(--header-transition-duration) ease;
}
#site-header .main-nav a {
    font-family: var(--font-fortunec); 
    font-size: var(--nav-font-size-hover);
    font-weight: normal; 
    color: var(--color-white); 
    padding: 0;
    transition: color 0.3s ease;
}
#site-header .main-nav a:hover { color: var(--color-green-accent); }

.header-center-text {
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
    font-family: var(--font-fortunec);
    font-size: var(--nav-font-size-normal);
    opacity: 0;
    pointer-events: none;
    transition: opacity var(--header-transition-duration) ease;
}

#site-header.header-collapsed {
    padding: var(--header-padding-normal) 0;
}
#site-header.header-collapsed .logo img {
    height: var(--logo-height-normal);
}
#site-header.header-collapsed .main-nav ul {
    opacity: 0;
    pointer-events: none;
}
#site-header.header-collapsed .header-center-text {
    opacity: 1;
    pointer-events: all;
}

.section-about-us {
    min-height: 80vh; 
    padding-top: 9rem; 
    padding-bottom: 5rem;
    display: flex;
    flex-direction: column; 
    justify-content: center; 
    align-items: flex-start; 
    text-align: left;
    background-color: transparent; 
    position: relative; 
}
.section-about-us .container {
    width: 100%; 
}
.about-us-content {
    max-width: 65ch; 
    margin: 0; 
}
.about-us-social-icons {
    display: flex;
    justify-content: flex-start;
    gap: 1.5rem;
    margin-bottom: 2rem;
}
.about-us-social-icons img {
    height: 40px;
    width: 40px;
    opacity: 0.8;
    transition: opacity 0.3s ease-in-out;
}
.about-us-social-icons a:hover img {
    opacity: 1;
}

.section-about-us .slogan {
    font-family: var(--font-sunday); 
    font-size: var(--fs-main-slogan); 
    color: var(--color-green-accent); 
    font-weight: normal; 
    text-transform: uppercase; 
    margin-bottom: 2rem; 
    line-height: 1.2;
}
.section-about-us .about-us-text { 
    font-family: var(--font-fortunec); 
    font-size: var(--fs-about-text); 
    font-weight: normal; 
    color: var(--color-white); 
    line-height: 1.7;
    text-align: left; 
    margin: 0;
}
.section-about-us .about-us-text p { margin-bottom: 1em; }
.section-about-us .about-us-text p:last-child { margin-bottom: 0; }

.btn {
    display: inline-block; padding: 0.8em 1.8em; background-color: var(--color-pink-accent); 
    color: var(--color-white); font-family: var(--font-fortunec); font-size: var(--fs-button); font-weight: bold; 
    text-align: center; border: 2px solid var(--color-pink-accent); border-radius: 5px; text-transform: uppercase; 
    transition: background-color 0.3s ease, color 0.3s ease, transform 0.2s ease;
    cursor: pointer; letter-spacing: 0.05em;
}
.btn:hover, .btn:focus {
    background-color: var(--color-white); color: var(--color-pink-accent); border-color: var(--color-pink-accent);
    transform: translateY(-2px); outline: none;
}


main section { 
    padding-top: 5rem; 
    padding-bottom: 5rem; 
    position: relative; 
    background-color: transparent; 
}


.section-features h2 {
    color: var(--color-green-accent); 
    margin-bottom: 5rem;
}

.features-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(450px, 1fr)); 
    gap: 3.5rem 5rem;
}

.feature-item {
    display: flex;
    align-items: center;
    gap: 2rem;
    text-align: left;
}

.feature-icon-wrapper {
    flex-shrink: 0; 
    width: 110px;
    height: 110px;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: rgba(var(--color-green-accent-rgb), 0.1); 
}

.feature-icon-wrapper img {
    max-width: 55px;
    max-height: 55px;
    object-fit: contain;
}

.feature-text-content h3 {
    font-family: var(--font-sunday);
    font-size: var(--fs-subsection-title);
    color: var(--color-green-accent);
    text-transform: uppercase;
    margin-bottom: 0.75rem;
}

.feature-text-content p {
    font-size: 1.3125rem;
    line-height: 1.6;
}



.booking-carousel-wrapper {
    position: relative;
    padding-bottom: 50px; 
}
.booking-swiper {
    width: 100%;
}
.booking-carousel-item { 
    width: 220px;
    height: 220px;
    transition: transform 0.4s ease, filter 0.4s ease;
}
.booking-carousel-link {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    overflow: hidden;
    position: relative;
    color: var(--color-white);
}

.booking-carousel-art {
    width: 100%;
    height: 100%;
    object-fit: cover; 
    transition: transform 0.4s ease, filter 0.4s ease;
}

.swiper-slide-active .booking-carousel-item {
    transform: scale(1.3);
    z-index: 10;
}
.swiper-slide-active .booking-carousel-link:hover .booking-carousel-art {
    transform: scale(1.1);
}

.booking-carousel-item:not(.swiper-slide-active) {
    filter: brightness(0.7);
    cursor: pointer; 
}

.booking-carousel-info {
    position: absolute;
    top: 0; left: 0;
    width: 100%; height: 100%;
    background: rgba(0, 0, 0, 0.4);
    transition: opacity 0.3s ease, background 0.4s ease, backdrop-filter 0.4s ease;
    display: flex;
    justify-content: center;
    align-items: center;
    text-align: center;
    padding: 20px;
}
.swiper-slide-active .booking-carousel-link:hover .booking-carousel-info {
    background: radial-gradient(circle, rgba(0,0,0,0.75) 15%, rgba(0,0,0,0) 80%);
    backdrop-filter: blur(4px);
    -webkit-backdrop-filter: blur(4px);
}

.booking-carousel-item:not(.swiper-slide-active) .booking-carousel-info {
    opacity: 0;
}
.booking-carousel-item:not(.swiper-slide-active) .booking-carousel-link {
    pointer-events: none;
}

.info-content-wrapper {
    position: relative;
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
}

.info-default, .info-hover {
    transition: opacity 0.3s ease-in-out;
}

.info-hover {
    position: absolute;
    opacity: 0;
    font-size: 1.1rem;
    padding: 0 10px;
}
.info-hover p {
    margin: 0;
    text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.8);
}

.booking-carousel-title {
    font-family: var(--font-fortunec);
    font-weight: bold;
    font-size: 1.3125rem;
    line-height: 1.2;
    margin: 0;
    text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
}
.booking-carousel-dates {
    font-family: var(--font-fortunec);
    font-size: 1.3125rem;
    margin-top: 0.5rem;
    text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
}


.swiper-slide-active .booking-carousel-link:hover .info-default {
    opacity: 0;
}
.swiper-slide-active .booking-carousel-link:hover .info-hover {
    opacity: 1;
}


.booking-carousel-nav-prev,
.booking-carousel-nav-next {
    position: absolute;
    top: 0;
    width: 35%;
    height: 100%;
    z-index: 20; 
    cursor: pointer;
}
.booking-carousel-nav-prev { left: 0; }
.booking-carousel-nav-next { right: 0; }

.booking-swiper .swiper-pagination {
    bottom: 0px !important; 
}
.booking-swiper .swiper-pagination-bullet {
    background: rgba(255, 255, 255, 0.5);
    width: 10px;
    height: 10px;
}
.booking-swiper .swiper-pagination-bullet-active {
    background: var(--color-pink-accent);
}

.swiper-no-transition .swiper-wrapper {
    transition-duration: 0s !important;
}



#orbibol-section .container {
    max-width: 800px;
}

#orbibol-section h2 {
    color: var(--color-white);
}

.orbibol-general-info { 
    text-align: center;
    max-width: 65ch;
    margin: 0 auto 3.5rem auto;
    font-size: 1.25rem;
    line-height: 1.7;
}

.orbibol-content-wrapper {
    display: flex;
    flex-direction: column;
    gap: 3rem; 
    margin-bottom: 3rem; 
}

.orbibol-item {
    display: flex;
    align-items: center;
    gap: 2rem; 
    text-align: left;
}

.orbibol-icon-wrapper {
    flex-shrink: 0;
    width: 100px;
    height: 100px;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
}

.orbibol-icon-wrapper img {
    max-width: 50px;
    max-height: 50px;
    object-fit: contain;
}

.orbibol-text-content h3 {
    font-family: var(--font-sunday);
    font-size: 1.8rem;
    color: var(--color-white);
    text-transform: uppercase;
    margin-bottom: 0.5rem;
}

.orbibol-text-content p {
    font-size: 1.1rem;
    line-height: 1.6;
}

.orbibol-details-link {
    display: inline-block;
    color: var(--color-green-accent);
    font-family: var(--font-sunday);
    font-size: 1.25rem;
    text-transform: uppercase;
    text-decoration: none;
    letter-spacing: 0.05em;
    transition: color 0.3s ease;
}

.orbibol-details-link:hover {
    color: var(--color-white);
}

.text-center { 
    text-align: center;
}



.section-games {} 

.section-games h2 {
    color: var(--color-white); 
}

.games-grid { 
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(450px, 1fr)); 
    gap: 3.5rem 5rem;
}

.game-type-item {
    display: flex;
    align-items: center;
    gap: 2rem;
    text-align: left;
    color: var(--color-white);
    background-color: transparent;
    padding: 0;
    border-radius: 0;
}

.game-type-item .game-type-icon-wrapper {
    flex-shrink: 0;
    width: 110px; 
    height: 110px; 
    background-color: rgba(var(--color-green-accent-rgb), 0.1);
    border-radius: 50%; 
    display: flex; 
    justify-content: center; 
    align-items: center;
    margin-bottom: 0;
}

.game-type-item .game-type-icon-wrapper img { 
    max-height: 55px; 
    max-width: 55px;
    object-fit: contain;
}

.game-type-item .game-type-text-content h3 {
    font-family: var(--font-sunday);
    font-size: var(--fs-subsection-title);
    font-weight: normal;
    color: var(--color-green-accent);
    margin-bottom: 0.75rem;
    text-transform: uppercase;
}

.game-type-item .game-type-text-content p {
    font-size: 1.1rem;
    line-height: 1.6;
    color: var(--color-white);
}


#market-section h2 {
    color: var(--color-white);
    margin-bottom: 5rem;
}

.market-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 3rem;
    margin-bottom: 4rem;
}

.product-card {
    text-align: center;
    color: var(--color-white);
    text-decoration: none;
    transition: transform 0.3s ease;
}
.product-card:hover {
    transform: translateY(-5px);
}

.product-image-wrapper {
    width: 250px;
    height: 250px;
    border-radius: 50%;
    overflow: hidden;
    margin: 0 auto 1.5rem auto;
}

.product-image-wrapper img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.product-title {
    font-family: var(--font-fortunec);
    font-weight: bold;
    font-size: 1.5rem;
    margin-bottom: 0.5rem;
}

.product-price {
    font-family: var(--font-sunday);
    font-size: 3.3125rem;
    color: var(--color-green-accent);
    margin-bottom: 1rem;
}

.product-description {
    font-size: 1.1rem;
    line-height: 1.5;
    max-width: 35ch;
    margin: 0 auto;
}

.market-more-link {
    display: block;
    text-align: center;
    font-family: var(--font-sunday);
    font-size: 1.25rem;
    color: var(--color-green-accent);
    text-decoration: none;
    transition: color 0.3s ease;
}
.market-more-link:hover {
    color: var(--color-white);
    text-decoration: underline;
}



#gallery-section h2 {
    color: var(--color-white);
}
.gallery-description {
    text-align: center;
    max-width: 65ch;
    margin: 0 auto 4rem auto;
    font-size: 1.25rem;
    line-height: 1.7;
}
.gallery-grid {
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    gap: 8rem;
    align-items: flex-start;
}
.gallery-item {
    text-align: center;
}
.gallery-item h3 {
    font-family: var(--font-sunday);
    font-weight: normal;
    text-transform: uppercase;
    font-size: 2.5rem;
    color: var(--color-white);
    margin-bottom: 2rem;
}
.gallery-content-link {
    display: inline-block;
    text-decoration: none;
}
.gallery-content-link:hover .gallery-media-wrapper {
    transform: scale(1.05);
    box-shadow: 0 0 25px rgba(var(--color-green-accent-rgb), 0.5);
}
.gallery-content-link:hover .gallery-order-link {
    color: var(--color-white);
}
.gallery-media-wrapper {
    width: 300px;
    height: 300px;
    border-radius: 50%;
    overflow: hidden;
    margin: 0 auto;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}
.gallery-media-wrapper img,
.gallery-media-wrapper video {
    width: 100%;
    height: 100%;
    object-fit: cover;
}
.gallery-order-link {
    display: inline-block;
    margin-top: 2rem;
    font-family: var(--font-sunday);
    font-size: 2rem;
    color: var(--color-green-accent);
    text-transform: uppercase;
    transition: color 0.3s ease;
    text-decoration: none;
}



.section-contacts {} 
.section-contacts h2 {}
.section-contacts p { margin-bottom: 0.75rem; }
.section-contacts a { color: var(--color-green-accent); text-decoration: underline; }
.section-contacts a:hover { text-decoration: none; }

.social-icons-footer {
    display: flex;
    justify-content: center;
    gap: 1.5rem;
    margin-top: 2rem;
}
.social-icons-footer a {
    text-decoration: none;
}
.social-icons-footer img {
    height: 30px;
    width: 30px;
    opacity: 0.7;
    transition: opacity 0.3s ease;
}
.social-icons-footer a:hover img {
    opacity: 1;
}



#site-footer-bottom {
    padding: 2rem 0; text-align: center; font-size: 0.9rem;
    background-color: var(--color-green-dark-bg); 
    color: rgba(255,255,255,0.7);
    position: relative; 
    z-index: 10;
}

/* Error Pages Styles */
.section-error {
    min-height: 80vh; 
    padding-top: 12rem; 
    padding-bottom: 5rem;
    display: flex;
    flex-direction: column; 
    justify-content: center; 
    align-items: center; 
    text-align: center;
    background-color: transparent; 
    position: relative; 
}

.error-code {
    font-family: var(--font-sunday);
    font-size: 10rem;
    color: var(--color-pink-accent);
    line-height: 1;
    margin-bottom: 1rem;
}

.error-title {
    font-family: var(--font-sunday);
    font-size: var(--fs-section-title);
    text-transform: uppercase;
    color: var(--color-white);
    margin-bottom: 2rem;
}

.error-description {
    font-family: var(--font-fortunec);
    font-size: var(--fs-body);
    color: var(--color-white);
    line-height: 1.7;
    max-width: 60ch;
    margin: 0 auto 3rem auto;
}

@media (max-width: 1100px) {
    .features-grid,
    .games-grid {
        grid-template-columns: 1fr;
        gap: 3rem;
    }
}

@media (max-width: 992px) {
    .main-nav {
        display: none; 
    }
}

@media (max-width: 768px) {
    .about-us-content {
        padding: 0 15px; 
    }
    .orbibol-item {
        flex-direction: column;
        text-align: center;
        gap: 1.5rem;
    }
    .booking-carousel-nav-prev,
    .booking-carousel-nav-next {
        display: none;
    }
    .error-code {
        font-size: 8rem;
    }
    .error-title {
        font-size: 2.2rem;
    }
}

@media (max-width: 576px) {
    .features-grid,
    .games-grid {
        display: flex;
        flex-direction: column;
    }

    .feature-item,
    .game-type-item {
        flex-direction: column;
        text-align: center;
    }

    .section-features h2 {
        margin-bottom: 3rem;
    }
}
```
--- END OF FILE: staticfiles\main\css\style.css ---

--- START OF FILE: staticfiles\main\js\main.js ---
```js

document.addEventListener('DOMContentLoaded', function() {
    
    function setupHeader() {
        const siteHeader = document.getElementById('site-header');
        if (!siteHeader) return;
        const scrollThreshold = 100;
        const activeThreshold = 10;

        function handleScroll() {
            const scrollY = window.scrollY;
            siteHeader.classList.toggle('header-active', scrollY > activeThreshold);
            siteHeader.classList.toggle('header-collapsed', scrollY > scrollThreshold);
        }
    
        window.addEventListener('scroll', handleScroll, { passive: true });
        
        siteHeader.addEventListener('mouseenter', () => {
            siteHeader.classList.add('header-active');
            siteHeader.classList.remove('header-collapsed');
        });
    
        siteHeader.addEventListener('mouseleave', () => {
             handleScroll();
        });
        
        handleScroll();
    }

    function setupDynamicBackground() {
        const body = document.body;
        const settings = body.dataset;
        if (settings.backgroundEnabled !== 'true') return;

        const bgContainer = document.getElementById('animated-background-container');
        if (!bgContainer) return;

        const patternEl = document.getElementById('background-pattern');
        if (patternEl) {
            body.style.backgroundColor = settings.bgColor;
            if (settings.patternUrl) {
                patternEl.style.backgroundImage = `url('${settings.patternUrl}')`;
                patternEl.style.backgroundSize = settings.patternSize;
                patternEl.style.opacity = settings.patternOpacity;
            }
        }
        
        const objectPlaceholders = document.querySelectorAll('.background-object-placeholder');
        const parallaxObjects = [];

        objectPlaceholders.forEach(placeholder => {
            const data = placeholder.dataset;
            const objDiv = document.createElement('div');
            objDiv.className = 'background-object';
            
            objDiv.style.backgroundImage = `url('${data.imageUrl}')`;
            objDiv.style.width = `${data.width}px`;
            objDiv.style.height = `${data.width}px`;
            objDiv.style.top = data.top;
            objDiv.style.left = data.left;
            objDiv.style.zIndex = data.zIndex;
            objDiv.style.opacity = data.opacity;
            
            if (data.parallaxTargetId) {
                objDiv.style.position = 'absolute';
                parallaxObjects.push({
                    element: objDiv,
                    speed: parseFloat(data.parallaxSpeed) || 0,
                    initialTop: parseFloat(data.top)
                });
            } else {
                objDiv.style.position = 'fixed';
                const animDuration = parseInt(data.animDuration, 10);
                if (animDuration > 0) {
                    objDiv.style.animation = `floatAnimation ${animDuration}s ease-in-out ${data.animDelay || 0}s infinite`;
                }
            }

            bgContainer.appendChild(objDiv);
            placeholder.remove();
        });

        if (parallaxObjects.length > 0) {
            function handleParallax() {
                const scrollY = window.scrollY;
                parallaxObjects.forEach(obj => {
                    const translateY = obj.initialTop + (-scrollY * obj.speed / 10);
                    obj.element.style.transform = `translate(-50%, ${translateY}%)`;
                });
            }
            window.addEventListener('scroll', handleParallax, { passive: true });
            handleParallax(); 
        }
    }

    function setupSwiper() {
        const swiperContainer = document.querySelector('.booking-swiper');
        if (swiperContainer) {
            new Swiper(swiperContainer, {
                effect: 'coverflow',
                grabCursor: true,
                centeredSlides: true,
                slidesPerView: 3, 
                loop: true,
                slideToClickedSlide: true,
                coverflowEffect: {
                    rotate: 0,
                    stretch: -150, 
                    depth: 100, 
                    modifier: 1,
                    scale: 0.7, 
                    slideShadows: false, 
                },
                pagination: {
                    el: '.swiper-pagination',
                    clickable: true,
                },
                navigation: {
                    nextEl: '.booking-carousel-nav-next',
                    prevEl: '.booking-carousel-nav-prev',
                },
                breakpoints: {
                    320: {
                        slidesPerView: 1,
                        coverflowEffect: {
                            stretch: 0,
                            depth: 200,
                            modifier: 1,
                            scale: 0.85,
                        },
                    },
                    768: {
                        slidesPerView: 3,
                         coverflowEffect: {
                            rotate: 0,
                            stretch: -150, 
                            depth: 100, 
                            modifier: 1,
                            scale: 0.7, 
                        },
                    }
                }
            });
        }
    }

    setupHeader();
    setupDynamicBackground();
    setupSwiper();
});

```
--- END OF FILE: staticfiles\main\js\main.js ---

--- START OF FILE: templates\404.html ---
```html
{% extends "main/base.html" %}
{% load static %}

{% block title %}Страница не найдена (404) - {{ block.super }}{% endblock %}

{% block header %}{# Пустой блок, чтобы не показывать обычное меню на странице ошибки #}{% endblock %}

{% block content %}
<section class="section-error">
    <div class="container">
        <div class="error-code">404</div>
        <h1 class="error-title">Страница не найдена</h1>
        <p class="error-description">
            Кажется, вы свернули не туда. Но не волнуйтесь, даже самые интересные приключения начинаются с неожиданных поворотов.
        </p>
        <a href="{% url 'main:home_page' %}" class="btn">Вернуться на главную</a>
    </div>
</section>
{% endblock %}

{% block footer %}{# И футер тоже скроем #}{% endblock %}
```
--- END OF FILE: templates\404.html ---

--- START OF FILE: templates\500.html ---
```html
{% extends "main/base.html" %}
{% load static %}

{% block title %}Ошибка сервера (500) - {{ block.super }}{% endblock %}

{% block header %}{% endblock %}

{% block content %}
<section class="section-error">
    <div class="container">
        <div class="error-code">500</div>
        <h1 class="error-title">Внутренняя ошибка сервера</h1>
        <p class="error-description">
            Что-то пошло не так на нашей стороне. Мы уже работаем над устранением проблемы. Пожалуйста, попробуйте зайти чуть позже.
        </p>
        <a href="{% url 'main:home_page' %}" class="btn">Вернуться на главную</a>
    </div>
</section>
{% endblock %}

{% block footer %}{% endblock %}
```
--- END OF FILE: templates\500.html ---

--- START OF FILE: templates\base_error.html ---
```html
{% load static %}
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <title>{% block title %}Ошибка | {% if company_profile and company_profile.site_name %}{{ company_profile.site_name }}{% else %}Maybe - Игры и События{% endif %}{% endblock %}</title>
    
    <link rel="shortcut icon" href="{% static 'main/images/favicon.ico' %}" type="image/x-icon">

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700;900&family=Open+Sans:wght@400;700&display=swap" rel="stylesheet">
    
    <link rel="stylesheet" href="{% static 'main/css/style.css' %}">
    <link rel="stylesheet" href="https://unpkg.com/swiper/swiper-bundle.min.css" />
</head>
<body 
    {% if background_settings %}
        data-background-enabled="true"
        data-pattern-url="{{ background_settings.background_pattern.url|default_if_none:'' }}"
        data-pattern-size="{{ background_settings.pattern_size|default:'200px' }}"
        data-pattern-opacity="{{ background_settings.pattern_opacity|stringformat:'.2f'|cut:',' }}"
        data-bg-color="{{ background_settings.background_color|default:'#010101' }}"
    {% endif %}
>
    
    <div id="animated-background-container">
        <div id="background-pattern"></div>
        {% if background_settings %}
            {% for obj in background_settings.background_objects.all %}
                <div class="background-object-placeholder"
                    data-image-url="{{ obj.image.url }}"
                    data-width="{{ obj.width }}"
                    data-top="{{ obj.initial_top }}"
                    data-left="{{ obj.initial_left }}"
                    data-z-index="{{ obj.z_index }}"
                    data-opacity="{{ obj.opacity|stringformat:'.2f'|cut:',' }}"
                    data-anim-duration="{{ obj.animation_duration }}"
                    data-anim-delay="{{ obj.animation_delay }}"
                    data-parallax-target-id="{{ obj.parallax_target_id|default:'' }}"
                    data-parallax-speed="{{ obj.parallax_speed|stringformat:'.2f'|cut:',' }}"
                ></div>
            {% endfor %}
        {% endif %}
    </div>

    <header id="site-header">
        <div class="container header-container">
            <a href="/" class="logo">
                {# На темном фоне страницы ошибки пытаемся использовать светлый логотип #}
                {% if company_profile.logo_image_light %}
                    <img src="{{ company_profile.logo_image_light.url }}" alt="Логотип Maybe">
                {% elif company_profile.logo_image %}
                    <img src="{% static 'main/images/site_assets/logo.svg' %}" alt="Логотип Maybe">
                {% else %}
                    <img src="{% static 'main/images/logo.png' %}" alt="Логотип Maybe">
                {% endif %}
            </a>
            <div class="header-center-text">May be</div>
            <nav class="main-nav">
                <ul>
                    <li><a href="/#about-us-section">О нас</a></li>
                    <li><a href="/#features-section">Что мы предлагаем</a></li>
                    <li><a href="/#booking-section">Запись на игру</a></li>
                    <li><a href="/#orbibol-section">Орбибол</a></li>
                    <li><a href="/#games-section">Игры</a></li>
                    <li><a href="/#market-section">Маркет</a></li>
                    <li><a href="/#gallery-section">Фото и видео галерея</a></li>
                    <li><a href="/#contacts-section">Контакты</a></li>
                </ul>
            </nav>
        </div>
    </header>

    <main id="main-content">
        {% block content %}
        
        {% endblock %}
    </main>
    
    <footer id="site-footer-bottom">
        <div class="container">
            <p>© {% now "Y" %} {% if company_profile and company_profile.site_name %}{{ company_profile.site_name }}{% else %}Maybe{% endif %}. Все права защищены.</p>
        </div>
    </footer>

    <script src="https://unpkg.com/swiper/swiper-bundle.min.js"></script>
    <script src="{% static 'main/js/main.js' %}"></script>
</body>
</html>
```
--- END OF FILE: templates\base_error.html ---

--- START OF FILE: .gitignore ---
```
# .gitignore

# Environments
.env
venv/
env/

# Django
db.sqlite3
*.log
staticfiles/


# Python
*.pyc
__pycache__/
```
--- END OF FILE: .gitignore ---

--- START OF FILE: build.sh ---
```sh
#!/usr/bin/env bash
set -o errexit

pip install -r requirements.txt

# ВОЗВРАЩАЕМ КАК БЫЛО, ЧТОБЫ СБОРКА НЕ ПАДАЛА
python manage.py collectstatic --no-input --ignore cloudinary --ignore main

python manage.py migrate
python manage.py createsuper
```
--- END OF FILE: build.sh ---

--- START OF FILE: manage.py ---
```py
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

```
--- END OF FILE: manage.py ---

